{{inline citations|date=June 2013}}
{{ProgLangCompare}}

C++ doesn't have:
* [[ALGOL_68#proc:_Procedures|PROC]] - first class [[nested function]]s (emulation due to local definitions of class-types, which then could be [[Function object|functors]], also new [[C++11]] has [[C++11#Lambda_functions_and_expressions|lambda functions]]),
* [[ALGOL_68#op: Operators|OP and PRIO]] - definable operator symbols and priorities,
* garbage collection (could be emulated with help of [[Smart_pointer#C.2B.2B_smart_pointers|smart pointers]]),
* ''use before define'',
* [[ALGOL_68#formatted transput|formatted transput]] using complex formatting declarations,
* [[ALGOL 68#Dyadic operators with associated priorities|:=]] - assignment operation symbol (to avoid confusion with equal sign),
* [[ALGOL_68#struct.2C_union_.26_.5B:.5D:_Structures.2C_unions_and_arrays|array]] (and slice operations on them, but in layered libraries),
* automatic [[ALGOL_68#struct.2C_union_.26_.5B:.5D:_Structures.2C_unions_and_arrays|UNION]]s,
* [[ALGOL_68#Expressions_and_compound_statements|CASE expressions]],
* nonlocal [[ALGOL_68#Code sample|GOTO]]
* intuitive declaration syntax due to its origin from [[C Programming Language|C]].

ALGOL 68 doesn't have:
* public/private struct member access protection,
* [[Function overloading|overloaded procedures]] (in contrast to operators),
* explicit memory deallocation, <!--  instead, GC -->
* forward declarations (use before definition is allowed)
* textual [[Preprocessor|preprocessing]] (e.g. macros), <!-- std ALGOL 68 did have "library prelude option" -->
* distinct reference and pointer types,
* [[ALGOL_68#pr_.26_co:_Pragmats_and_Comments|comment]] lines (only bracketed comments),
* [[C%2B%2B#Objects|struct inheritance, struct member functions, virtual functions]].
* destructors, exceptions, templates, namespaces, structured loop exits

==Comparison of the assignment and equality operators==
{|border="1" style="border-collapse: collapse;"
!bgcolor=#cccccc|Intent ||bgcolor=#cccccc|ALGOL 68 ||bgcolor=#cccccc|C++
|-
|Assign a value 888 to a variable ''x'' || {{code|lang=algol68|1=x:=888;}} || {{cpp|1=x = 888;}}
|-
|Compare two values || <tt>'''if''' x = 888 '''then''' ... '''fi'''</tt> || {{cpp|1=if (x == 888) { ... }}}
|-
|Define a constant || <tt>'''int''' x=888;</tt> || {{cpp|1=const int x = 888;}}
|-
|Initialise a variable || <tt>'''int''' x:=888;</tt> || {{cpp|1=int x = 888;}}
|-
|Allocate a variable from the '''heap''' || <tt>'''ref''' '''int''' x = '''heap''' '''int''';</tt><br>or simply:<br><tt>'''heap''' '''int''' x;</tt> || {{cpp|1=int* x = new int;}}
|-
|Compare address of two pointers || <tt> '''ref''' '''int''' x, y;  <br>'''if''' x :=: y '''then''' ... '''fi'''</tt> || {{cpp|1=int* x; int* y;}}<br/>
{{cpp|1=if (x == y) { ... } }}
|-
|Compare value referenced by two pointers || <tt> '''ref''' '''int''' x, y; <br>'''if''' x = y '''then''' ... '''fi'''</tt> || {{cpp|1=int* x; int* y;}}<br/>
{{cpp|1=if (*x == *y) { ... } }}
|-
|Name a new type || <tt>'''mode''' '''longreal''' = '''long''' '''real''';</tt> || {{cpp|1=typedef double longreal;}}
|-
|Name a new record type || <tt>'''mode''' '''cust''' = '''struct'''('''string''' name, address);</tt> || {{cpp|1=struct cust { std::string name, address; }; }} 
|-
|Name a new union type || <tt>'''mode''' '''taggedu''' = '''union'''('''string''' s, '''real''' r);</tt> || {{cpp|1=union u { std::string s; float f; }; }} 
|-
|Name a procedure or function || <tt>'''proc''' f = ('''real''' x) '''real''': ( code; result );</tt> || {{cpp|1=float f(float x) { code; return result; } }}
|-
|Procedure default parameters|| <tt>'''proc''' p = ('''union''' ('''real''', '''void''') in x)'''void''': 
&nbsp;&nbsp;&nbsp;&nbsp;( '''real''' x = (in x|('''real''' x):x|888); code ); </tt>
| {{cpp|1=void p(float x=888) { code; } }}
|-
|Name a new operator || '''op''' ↑ = ('''real''' x,y) '''real''': x**y; || {{n/a}}
|-
|Set priority on a new operator || '''prio''' ↑ = 9; || {{n/a}}
|-
|Duplication by assignment || {{code|lang=algol68|1=a:=b:=c:=d;}} || {{cpp|1=a = b = c = d;}}
|-
|Displacement operator - [[ALGOL 68C]] only || {{code|lang=algol68|1=a:=:=b:=:=c:=:=d;}} || {{cpp|1=a = b; b = c; c = d;}}
|-
| Append "substr" to a variable ''str'' || {{code|lang=algol68|1=str +:= "substr";}} || {{cpp|1=str += "substr";}}
|-
| Prefix "substr" to a variable ''str'' || {{code|lang=algol68|1="substr" +=: str;}} || {{cpp|1=str = "substr" + str;}}
|-
|}

==Code Examples==

===Union declaration and use===
Assigning values into an A68 <code>'''union'''</code> variable is automatic, 
the type is "tagged" to the variable, but pulling the value back out is 
syntactically awkward as a ''conformity-clause'' is required.

'''ALGOL 68 example:'''
  '''union'''('''int''', '''char''') x:=666;
  printf(($3d l$, (x|('''int''' i):i) ))
'''C/C++ example:'''
<source lang="cpp">
  union { int i; char c; } x = { 666 };
  std::cout << x.i << std::endl; 
</source>
The net effect of "type-tagging" is that Algol68's strong typing
"half" encroaches into the <code>'''union'''</code>.

===Mode declaration===
A new mode (type) may be declared using a <code>mode</code> declaration:

 '''int''' max=99;
 '''mode''' '''newtype''' = [0:9][0:max]'''struct''' (
    '''long''' '''real''' a, b, c, '''short''' '''int''' i, j, k, '''ref''' '''real''' r
 );

This has the similar effect as the following C++ code:
<source lang="cpp">
const int max=99;
typedef struct { 
    double a, b, c; short i, j, k; float& r;
} newtype[9+1][max+1];
</source>
Note that for ALGOL 68 only the newtype name appears to the left of the equality, and most notably the construction is made - and can be read - from left to right without regard to priorities.

== External references ==
* [http://comjnl.oxfordjournals.org/cgi/content/abstract/21/4/316 A comparison of PASCAL and ALGOL 68] - [[Andrew S. Tanenbaum]] - June 1977.
* [http://remus.rutgers.edu/cs314/s2004/ryder/lectures/intro-1-2upNew.pdf Orthogonal language design] - Apr 2004 - retrieved May 10, 2007
* [http://remus.rutgers.edu/cs314/s2004/ryder/lectures/formal-4-2upNew.pdf How Solve the Dangling Else?] - Apr 2004 - retrieved May 10, 2007
* [http://remus.rutgers.edu/cs314/s2004/ryder/lectures/Types2-23New-2up.pdf A comparison of Pascal, C, C++ and Algol68: Types, cont Type system, Type checking, Type safety, Type conversion, Primitive types, Aggregate types: arrays] - Apr 2004 - retrieved May 10, 2007
* [http://remus.rutgers.edu/cs314/s2004/ryder/lectures/Types-22-425-2up.pdf Arrays in Algol68] - Apr 2004 - retrieved May 10, 2007

{{DEFAULTSORT:Comparison Of Algol 68 And C}}
[[Category:Programming language comparisons|ALGOL 68 and C++]]
[[Category:Articles with example ALGOL 68 code]]
[[Category:Articles with example C++ code]]
