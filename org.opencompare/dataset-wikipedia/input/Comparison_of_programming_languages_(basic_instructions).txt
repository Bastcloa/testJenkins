{{Refimprove|date=February 2009}}
{{ProgLangCompare}}
'''Comparison of programming languages''' is a common topic of discussion among [[software engineer]]s. Basic instructions of several [[programming language]]s are compared here.
__TOC__

== Conventions of this article ==
The '''bold''' is the literal code. The non-bold is interpreted by the reader. Statements in [[guillemets]] (« … ») are optional. {{keypress|Tab}} indicates a necessary indent (with whitespace).
{{-}}

== Type identifiers ==

=== [[Integer (computer science)|Integer]]s ===
{| class="wikitable"
! rowspan=2| 
! colspan=2| 8 bit ([[byte]])
! colspan=2| 16 bit ([[short integer]])
! colspan=2| 32 bit
! colspan=2| 64 bit ([[long integer]])
! colspan=2| Word size
! rowspan=2| Arbitrarily precise ([[Arbitrary-precision arithmetic|bignum]])
|-
! Signed
! Unsigned
! Signed
! Unsigned
! Signed
! Unsigned
! Signed
! Unsigned
! Signed
! Unsigned
|-
| [[Ada (programming language)|Ada]]<ref name=Ada_RM_2012>Ada Reference Manual - Language and Standard Libraries; ISO/IEC 8652:201x (E), http://www.ada-auth.org/standards/12rm/RM-Final.pdf</ref>
| <tt>range -2**7 .. 2**7 - 1</tt>{{ref|Ada_range|[j]}}
| <tt>range 0 .. 2**8 - 1</tt>{{ref|Ada_range|[j]}} or <tt>mod 2**8</tt>{{ref|Ada_mod|[k]}}
| <tt>range -2**15 .. 2**15 - 1</tt>{{ref|Ada_range|[j]}}
| <tt>range 0 .. 2**16 - 1</tt>{{ref|Ada_range|[j]}} or <tt>mod 2**16</tt>{{ref|Ada_mod|[k]}}
| <tt>range -2**31 .. 2**31 - 1</tt>{{ref|Ada_range|[j]}}
| <tt>range 0 .. 2**32 - 1</tt>{{ref|Ada_range|[j]}} or <tt>mod 2**32</tt>{{ref|Ada_mod|[k]}}
| <tt>range -2**63 .. 2**63 - 1</tt>{{ref|Ada_range|[j]}}
| <tt>mod 2**64</tt>{{ref|Ada_mod|[k]}}
| <tt>Integer</tt>{{ref|Ada_range|[j]}}
| <tt>range 0 .. 2**Integer'<wbr/>Size - 1</tt>{{ref|Ada_range|[j]}} or <tt>mod Integer'<wbr/>Size</tt>{{ref|Ada_mod|[k]}}
| {{n/a}}
|-
| rowspan=2| [[ALGOL 68]] (variable-width)
| rowspan=2| <tt>short short int</tt>{{ref|CInt|[c]}}
| rowspan=2 {{n/a}}
| rowspan=2| <tt>short int</tt>{{ref|CInt|[c]}}
| rowspan=2 {{n/a}}
| rowspan=2| <tt>int</tt>{{ref|CInt|[c]}}
| rowspan=2 {{n/a}}
| rowspan=2| <tt>long int</tt>{{ref|CInt|[c]}}
| rowspan=2 {{n/a}}
| <tt>int</tt>{{ref|CInt|[c]}}
| {{n/a}}
| rowspan=2| <tt>long long int</tt> {{ref|a68|[a]}}{{ref|a68g|[g]}}
|-
| colspan=2 align=center|<tt>bytes</tt> & <tt>bits</tt>
|-
| [[C (programming language)|C]] ([[C99]] fixed-width)
| rowspan=2| <tt>int8_t</tt>
| rowspan=2| <tt>uint8_t</tt>
| rowspan=2| <tt>int16_t</tt>
| rowspan=2| <tt>uint16_t</tt>
| rowspan=2| <tt>int32_t</tt>
| rowspan=2| <tt>uint32_t</tt>
| rowspan=2| <tt>int64_t</tt>
| rowspan=2| <tt>uint64_t</tt>
| rowspan=4| <tt>int</tt>
| rowspan=4| <tt>unsigned int</tt>
| rowspan=5 {{n/a}}
|-
| [[C++]] ([[C++11]] fixed-width)
|-
| [[C (programming language)|C]] ([[C99]] variable-width)
| rowspan=2| <tt>signed char</tt>
| rowspan=2| <tt>unsigned char</tt>
| rowspan=2| <tt>short</tt>{{ref|CInt|[c]}}
| rowspan=2| <tt>unsigned short</tt>{{ref|CInt|[c]}}
| rowspan=2| <tt>long</tt>{{ref|CInt|[c]}}
| rowspan=2| <tt>unsigned long</tt>{{ref|CInt|[c]}}
| rowspan=2| <tt>long long</tt>{{ref|CInt|[c]}}
| rowspan=2| <tt>unsigned long long</tt>{{ref|CInt|[c]}}
|-
| [[C++]] ([[C++11]] variable-width)
|-
| [[Objective-C]] ([[Cocoa (API)|Cocoa]])
| <tt>signed char''' <br>or<br> '''int8_t</tt>
| <tt>unsigned char''' <br>or<br> '''uint8_t</tt>
| <tt>short''' <br>or<br> '''int16_t</tt>
| <tt>unsigned short''' <br>or<br> '''uint16_t</tt>
| <tt>int''' <br>or<br> '''int32_t</tt>
| <tt>unsigned int''' <br>or<br> '''uint32_t</tt>
| <tt>long long''' <br>or<br> '''int64_t</tt>
| <tt>unsigned long long''' <br>or<br> '''uint64_t</tt>
| <tt>NSInteger''' <br>or<br> '''long</tt>
| <tt>NSUInteger''' <br>or<br> '''unsigned long</tt>
|-
| [[C Sharp (programming language)|C#]]
| <tt>sbyte</tt>
| <tt>byte</tt>
| rowspan=2| <tt>short</tt>
| <tt>ushort</tt>
| rowspan=2| <tt>int</tt>
| <tt>uint</tt>
| rowspan=2| <tt>long</tt>
| <tt>ulong</tt>
| <tt>IntPtr</tt>
| <tt>UIntPtr</tt>
| <tt>System.Numerics<wbr/>.BigInteger</tt><br/>(.NET 4.0)
|-
| [[Java (programming language)|Java]]
| <tt>byte</tt>
| {{n/a}}
| <tt>char</tt>{{ref|Java char|[b]}}
| {{n/a}}
| {{n/a}}
| {{n/a}}
| {{n/a}}
| <tt>java.math<wbr/>.BigInteger</tt>
|-
| [[Go (programming language)|Go]]
| <tt>int8</tt>
| <tt>uint8</tt> or <tt>byte</tt>
| <tt>int16</tt>
| <tt>uint16</tt>
| <tt>int32</tt>
| <tt>uint32</tt>
| <tt>int64</tt>
| <tt>uint64</tt>
| <tt>int</tt>
| <tt>uint</tt>
| <tt>big.Int</tt>
|-
| [[Swift (Apple programming language)|Swift]]
| <tt>Int8</tt>
| <tt>UInt8</tt>
| <tt>Int16</tt>
| <tt>UInt16</tt>
| <tt>Int32</tt>
| <tt>UInt32</tt>
| <tt>Int64</tt>
| <tt>UInt64</tt>
| <tt>Int</tt>
| <tt>UInt</tt>
| 
|-
| [[D (programming language)|D]]
| <tt>byte</tt>
| <tt>ubyte</tt>
| <tt>short</tt>
| <tt>ushort</tt>
| <tt>int</tt>
| <tt>uint</tt>
| <tt>long</tt>
| <tt>ulong</tt>
|{{n/a}}
|{{n/a}}
| <tt>BigInt</tt>
|-
| [[Common Lisp]]<ref name=HyperSpec>http://www.lispworks.com/documentation/HyperSpec/Front/index.htm</ref>
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
| <tt>bignum</tt>
|-
| [[Scheme (programming language)|Scheme]]
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
|-
| [[ISLISP]]<ref name=Specification>http://www.islisp.info/specification.html</ref>
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
| <tt>bignum</tt>
|-
| [[Pascal (programming language)|Pascal]] ([[Free Pascal|FPC]])
| <tt>shortint</tt>
| <tt>byte</tt>
| <tt>smallint</tt>
| <tt>word</tt>
| <tt>longint</tt>
| <tt>longword</tt>
| <tt>int64</tt>
| <tt>qword</tt>
| <tt>integer</tt>
| <tt>cardinal</tt>
| {{n/a}}
|-
| [[Visual Basic]]
| {{n/a}}
| rowspan=2|<tt>Byte</tt>
| <tt>Integer</tt>
| {{n/a}}
| <tt>Long</tt>
| {{n/a}}
| colspan=2 {{n/a}}
| rowspan=2 colspan=2 {{n/a}}
| rowspan=1 {{n/a}}
|-
| [[Visual Basic .NET]]
| <tt>SByte</tt>
| <tt>Short</tt>
| <tt>UShort</tt>
| <tt>Integer</tt>
| <tt>UInteger</tt>
| <tt>Long</tt>
| <tt>ULong</tt>
| <tt>System.Numerics<wbr/>.BigInteger</tt><br/>(.NET 4.0)
|-
| [[FreeBasic]]
| <tt>Byte</tt> or <tt>Integer<8></tt>
| <tt>UByte</tt> or <tt>UInteger<8></tt>
| <tt>Short</tt> or <tt>Integer<16></tt>
| <tt>UShort</tt> or <tt>UInteger<16></tt>
| <tt>Long</tt> or <tt>Integer<32></tt>
| <tt>ULong</tt> or <tt>UInteger<32></tt>
| <tt>LongInt</tt> or <tt>Integer<64></tt>
| <tt>ULongInt</tt> or <tt>UInteger<64></tt>
| <tt>Integer</tt>
| <tt>UInteger</tt>
| {{n/a}}
|-
| [[Python (programming language)|Python]] 2.x
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| <tt>int</tt>
| {{n/a}}
| <tt>long</tt>
|-
| Python 3.x
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| <tt>int</tt>
|-
| [[S-Lang (programming language)|S-Lang]]
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| {{n/a}}
|-
| [[Fortran]]
| <tt>INTEGER<wbr/>(KIND = n)</tt>{{ref|Kinds|[f]}}
| {{n/a}}
| <tt>INTEGER<wbr/>(KIND = n)</tt>{{ref|Kinds|[f]}}
| {{n/a}}
| <tt>INTEGER<wbr/>(KIND = n)</tt>{{ref|Kinds|[f]}}
| {{n/a}}
| <tt>INTEGER<wbr/>(KIND = n)</tt>{{ref|Kinds|[f]}}
| {{n/a}}
|
|
|
|-
| [[PHP]]
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| <tt>int</tt> {{ref|PHP 32/64 bit long|[m]}}
| {{n/a}}
| <tt>int</tt> {{ref|PHP 32/64 bit long|[m]}}
| {{n/a}}
| colspan=2 {{n/a}}
| {{ref|PHP bignum|[e]}}
|-
| [[Perl]] 5
| colspan=2 {{n/a}}{{ref|scalars|[d]}}
| colspan=2 {{n/a}}{{ref|scalars|[d]}}
| colspan=2 {{n/a}}{{ref|scalars|[d]}}
| colspan=2 {{n/a}}{{ref|scalars|[d]}}
| colspan=2 {{n/a}}{{ref|scalars|[d]}}
| <tt>Math::BigInt</tt>
|-
| [[Perl 6]]
| <tt>int8</tt>
| <tt>uint8</tt>
| <tt>int16</tt>
| <tt>uint16</tt>
| <tt>int32</tt>
| <tt>uint32</tt>
| <tt>int64</tt>
| <tt>uint64</tt>
| <tt>Int</tt>
| colspan=2 {{n/a}}
|-
| [[Ruby (programming language)|Ruby]]
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| <tt>Fixnum</tt>
| {{n/a}}
| <tt>Bignum</tt>
|-
| [[Erlang (programming language)|Erlang]]{{ref|Erlang_int|[n]}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| integer() 
| {{n/a}}
| integer(){{ref|Erlang_arb|[o]}}
|-
| [[Scala (programming language)|Scala]]
| <tt>Byte</tt>
| {{n/a}}
| <tt>Short</tt>
| <tt>Char</tt>{{ref|Scala Char|[l]}}
| <tt>Int</tt>
| {{n/a}}
| <tt>Long</tt>
| {{n/a}}
| {{n/a}}
| {{n/a}}
| <tt>scala.math.BigInt</tt>
|-
| [[Seed7]]
| {{n/a}}
| {{n/a}}
| {{n/a}}
| {{n/a}}
| {{n/a}}
| {{n/a}}
| <tt>integer</tt>
| {{n/a}}
| {{n/a}}
| {{n/a}}
| <tt>bigInteger</tt>
|-
| [[Smalltalk]]
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| <tt>SmallInteger</tt>{{ref|Smalltalk|[i]}}
| {{n/a}}
| <tt>LargeInteger</tt>{{ref|Smalltalk|[i]}}
|-
| [[Windows PowerShell]]
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| {{n/a}}
|-
| [[OCaml]]
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| <tt>int32</tt>
| {{n/a}}
| rowspan=2| <tt>int64</tt>
| {{n/a}}
| <tt>int''' <br/> or <br/> '''nativeint</tt>
|
| <tt>open Big_int;; <br/> big_int</tt>
|-
| [[F Sharp (programming language)|F#]]
| <tt>sbyte</tt>
| <tt>byte</tt>
| <tt>int16</tt>
| <tt>uint16</tt>
| <tt>int32</tt> or <tt>int</tt>
| <tt>uint32</tt>
| <tt>uint64</tt>
| <tt>nativeint</tt>
| <tt>unativeint</tt>
| <tt>bigint</tt>
|-
| [[Standard ML]]
| {{n/a}}
| <tt>Word8.word</tt>
| colspan=2 {{n/a}}
| <tt>Int32.int</tt>
| <tt>Word32.word</tt>
| <tt>Int64.int</tt>
| <tt>Word64.word</tt>
| <tt>int</tt>
| <tt>word</tt>
| <tt>LargeInt.int</tt> or <br/> <tt>IntInf.int</tt>
|-
| [[Haskell (programming language)|Haskell]] ([[Glasgow Haskell Compiler|GHC]])
| «<tt>import Int</tt>» <br/> <tt>Int8</tt>
| «<tt>import Word</tt>» <br/> <tt>Word8</tt>
| «<tt>import Int</tt>» <br/> <tt>Int16</tt>
| «<tt>import Word</tt>» <br/> <tt>Word16</tt>
| «<tt>import Int</tt>» <br/> <tt>Int32</tt>
| «<tt>import Word</tt>» <br/> <tt>Word32</tt>
| «<tt>import Int</tt>» <br/> <tt>Int64</tt>
| «<tt>import Word</tt>» <br/> <tt>Word64</tt>
| <tt>Int</tt>
| «<tt>import Word</tt>» <br/> <tt>Word</tt>
| <tt>Integer</tt>
|-
| [[Eiffel (programming language)|Eiffel]]
| <tt>INTEGER_8</tt>
| <tt>NATURAL_8</tt>
| <tt>INTEGER_16</tt>
| <tt>NATURAL_16</tt>
| <tt>INTEGER_32</tt>
| <tt>NATURAL_32</tt>
| <tt>INTEGER_64</tt>
| <tt>NATURAL_64</tt>
| <tt>INTEGER</tt>
| <tt>NATURAL</tt>
| {{n/a}}
|-
| [[COBOL]]{{ref|Cobol|[h]}}
| <tt>BINARY-CHAR «SIGNED»</tt>
| <tt>BINARY-CHAR UNSIGNED</tt>
| <tt>BINARY-SHORT «SIGNED»</tt>
| <tt>BINARY-SHORT UNSIGNED</tt>
| <tt>BINARY-LONG «SIGNED»</tt>
| <tt>BINARY-LONG UNSIGNED</tt>
| <tt>BINARY-DOUBLE «SIGNED»</tt>
| <tt>BINARY-DOUBLE UNSIGNED</tt>
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| [[Mathematica]]
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| colspan=2 {{n/a}}
| <tt>Integer</tt>
|}
{{note|a68|a}} The <u>standard</u> constants <tt>int shorts</tt> and <tt>int lengths</tt> can be used to determine how many '<tt>short</tt>'s and '<tt>long</tt>'s can be usefully prefixed to '<tt>short int</tt>' and '<tt>long int</tt>'.  The actually size of the '<tt>short int</tt>', '<tt>int</tt>' and '<tt>long int</tt>' is available as constants <tt>short max int</tt>, <tt>max int</tt> and <tt>long max int</tt> etc.
<br/>{{note|Java char|b}} Commonly used for characters.
<br/>{{note|CInt|c}} The ALGOL 68, C and C++ languages do not specify the exact width of the integer types <tt>short</tt>, <tt>int</tt>, <tt>long</tt>, and (C99, C++11) <tt>long long</tt>, so they are implementation-dependent. In C and C++ <tt>short</tt>, <tt>long</tt>, and <tt>long long</tt> types are required to be at least 16, 32, and 64 bits wide, respectively, but can be more. The <tt>int</tt> type is required to be at least as wide as <tt>short</tt> and at most as wide as <tt>long</tt>, and is typically the width of the word size on the processor of the machine (i.e. on a 32-bit machine it is often 32 bits wide; on 64-bit machines it is often 64 bits wide). C99 and C++11{{citation needed|date=December 2011}} also define the <tt>[u]intN_t</tt> exact-width types in the [[stdint.h]] header. See[[C syntax#Integral types]] for more information.
<br/>{{note|scalars|d}} Perl 5 does not have distinct types. Integers, floating point numbers, strings, etc. are all considered "scalars".
<br/>{{note|PHP bignum|e}} PHP has two arbitrary-precision libraries. The BCMath library just uses strings as datatype. The GMP library uses an internal "resource" type.
<br/>{{note|Kinds|f}} The value of "n" is provided by the <tt>SELECTED_INT_KIND</tt><ref name="fortranwiki.org">http://fortranwiki.org/fortran/show/selected_int_kind</ref> intrinsic function.
<br/>{{note|a68g|g}} [[ALGOL 68G]]'s run time option ''<tt>--precision "number"</tt>'' can set precision for <tt>long long int</tt>s to the required "number" significant digits.  The <u>standard</u> constants ''<tt>long long int width</tt>'' and ''<tt>long long max int</tt>'' can be used to determine actual precision.
<br/>{{note|Cobol|h}} [[COBOL]] allows the specification of a required precision and will automatically select an available type capable of representing the specified precision. "<tt>PIC S9999</tt>", for example, would required a signed variable of four decimal digits precision.  If specified as a binary field, this would select a 16 bit signed type on most platforms.
<br/>{{note|Smalltalk|i}} [[Smalltalk]] automatically chooses an appropriate representation for integral numbers. Typically, two representations are present, one for integers fitting the native word size minus any tag bit (SmallInteger) and one supporting arbitrary sized integers (LargeInteger). Arithmetic operations support polymorphic arguments and return the result in the most appropriate compact representation.
<br/>{{note|Ada_range|j}} [[Ada (programming language)|Ada]] range types are checked for boundary violations at run-time (as well as at compile-time for static expressions). Run time boundary violations raise a "constraint error" exception. Ranges are not restricted to powers of two. Commonly predefined Integer subtypes are: Positive (<tt>range 1 .. Integer'Last</tt>) and Natural (<tt>range 0 .. Integer'Last</tt>). <tt>Short_Short_Integer</tt> (8 bit), <tt>Short_Integer</tt> (16 bit) and <tt>Long_Integer</tt> (64 bit) are also commonly predefined, but not required by the Ada standard. Run time checks can be disabled if performance is more important than integrity checks.
<br/>{{note|Ada_mod|k}} [[Ada (programming language)|Ada]] modulo types implement modulo arithmetic in all operations, i.e. no range violations are possible. Modulos are not restricted to powers of two.
<br/>{{note|Scala char|l}} Commonly used for characters like Java's char.
<br/>{{note|PHP 32/64 bit long|m}} <tt>int</tt> in PHP has the same width as <tt>long</tt> type in C has on that system {{ref|CInt|[c]}}.
<br/>{{note|Erlang_int|n}} [[Erlang (programming language)|Erlang]] is dynamically typed. The type identifiers are usually used to specify types of record fields and the argument and return types of functions.<ref>http://www.erlang.org/doc/reference_manual/typespec.html</ref>
<br/>{{note|Erlang_arb|o}} When it exceeds 1 word.<ref>http://www.erlang.org/doc/efficiency_guide/advanced.html</ref>

=== [[Floating point]] ===
{| class="wikitable"
!
! [[Single precision]]
! [[Double precision]]
! Other precision
! Processor dependent
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>Float</tt>
| <tt>Long_Float</tt>
| {{n/a}}
|-
| ALGOL 68
| <tt>real</tt>{{ref|a68|[a]}}
| <tt>long real</tt>{{ref|a68|[a]}}
| <tt>short real</tt>, <tt>long long real</tt>, etc.{{ref|a68g|[d]}}
|-
| C
| rowspan=3| <tt>float</tt>{{ref|lax floats|[b]}}
| rowspan=5| <tt>double</tt>
| rowspan=3| <tt>long double</tt>{{ref|C-long-double|[f]}}
|-
| C++ (STL)
|-
| Objective-C (Cocoa)
| <tt>CGFloat</tt>
|-
| C#
| rowspan=2| <tt>float</tt>
| rowspan=4 {{n/a}}
|-
| Java
|-
| Go
| <tt>float32</tt>
| <tt>float64</tt>
|-
| Swift
| <tt>Float</tt>
| <tt>Double</tt>
| <tt>CGFloat</tt>
|-
| D
| <tt>float</tt>
| <tt>double</tt>
|
| <tt>real</tt>
|-
| Common Lisp
|
|
| 
|-
| Scheme
|
|
|
|-
| ISLISP
|
|
| 
|-
| Pascal (Free Pascal)
| <tt>single</tt>
| <tt>double</tt>
|
| <tt>real</tt>
|-
| Visual Basic
| rowspan=3| <tt>Single</tt>
| rowspan=3| <tt>Double</tt>
| rowspan=3 {{n/a}}
|-
| Visual Basic .NET
|-
| Xojo
|-
| Python
| rowspan=2 {{n/a}}
| <tt>float</tt>
| 
|-
| JavaScript
| <tt>Number</tt><ref name="Javascript numbers">[http://www.mozilla.org/js/language/E262-3.pdf  8.5 The Number Type]</ref>
| {{n/a}}
|-
| S-Lang
| <!-- '''x =''' value'''f;''' -->
| <!-- '''x =''' value''';''' -->
| 
|-
| Fortran
| colspan=2|<tt>REAL(KIND = n)</tt>{{ref|real inds|[c]}}
| 
|-
| PHP
| 
| <tt>float</tt>
| 
|-
| Perl
| 
| 
| 
|-
| Perl 6
| <tt>num32</tt>
| <tt>num64</tt>
|
| <tt>Num</tt>
|-
| Ruby
| {{n/a}}
| <tt>Float</tt>
| rowspan=4 {{n/a}}
|-
| Scala
| <tt>Float</tt>
| <tt>Double</tt>
|-
| Seed7
| {{n/a}}
| <tt>float</tt>
|-
| Smalltalk
| <tt>Float</tt>
| <tt>Double</tt>
|-
| Windows PowerShell
| 
| 
|-
| OCaml
| {{n/a}}
| rowspan=2| <tt>float</tt>
| rowspan=3 {{n/a}}
|-
| F#
| <tt>float32</tt>
|-
| Standard ML
| {{n/a}}
|
| <tt>real</tt>
|-
| Haskell (GHC)
| <tt>Float</tt>
| <tt>Double</tt>
| 
|-
| Eiffel
| <tt>REAL_32</tt>
| <tt>REAL_64</tt>
| 
|-
| COBOL
| <tt>FLOAT-BINARY-7</tt>{{ref|Cobol_ieee|[e]}}
| <tt>FLOAT-BINARY-34</tt>{{ref|Cobol_ieee|[e]}}
| <tt>FLOAT-SHORT<tt>, <tt>FLOAT-LONG</tt>, <tt>FLOAT-EXTENDED</tt>
|-
| Mathematica
| {{n/a}}
| {{n/a}}
|
| <tt>Real</tt>
|}
{{note|a68_real|a}} The <u>standard</u> constants <tt>real shorts</tt> and <tt>real lengths</tt> can be used to determine how many '<tt>short</tt>'s and '<tt>long</tt>'s can be usefully prefixed to '<tt>short real</tt>' and '<tt>long real</tt>'.  The actually size of the '<tt>short real</tt>', '<tt>real</tt>' and '<tt>long real</tt>' is available as constants <tt>short max real</tt>, <tt>max real</tt> and <tt>long max real</tt> etc.  With the constants <tt>short small real</tt>, <tt>small real</tt> and <tt>long small real</tt> available for each type's [[machine epsilon]].
<br/>{{note|lax floats|b}} declarations of single precision often are not honored
<br/>{{note|real kinds|c}} The value of "n" is provided by the <tt>SELECTED_REAL_KIND</tt><ref name="ReferenceA">http://fortranwiki.org/fortran/show/selected_real_kind</ref> intrinsic function.
<br/>{{note|a68g-real|d}} [[ALGOL 68G]]'s run time option ''<tt>--precision "number"</tt>'' can set precision for <tt>long long real</tt>s to the required "number" significant digits.  The <u>standard</u> constants <tt>long long real width</tt> and '<tt>long long max real</tt> can be used to determine actual precision.
<br/>{{note|Cobol-ieee|e}} These IEEE floating-point types will be introduced in the next COBOL standard.
<br/>{{note|C-long-double|f}} Same size as '<tt>double</tt>' on many implementations.

=== [[Complex number]]s ===

{|class="wikitable"
! 
! Integer
! Single precision
! Double precision
! Half and Quadruple precision etc.
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| {{n/a}}
| <tt>Complex</tt>{{ref|generic type|[b]}}
| <tt>Complex</tt>{{ref|generic type|[b]}}
| <tt>Complex</tt>{{ref|generic type|[b]}}
|-
| ALGOL 68
| {{n/a}}
| <tt>compl</tt>
| <tt>long compl</tt> etc.
| <tt>short compl</tt> etc. & <tt>long long compl</tt> etc.
|-
| C (C99) <ref>https://www.gnu.org/software/libc/manual/html_node/Complex-Numbers.html#Complex-Numbers</ref>
| {{n/a}}
| <tt>float complex</tt>
| <tt>double complex</tt>
| rowspan=12 {{n/a}}
|-
| C++ (STL)
| {{n/a}}<!-- No std::complex<int>. See C++ standard section 26.2 paragraph 2 -->
| <tt>std::complex<float></tt>
| <tt>std::complex<double></tt>
|-
| C#
| {{n/a}}
| {{n/a}}
| <tt>System.Numerics.Complex</tt> <br />(.Net 4.0)
|-
| Java
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| Go
| {{n/a}}
| <tt>complex64</tt>
| <tt>complex128</tt>
|-
| D
| {{n/a}}
| <tt>cfloat</tt>
| <tt>cdouble</tt>
|-
| Objective-C
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| Common Lisp
|
|
|
|-
| Scheme
|
|
|
|-
| Pascal
| {{n/a}}
| {{n/a}}
|
|-
| Visual Basic
| {{n/a}}
| {{n/a}}
|
|-
| Visual Basic .NET
| {{n/a}}
| {{n/a}}
| <tt>System.Numerics.Complex</tt> <br />(.Net 4.0)
|-
| Perl
| 
| 
| <tt>Math::Complex</tt>
| 
|-
| Perl 6
| 
| <tt>complex64</tt>
| <tt>complex128</tt>
| <tt>Complex</tt>
|-
| Python
| 
|
| <tt>complex</tt>
| rowspan=15 {{n/a}}
|-
| JavaScript
| {{n/a}}
| {{n/a}}
|
|-
| S-Lang
| {{n/a}}
| {{n/a}}
|
|-
| Fortran
| 
| colspan=2|<tt>COMPLEX(KIND = n)</tt>{{ref|complex kinds|[a]}}
|-
| Ruby
| <tt>Complex</tt>
| {{n/a}}
| <tt>Complex</tt>
|-
| Scala
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| Seed7
| {{n/a}}
| {{n/a}}
| <tt>complex</tt>
|-
| Smalltalk
| <tt>Complex</tt>
| <tt>Complex</tt>
| <tt>Complex</tt>
|-
| Windows PowerShell
| {{n/a}}
| {{n/a}}
|
|-
| OCaml
| {{n/a}}
| {{n/a}}
| <tt>Complex.t</tt>
|-
| F#
| 
| 
| <tt>System.Numerics.Complex</tt> <br />(.Net 4.0)
|-
| Standard ML
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| Haskell (GHC)
| {{n/a}}
| <tt>Complex{{Not a typo|.}}Complex Float</tt>
| <tt>Complex{{Not a typo|.}}Complex Double</tt>
|-
| Eiffel
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| COBOL
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| Mathematica
| <tt>Complex</tt>
| {{n/a}}
| {{n/a}}
| <tt>Complex</tt>
|}

{{note|complex kinds|a}} The value of "n" is provided by the <tt>SELECTED_REAL_KIND</tt><ref name="ReferenceA"/> intrinsic function.

{{note|generic type|b}} Generic type which can be instantiated with any base floating point type.

=== Other variable types ===

{|class="wikitable"
! rowspan=2|
! colspan=2| Text
! rowspan=2| [[Boolean datatype|Boolean]]
! rowspan=2| [[Enumerated type|Enumeration]]
! rowspan=2| [[Object (computer science)|Object]]/[[Top type|Universal]]
|-
! [[Character (computing)|Character]]
! [[String (computer science)|String]]{{ref|string|[a]}}
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>Character</tt>
| <tt>String''' & '''Bounded_String''' & '''Unbounded_String</tt>
| <tt>Boolean</tt>
| <tt>('''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ...''')</tt>
| <tt>tagged null record</tt>
|-
| ALGOL 68
| <tt>char</tt>
| <tt>string''' & '''bytes</tt>
| <tt>bool''' & '''bits</tt>
| {{n/a}} - [http://rosettacode.org/wiki/Enumerations#ALGOL_68 User defined]
| {{n/a}}
|-
| C (C99)
| rowspan=2| <tt>char'''<br/>'''wchar_t</tt>
| {{n/a}}
| rowspan=2| <tt>bool</tt>{{ref|int bool|[b]}}
| rowspan=3|<tt>'''enum''' «name» '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''};</tt>
| rowspan=2| <tt>[[void type|void]] [[pointer (computer programming)|*]]</tt>
|-
| C++ (STL)
| <code>[[std::string|</code>«<tt>std::'''»'''<code>string]]</code></tt>
|-
| Objective-C
| <tt>unichar</tt>
| <tt>NSString *</tt>
| <tt>BOOL</tt>
| <tt>id</tt>
|-
| C#
| rowspan=2| <tt>char</tt>
| <tt>string</tt>
| <tt>bool</tt>
| rowspan=2| <tt>'''enum''' name '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''}'''</tt>
| <tt>object</tt>
|-
| Java
| <tt>String</tt>
| <tt>boolean</tt>
| <tt>Object</tt>
|-
| Go
| <tt>byte'''<br/>'''rune</tt>
| <tt>string</tt>
| <tt>bool</tt>
| <tt>const (<dl><dd>'''item<sub>1</sub>''' = iota'''<br/>item<sub>2</sub><br/> ... '''</dd></dl>)</tt>
| <tt>interface{}</tt>
|-
| Swift
| <tt>Character</tt>
| <tt>String</tt>
| <tt>Bool</tt>
| <tt>'''enum''' name '''{ case''' item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''}'''</tt>
| <tt>Any</tt>
|-
| D
| <tt>char</tt>
| <tt>string</tt>
| <tt>bool</tt>
| <tt>enum''' name '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''}</tt>
| <tt>std.variant.Variant</tt>
|-
| Common Lisp
|
|
|
|
|
|-
| Scheme
| 
|
| 
|
|
|-
| ISLISP
| 
|
| 
|
|
|-
| Pascal (ISO)
| rowspan=2| <tt>char</tt>
| {{n/a}}
| rowspan=2| <tt>boolean</tt>
| rowspan=2| <tt>('''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ...''')</tt>
| {{n/a}}
|-
| Object Pascal (Delphi)
| <tt>string</tt>
| <tt>variant</tt>
|-
| Visual Basic
| {{n/a}}
| rowspan=3| <tt>String</tt>
| rowspan=3| <tt>Boolean</tt>
| rowspan=3| <tt>Enum''' name <dl><dd> item<sub>1</sub> <br /> item<sub>2</sub> <br /> ... </dd></dl> '''End Enum</tt>
| <tt>[[Variant type|Variant]]</tt>
|-
| Visual Basic .NET
| <tt>Char</tt>
| <tt>Object</tt>
|-
| Xojo
| {{n/a}}
| <tt>Object or Variant</tt>
|-
| Python
| {{n/a}}{{ref|string as char|[d]}}
| <tt>str</tt>
| <tt>bool</tt>
|
| <tt>object</tt>
|-
| JavaScript
| {{n/a}}{{ref|string as char|[d]}}
| <tt>String</tt>
| <tt>Boolean</tt>
|
| <tt>Object</tt>
|-
| S-Lang
| 
|
| 
|
| 
|-
| Fortran
| <tt>CHARACTER(LEN = *)</tt>
| <tt>CHARACTER(LEN = :), allocatable </tt>
| <tt>LOGICAL(KIND = n)</tt>{{ref|logical kinds|[f]}}
|
| <tt>CLASS(*)</tt>
|-
| PHP
| {{n/a}}{{ref|string as char|[d]}}
| <tt>string</tt>
| <tt>bool</tt>
|
| <tt>object</tt>
|-
| Perl
| {{n/a}}{{ref|string as char|[d]}}
| 
|
|
|  
|-
| Perl 6
| <tt>Char</tt>
| <tt>Str</tt>
| <tt>Bool</tt>
| <tt>enum''' name '''<'''item<sub>1</sub> item<sub>2</sub> ...'''>''' or<br /> '''enum''' name '''<<:'''item<sub>1</sub>'''('''value''')''' ''':'''item<sub>2</sub>'''('''value''')''' ...'''>></tt>
| <tt>Mu</tt>
|-
| Ruby
| {{n/a}}{{ref|string as char|[d]}}
| <tt>String</tt>
| <tt>Object</tt>{{ref|Ruby's bool|[c]}}
|
| <tt>Object</tt>
|-
| Scala
| <tt>Char</tt>
| <tt>String</tt>
| <tt>Boolean</tt>
| <tt>object''' name '''extends Enumeration {'''<dl><dd>'''val''' item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''= Value'''</dd></dl>'''}</tt>
| <tt>Any</tt>
|-
| Seed7
| <tt>char</tt>
| <tt>string</tt>
| <tt>boolean</tt>
| <tt>'''const type''': name '''is new enum'''<dl><dd> item<sub>1</sub>''','''<br />  item<sub>2</sub>''','''<br />  ... </dd></dl>'''end enum;'''</tt>
|
|-
| Windows PowerShell
| 
| 
|
|
|
|-
| OCaml
| rowspan=3| <tt>char</tt>
| rowspan=3| <tt>string</tt>
| rowspan=3| <tt>bool</tt>
| {{n/a}}{{ref|enum|[e]}}
| {{n/a}}
|-
| F#
| <tt>type''' name '''=''' item<sub>1</sub> '''=''' value '''<nowiki>|</nowiki>''' item<sub>2</sub> = value '''<nowiki>|</nowiki></tt> ...
| <tt>obj</tt>
|-
| Standard ML
| {{n/a}}{{ref|enum|[e]}}
| {{n/a}}
|-
| Haskell (GHC)
| <tt>Char</tt>
| <tt>String</tt>
| <tt>Bool</tt>
| {{n/a}}{{ref|enum|[e]}}
| {{n/a}}
|-
| Eiffel
| <tt>CHARACTER</tt>
| <tt>STRING</tt>
| <tt>BOOLEAN</tt>
| {{n/a}}
| <tt>ANY</tt>
|-
| COBOL
| <tt>PIC X</tt>
| <tt>PIC X('''string length''') '''or''' PIC&nbsp;X«X...»</tt>
| <tt>PIC 1«('''number of digits''')» '''or''' PIC&nbsp;1«1...»</tt>
| {{n/a}}
| <tt>OBJECT REFERENCE</tt>
|-
| Mathematica
| {{n/a}}{{ref|string as char|[d]}}
| <tt>String</tt>
| 
| 
| {{n/a}}
|}
{{note|string|a}} specifically, strings of arbitrary length and automatically managed.
<br/>{{note|int bool|b}} This language represents a boolean as an integer where false is represented as a value of zero and true by a non-zero value.
<br/>{{note|Ruby's bool|c}} All values evaluate to either true or false. Everything in '''<tt>TrueClass</tt>''' evaluates to true and everything in '''<tt>FalseClass</tt>''' evaluates to false.
<br/>{{note|string as char|d}}This language does not have a separate character type. Characters are represented as strings of length 1.
<br/>{{note|enum|e}} Enumerations in this language are algebraic types with only nullary constructors
<br/>{{note|logical kinds|f}} The value of "n" is provided by the <tt>SELECTED_INT_KIND</tt><ref name="fortranwiki.org"/> intrinsic function.

== Derived types ==

=== [[Array data type|Array]] ===

{{further|Comparison of programming languages (array)}}
{| class="wikitable"
|- valign="top"
! rowspan=2|
! colspan=2| fixed size array
! colspan=2| dynamic size array
|- valign="top"
! one-dimensional array
! [[Array data structure|multi-dimensional array]]
! one-dimensional array
! [[Array data structure|multi-dimensional array]]
|- valign="top"
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>'''array ('''<first>''' .. '''<last>''') of '''<type></tt><br>or<br>'''array ('''<discrete_type>''') of '''<type></tt>
| <tt>'''array ('''<first<sub>1</sub>>''' .. '''<last<sub>1</sub>>''', '''<first<sub>2</sub>>''' .. '''<last<sub>2</sub>>''',''' ...''') of '''<type><br>or<br>'''array ('''<discrete_type<sub>1</sub>>''', '''<discrete_type<sub>2</sub>>''', '''...''') of '''<type></tt>
| <tt>'''array ('''<discrete_type>''' range <>) of '''<type></tt>
| <tt>'''array ('''<discrete_type<sub>1</sub>>''' range <>, '''<discrete_type<sub>2</sub>>''' range <>,''' ...''') of '''<type></tt>
|- valign="top"
| ALGOL 68
| <tt>[''first'':''last'']'''<wbr/>«modename»'''</tt><br/>or simply:<br/><tt>[''size'']'''<wbr/>«modename»'''</tt>
| <tt>[''first<sub>1</sub>'':''last<sub>1</sub>'', ''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»'''</tt><br/>or<br><tt>[''first<sub>1</sub>'':''last<sub>1</sub>''][''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»'''</tt><br/>etc.
| <tt>'''flex'''[''first'':''last'']'''<wbr/>«modename»'''</tt><br/>or simply:<br/><tt>'''flex'''[''size'']'''<wbr/>«modename»'''</tt>
| <tt>'''flex'''[''first<sub>1</sub>'':''last<sub>1</sub>'', ''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»'''</tt><br/>or<br/><tt>'''flex'''[''first<sub>1</sub>'':''last<sub>1</sub>'']<wbr/>'''flex'''[''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»''' etc.</tt>
|- valign="top"
| C (C99)
| <tt>type name'''['''size''']'''{{ref|C's array|[a]}}</tt>
| <tt>type name'''['''size<sub>1</sub>''']['''size<sub>2</sub>''']'''{{ref|C's array|[a]}}</tt>
| <tt>type '''*'''name</tt><br/>or within a block:<br/><tt>int n = ...; type name'''['''n''']'''</tt>
|
|- valign="top"
| C++ (STL)
| colspan=1| <tt>'''[[std::array|«std::»array]]<'''type, size'''>'''</tt>(C++11)
|
| colspan=2| <tt>'''[[std::vector|«std::»vector]]<'''type'''>'''</tt>
|- valign="top"
| C#
| <tt>type'''[]'''</tt>
| <tt>type'''[{{Not a typo|,,}}'''...''']'''</tt>
| <tt>'''System<wbr/>.Collections<wbr/>.ArrayList'''<br/>or<br/>'''System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/><'''type'''>'''</tt>
|
|- valign="top"
| Java
| <tt>type'''[]'''{{ref|Java's array|[b]}}</tt>
| <tt>type'''[][]'''...{{ref|Java's array|[b]}}</tt>
| <tt>'''ArrayList''' or '''ArrayList<'''type'''>'''</tt>
|
|- valign="top"
| D
| <tt>type'''['''size''']'''</tt>
| <tt>type'''['''size<sub>1</sub>''']['''size<sub>2</sub>''']'''</tt>
| <tt>type'''[]'''</tt>
|
|- valign="top"
| Go
| <tt>'''['''size''']'''type</tt>
| <tt>'''['''size<sub>1</sub>''']['''size<sub>2</sub>''']'''...type</tt>
| <tt>'''[]type'''</tt>
| <tt>'''[][]type'''</tt>
|
|- valign="top"
| Swift
| 
| 
| <tt>'''['''type''']'''</tt> or <tt>'''Array<'''type'''>'''</tt>
| <tt>'''<nowiki>[[</nowiki>'''type'''<nowiki>]]</nowiki>'''</tt> or <tt>'''Array<Array<'''type'''>>'''</tt>
|
|- valign="top"
| Objective-C
| <tt>'''NSArray'''</tt>
|
| <tt>'''NSMutableArray'''</tt>
|
|- valign="top"
| JavaScript
| {{n/a}}
| {{n/a}}
| colspan=2|<tt>'''Array'''</tt>{{ref|JavaScript's array|[d]}}
|- valign="top"
| Common Lisp
| 
| 
|
|
|- valign="top"
| Scheme
| 
| 
| 
| 
|- valign="top"
| ISLISP
| 
| 
| 
| 
|- valign="top"
| Pascal
| rowspan=2|<tt>'''array['''first'''..'''last'''] of''' type{{ref|subrange|[c]}}</tt>
| rowspan=2|<tt>'''array['''first<sub>1</sub>'''..'''last<sub>1</sub>'''] of array['''first<sub>2</sub>'''..'''last<sub>2</sub>'''] ''' ... '''of''' type {{ref|subrange|[c]}}<br/></tt>
or<br/>
<tt>''' array['''first<sub>1</sub>'''..'''last<sub>1</sub>''', '''first<sub>2</sub>'''..'''last<sub>2</sub>''', '''...'''] of''' type </tt>{{ref|subrange|[c]}}
| {{n/a}}
| {{n/a}}
|- valign="top"
| Object Pascal (Delphi)
|<tt>'''array of''' type</tt>
|<tt>'''array of array''' ... '''of''' type</tt>
|- valign="top"
| Visual Basic
| <tt><!-- '''Dim x('''last''') As '''type''' --></tt>
| <tt><!-- '''Dim x('''last<sub>1</sub>''', '''last<sub>2</sub>''','''...''') As '''type''' --></tt>
|
|
|- valign="top"
| Visual Basic .NET
|
|
| <tt>'''System<wbr/>.Collections<wbr/>.ArrayList'''<br/>or<br/>'''System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/>(Of''' type''')'''</tt>
|
|- valign="top"
| Python
| 
| 
| <tt>'''list'''</tt>
| 
|- valign="top"
| S-Lang
| <tt><!-- '''x = '''type'''['''size'''];''' --></tt>
| <tt><!-- '''x = '''type'''['''size<sub>1</sub>''', '''size<sub>2</sub>''', '''...'''];''' --></tt>
|
|
|- valign="top"
| Fortran
| <tt>''' '''type''' :: '''name'''('''size''')'''</tt>
| <tt>''' '''type''' :: '''name'''('''size'''<sub>1</sub>, '''size'''<sub>2</sub>,...)'''</tt>
| <tt>''' '''type''', ALLOCATABLE :: '''name'''(:)'''</tt>
| <tt>''' '''type''', ALLOCATABLE :: '''name'''(:,:,...)'''</tt>
|- valign="top"
| PHP
| 
|
| <tt>'''array'''</tt>
|
|- valign="top"
| Perl
| 
| 
|
|
|- valign="top"
| Perl 6
| 
| 
| <tt>'''Array['''type''']''' or '''Array of''' type</tt>
|
|- valign="top"
| Ruby
| 
| <tt><!-- '''x = Array.new('''size<sub>1</sub>'''){ Array.new('''size<sub>2</sub>''') }''' --></tt>
| <tt>'''Array'''</tt>
|
|- valign="top"
| Scala
| <tt>'''Array['''type''']'''</tt>
| <tt>'''Array['''...'''[Array['''type''']]'''...''']'''</tt>
| <tt>'''ArrayBuffer['''type''']'''</tt>
|
|- valign="top"
| Seed7
| <tt>'''array''' type<br />or<br />'''array ['''idxType''']''' type</tt>
| <tt>'''array array''' type<br />or<br />'''array ['''idxType'''] array ['''idxType''']''' type</tt>
| <tt>'''array''' type<br />or<br />'''array ['''idxType''']''' type</tt>
| <tt>'''array array''' type<br />or<br />'''array ['''idxType'''] array ['''idxType''']''' type</tt>
|- valign="top"
| Smalltalk
| <tt>'''Array'''</tt>
| 
| <tt>'''OrderedCollection'''</tt>
|
|- valign="top"
| Windows PowerShell
| <tt>type'''[]'''</tt>
|<tt>type'''[{{Not a typo|,,}}'''...''']'''</tt>
|
|
|- valign="top"
| OCaml
| <tt>type '''array'''</tt>
| <tt>type '''array''' ... '''array'''</tt>
| 
|
|- valign="top"
| F#
| <tt>type '''[]''' or type '''array'''</tt>
| <tt>type '''[{{Not a typo|,,}}'''...''']'''</tt>
| <tt>'''System<wbr/>.Collections<wbr/>.ArrayList'''<br/>or<br/>'''System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/><'''type'''>'''</tt>
|
|- valign="top"
| Standard ML
| <tt>type '''vector''' or type '''array'''</tt>
| 
|
|
|- valign="top"
| Haskell (GHC)
| <tt><!-- '''x = Array.array (0, '''size'''-1)''' list_of_association_pairs --></tt>
| <tt><!-- '''x = Array.array ((0, 0,'''...'''), ('''size<sub>1</sub>'''-1, '''size<sub>2</sub>'''-1,'''...'''))''' list_of_association_pairs --></tt>
|
|
|- valign="top"
| COBOL
| <tt>level-number type '''OCCURS''' size «'''TIMES'''»'''.'''
| <tt>one-dimensional array definition...</tt>
| <tt>level-number type '''OCCURS''' min-size '''TO''' max-size «'''TIMES'''» '''DEPENDING''' «'''ON'''» size'''.'''</tt>{{ref|COBOL DEPENDING ON clause|[e]}}
| {{n/a}}
|}
{{note|C's array|a}}In most expressions (except the <tt>sizeof</tt> and <tt>&</tt> operators), values of array types in C are automatically converted to a pointer of its first argument. See [[C syntax#Arrays]] for further details of syntax and pointer operations.
<br/>{{note|Java's array|b}} The C-like "type '''<tt>x[]</tt>'''" works in Java, however "type'''<tt>[] x</tt>'''" is the preferred form of array declaration.
<br/>{{note|subrange|c}} Subranges are used to define the bounds of the array.
<br/>{{note|JavaScript's array|d}} JavaScript's array are a special kind of object. <!-- explain array(size) thing -->
<br/>{{note|COBOL DEPENDING ON clause|e}} The <code>DEPENDING ON</code> clause in COBOL does not create a 'true' variable length array and will always allocate the maximum size of the array.

=== Other types ===
{| class="wikitable"
! rowspan=2|
! colspan=2|Simple composite types
! rowspan=2|[[Algebraic data type]]s
! rowspan=2|[[Union (computer science)|Unions]]
|-
! [[Record (computer science)|Records]]
! [[Tuple]] expression
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>'''type''' identifier '''is''' «'''abstract'''» «'''tagged'''» «'''limited'''» ['''record'''
<dl><dd>fieldname<sub>1</sub> ''':''' type''';'''</dd>
<dd>fieldname<sub>2</sub> ''':''' type''';'''</dd></dl>...<br>
'''end record''' <nowiki>|</nowiki>
'''null record''']</tt>
| {{n/a}}
| Any combination of records, unions and enumerations (as well as references to those, enabling recursive types).
| <tt>'''type''' identifier '''('''variation ''':''' discrete_type''') is record'''
<dl><dd>'''case''' variation '''is'''
<dl><dd>'''when''' choice_list<sub>1</sub> '''<nowiki>=></nowiki>'''
<dl><dd>fieldname<sub>1</sub> ''':''' type''';'''</dd>
<dd>...</dd></dl></dd></dl>
<dl><dd>'''when''' choice_list<sub>2</sub> '''<nowiki>=></nowiki>'''
<dl><dd>fieldname<sub>2</sub> ''':''' type''';'''</dd>
<dd>...</dd></dl></dd></dl>
<dl><dd>...</dd></dl>
'''end case;'''</dd></dl>'''end record'''</tt>
|-
| ALGOL 68
| <tt>'''struct''' ('''modename''' ''«fieldname»'', '''...''');</tt>
| colspan=2 align=center| Required types and operators can be [[User-defined function|user defined]]
| <tt>'''union''' ('''modename''', '''...''');</tt>
|-
| C (C99)
| rowspan=2| <tt>'''struct''' «name» '''{'''type name''';'''...'''};'''</tt>
| rowspan=2 {{n/a}}
| rowspan=3 {{n/a}}
| rowspan=3| <tt>'''union {'''type name''';'''...'''};'''</tt>
|-
| Objective-C
|-
| C++
| <tt>'''struct''' «name» '''{'''type name''';'''...'''};'''{{ref|C++'s struct|[b]}}</tt>
| <tt>[[C++11#Tuple_types|«std::»tuple]]<type<sub>1</sub>..type<sub>n</sub>></tt>
|-
| C#
| <tt>'''struct''' name '''{'''type name''';'''...'''}'''</tt>
|
|
| rowspan=3 {{n/a}}
|-
| Java
| {{n/a}}{{ref|just classes|[a]}}
|
|
|-
| JavaScript
|
| {{n/a}}
|
|-
| D
| <tt>'''struct''' name '''{'''type name''';'''...'''}'''</tt>
| 
| <tt>'''std.variant.Algebraic'''!(type,...)</tt>
| <tt>'''union {'''type name''';'''...'''}'''</tt>
|-
| Go
| <tt>'''struct {<dl><dd>'''«name» type'''<br/>'''...'''</dd></dl>}'''</tt>
| 
| 
| 
|-
| Swift
| <tt>'''struct''' name '''{<dl><dd>var '''name «''': '''type»'''<br/>'''...'''</dd></dl>}'''</tt>
| <tt>'''('''«name<sub>1</sub>''':'''» val<sub>1</sub>''',''' «name<sub>2</sub>''':'''» val<sub>2</sub>''',''' «name<sub>3</sub>''':'''» val<sub>3</sub>''',''' ... ''')'''</tt>
| <tt>'''enum''' name '''{ case''' Foo«'''('''types''')'''»''' case''' Bar «'''('''types''')'''» ... '''}'''</tt>
| 
|-
| Common Lisp
|
| rowspan=3| <tt>'''(cons '''val<sub>1</sub> val<sub>2</sub>''')'''{{ref|pair only|[c]}}</tt>
|
|
|-
| Scheme
| {{n/a}}
|
|
|-
| ISLISP
|
|
|
|-
| Pascal
| <tt>'''record'''<dl><dd>name''':''' type''';'''<br/>...</dd></dl>'''end'''</tt>
| {{n/a}}
| {{n/a}}
| <tt>'''record'''<dl><dd>'''case''' type '''of''' <br/>value''': ('''types''');'''<br/>...</dd></dl>'''end'''</tt>
|-
| Visual Basic
|
|
|
|
|-
| Visual Basic .NET
| <tt>'''Structure''' name <dl><dd> '''Dim''' name '''As''' type <br/> ... </dd></dl>''' End Structure'''</tt>
|
|
|
|-
| Python
| {{n/a}}{{ref|just classes|[a]}}
| <tt>«'''('''»val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... «''')'''»</tt>
|
| {{n/a}}
|-
| S-Lang
| <tt>'''struct {'''name [=value], ...'''}'''</tt>
|
|
|
|-
| Fortran
|'''TYPE''' name <dl><dd> ''' '''type''' :: ''' name <br/> ... </dd></dl>''' END TYPE'''
|
|
|
|-
| PHP
| {{n/a}}{{ref|just classes|[a]}}
|
|
|
|-
| Perl
| {{n/a}}{{ref|Perl's records|[d]}}
|
|
| rowspan=3 {{n/a}}
|-
| Perl 6
| {{n/a}}{{ref|just classes|[a]}}
|
|
|-
| Ruby
| {{code|lang=ruby|1=OpenStruct.new({:name => value})}}
|
|
|-
| Scala
| <tt>'''case class''' name'''('''«'''var'''» name''':''' type''',''' ...''')'''</tt>
| <tt>'''('''val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... ''')'''</tt>
| <tt>'''abstract class''' name<br/>
'''case class''' Foo'''('''«parameters»''') extends''' name<br/>
'''case class''' Bar'''('''«parameters»''') extends''' name<br/>
...<br /></tt>
or<br />
<tt>'''abstract class''' name<br/>
'''case object''' Foo '''extends''' name<br/>
'''case object''' Bar '''extends''' name<br/>
...<br /></tt>
or combination of case classes and case objects
|
|-
| Windows PowerShell
|
|
|
|
|-
| OCaml
| rowspan=2| <tt>'''type''' name '''= {'''«'''mutable'''» name ''':''' type''';'''...'''}'''</tt>
| rowspan=2| <tt>«'''('''»val<sub>1</sub>''',''' val<sub>2</sub>''',''' val<sub>3</sub>''',''' ... «''')'''»</tt>
| rowspan=2| <tt>'''type''' name '''=''' Foo «'''of''' type»''' <nowiki>|</nowiki>''' Bar «'''of''' type»''' <nowiki>|</nowiki>''' ...</tt>
| rowspan=4 {{n/a}}
|-
| F#
|-
| Standard ML
| <tt>'''type''' name '''= {'''name ''':''' type''','''...'''}'''</tt>
| rowspan=2| <tt>'''('''val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... ''')'''</tt>
| <tt>'''datatype''' name '''=''' Foo «'''of''' type»''' <nowiki>|</nowiki>''' Bar «'''of''' type»''' <nowiki>|</nowiki>''' ...</tt>
|-
| Haskell
| <tt>'''data''' Name '''=''' Constr '''{'''name '''::''' type''','''...'''}'''</tt>
| <tt>'''data''' Name '''=''' Foo «types»''' <nowiki>|</nowiki>''' Bar «types»''' <nowiki>|</nowiki>''' ...</tt>
|-
| COBOL
| <tt>level-number name type clauses'''.'''<br/>
&nbsp;&nbsp;level-number+n name type clauses'''.'''<br/>
&nbsp;&nbsp;...</tt>
| {{n/a}}
| {{n/a}}
| <tt>name '''REDEFINES''' variable type'''.'''</tt>
|}
{{note|just classes|a}} Only classes are supported.
<br />{{note|C++'s struct|b}} <code>struct</code>s in C++ are actually classes, but have default public visibility and ''are'' also [[Plain old data structure|POD]] objects. C++11 extended this further, to make classes act identically to POD objects in many more cases.
<br />{{note|pair only|c}} pair only
<br />{{note|Perl's records|d}} Although Perl doesn't have records, because Perl's type system allows different data types to be in an array, "hashes" (associative arrays) that don't have a variable index would effectively be the same as records.
<br />{{note|enum|e}} Enumerations in this language are algebraic types with only nullary constructors

== Variable and constant declarations ==
{| class="wikitable"
!
! variable
! constant
! type synonym
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>identifier ''':''' type «''':=''' initial_value»{{ref|Ada declaration|[e]}}</tt>
| <tt>identifier ''': constant''' type ''':=''' final_value</tt>
| <tt>'''subtype''' identifier '''is''' type</tt>
|-
| [[ALGOL 68]]
|<tt>'''modename''' ''name'' «''':=''' initial_value»;</tt>
|<tt>'''modename''' ''name'' '''=''' value;</tt>
|<tt>'''[[typedef|mode]]''' '''synonym''' = '''modename''';</tt>
|-
| C (C99)
| rowspan=3| <tt>type name «'''=''' initial_value»''';'''</tt>
| rowspan=2| <tt>'''enum{''' name '''=''' value '''};'''</tt>
| rowspan=3| <tt>'''[[typedef]]''' type synonym''';'''</tt>
|-
| Objective-C
|-
| C++
| <tt>'''const''' type name '''=''' value''';'''</tt>
|-
| C#
| <tt>type name «'''=''' initial_value»''';''' or <br/> '''var''' name '''=''' value''';'''</tt>
| <tt>'''const''' type name '''=''' value''';''' or <br/> '''readonly''' type name '''=''' value''';'''</tt>
| <tt>'''using''' synonym '''=''' type''';'''</tt>
|-
| D
| <tt>type name «'''=''' initial_value»''';''' or <br/> '''auto''' name '''=''' value''';'''</tt>
| <tt>'''const''' type name '''=''' value''';''' or <br/> '''immutable''' type name '''=''' value''';'''</tt>
| <tt>'''alias''' type synonym''';'''</tt>
|-
| Java
| <tt>type name «'''=''' initial_value»''';'''</tt>
| <tt>'''final''' type name '''=''' value''';'''</tt>
| rowspan=2 {{n/a}}
|-
| JavaScript
| <tt>'''var''' name «'''=''' initial_value»''';'''</tt>
| <tt>'''const''' name '''=''' value''';'''</tt>
|-
| Go
| <tt>'''var''' name type «'''=''' initial_value» or <br/> name ''':=''' initial_value</tt>
| <tt>'''const''' name «type» '''=''' value</tt>
| <tt>'''type''' synonym type</tt>
|-
| Swift
| <tt>'''var''' name «''': '''type» «'''=''' initial_value»
| <tt>'''let''' name «''': '''type» '''=''' value
| <tt>'''typealias''' synonym '''=''' type</tt>
|-
| Common Lisp
| <tt>'''(defparameter''' name initial_value''')''' or <br/> '''(defvar''' name initial_value''')''' or <br/> '''(setf (symbol-value <nowiki>'</nowiki>'''symbol''')''' initial_value''')'''</tt>
| <tt>'''(defconstant''' name value''')'''</tt>
| <tt>'''(deftype '''synonym''' () <nowiki>'</nowiki>'''type''')'''</tt>
|-
| Scheme
| <tt>'''(define''' name initial_value''')'''</tt>
| 
| 
|-
| ISLISP
| <tt>'''(defglobal''' name initial_value''')''' or <br/> '''(defdynamic''' name initial_value''')'''</tt>
| <tt>'''(defconstant''' name value''')'''</tt>
| {{n/a}}
|-
| <tt>Pascal{{ref|Pascal's declarations|[a]}}</tt>
| <tt>name''':''' type «'''=''' initial_value»</tt>
| <tt>name '''=''' value</tt>
| <tt>synonym '''=''' type</tt>
|-
| Visual Basic
| <tt>'''Dim''' name '''As''' type</tt>
| rowspan=3| <tt>'''Const''' name '''As''' type '''=''' value</tt>
|
|-
| Visual Basic .NET
| <tt>'''Dim''' name '''As''' type«'''=''' initial_value»'''</tt>
| <tt>'''Imports''' synonym '''=''' type</tt>
|-
| Xojo
| <tt>'''Dim''' name '''As''' type«'''=''' initial_value»'''</tt>
| {{n/a}}
|-
| Python
| rowspan=2| <tt>name '''=''' initial_value</tt>
| rowspan=2 {{n/a}}
| <tt>synonym '''=''' type{{ref|variable types|[b]}}</tt>
|-
| [[CoffeeScript]]
| {{n/a}}
|-
| S-Lang
| <tt>name '''=''' initial_value''';'''</tt>
|
| <tt>'''typedef struct {...}''' typename</tt>
|-
| Fortran
| type name
| <tt>type''', PARAMETER :: ''' name '''=''' value</tt>
|
|-
| PHP
| <tt>'''$'''name '''=''' initial_value''';'''</tt>
| <tt>'''define("'''name'''", '''value''');''' <br /> '''const '''name''' = '''value (5.3+)</tt>
| rowspan=2 {{n/a}}
|-
| Perl
| <tt>«'''my'''» '''$'''name «'''=''' initial_value'''»;'''{{ref|Perl's my keyword|[c]}}</tt>
| <tt>'''use constant''' name '''=>''' value''';'''</tt>
|-
| Perl 6
| <tt>«'''my''' «type»» $name «'''=''' initial_value'''»;'''{{ref|Perl's my keyword|[c]}}</tt>
| <tt>«'''my''' «type»» '''constant''' name '''=''' value''';'''</tt>
| <tt>'''::'''synonym '''::=''' type</tt>
|-
| Ruby
| <tt>name '''=''' initial_value</tt>
| <tt>Name '''=''' value</tt>
| <tt>synonym '''=''' type{{ref|variable types|[b]}}</tt>
|-
| Scala
| <tt>'''var''' name«''':''' type» '''=''' initial_value</tt>
| <tt>'''val''' name«''':''' type» '''=''' value</tt>
| <tt>'''type''' synonym '''=''' type</tt>
|-
| Windows PowerShell
| <tt>«'''['''type''']'''»''' $'''name '''=''' initial_value</tt>
| {{n/a}}
| {{n/a}}
|-
| Bash shell
| <tt>name'''='''initial_value</tt>
| {{n/a}}
| {{n/a}}
|-
| OCaml
| <tt>'''let''' name «''':''' type '''ref'''» '''= ref''' value{{ref|ML ref|[d]}}</tt>
| rowspan=2| <tt>'''let''' name «''':''' type» '''=''' value</tt>
| rowspan=3| <tt>'''type''' synonym '''=''' type</tt>
|-
| F#
| <tt>'''let mutable''' name «''':''' type» '''=''' value</tt>
|-
| Standard ML
| <tt>'''val''' name «''':''' type '''ref'''» '''= ref''' value{{ref|ML ref|[d]}}</tt>
| <tt>'''val''' name «''':''' type» '''=''' value</tt>
|-
| Haskell
|
| <tt>«name'''::'''type''';'''» name '''=''' value</tt>
| <tt>'''type''' Synonym '''=''' type</tt>
|-
| [[Forth (programming language)|Forth]]
| <tt>'''VARIABLE''' name</tt> (in some systems use <tt>value '''VARIABLE''' name</tt> instead)
| <tt>value '''CONSTANT''' name</tt>
| 
|-
| COBOL
| <tt>level-number name type clauses'''.'''</tt>
| <tt>«'''0'''»'''1''' name '''CONSTANT''' «'''AS'''» value'''.'''</tt>
| <tt>level-number name type clauses «'''IS'''» '''TYPEDEF.'''
|-
| Mathematica
| <tt>name'''='''initialvalue</tt>
| {{n/a}}
| {{n/a}}
|}
{{note|Pascal's declarations|a}} Pascal has declaration blocks. See [[Comparison of programming languages (basic instructions)#Functions]].
<br/>{{note|variable types|b}}Types are just regular objects, so you can just assign them.
<br/>{{note|Perl's my keyword|c}} In Perl, the "my" keyword scopes the variable into the block.
<br/>{{note|ML ref|d}} Technically, this does not declare ''name'' to be a mutable variable—in ML, all names can only be bound once; rather, it declares ''name'' to point to a "reference" data structure, which is a simple mutable cell. The data structure can then be read and written to using the <tt>!</tt> and <tt>:=</tt> operators, respectively.
<br/>{{note|Ada declaration|[e]}} If no initial value is given, an invalid value is automatically assigned (which will trigger a run-time exception if it used before a valid value has been assigned). While this behaviour can be suppressed it is recommended in the interest of predictability. If no invalid value can be found for a type (for example in case of an unconstraint integer type), a valid, yet predictable value is chosen instead.

== [[Control flow]] ==

=== [[Conditional (programming)|Conditional]] statements ===
{| class="wikitable"
|- valign="top"
!
! if
! else if
! [[switch statement|select case]]
! [[Conditional (programming)#If expressions|conditional expression]]
|- valign="top"
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| rowspan=2| <tt>'''if''' condition '''then''' <dl><dd>statements</dd></dl> «'''else''' <dl><dd>statements»</dd></dl> '''end if'''</tt>
| rowspan=2| <tt>'''if''' condition<sub>1</sub> '''then''' <dl><dd>statements</dd></dl> '''elsif''' condition<sub>2</sub> '''then''' <dl><dd>statements</dd></dl>...<br>«'''else''' <dl><dd>statements»</dd></dl> '''end if'''</tt>
| <tt>'''case''' expression '''is'''<dl><dd>'''when''' value_list<sub>1</sub> '''<nowiki>=></nowiki>''' statements</dd><dd>'''when''' value_list<sub>2</sub> '''=>''' statements</dd></dl>...<dl><dd>«'''when others <nowiki>=></nowiki>''' statements» </dd></dl>'''end case'''</tt>
| <tt>'''(if''' condition<sub>1</sub> '''then''' <dl><dd>expression<sub>1</sub></dd></dl> «'''elsif''' condition<sub>2</sub> '''then''' <dl><dd>expression<sub>2</sub>»</dd></dl> ... <br> '''else''' <dl><dd>expression<sub>n</sub></dd></dl>''')'''<br>'''(case''' expression '''is''' <dl><dd>'''when''' value_list<sub>1</sub> '''<nowiki>=></nowiki>''' expression<sub>1</sub></dd><dd>'''when''' value_list<sub>2</sub> '''=>''' expression<sub>2</sub></dd></dl> ... <dl><dd> «'''when others <nowiki>=></nowiki>''' expression<sub>n</sub>» </dd></dl>''')'''</tt>
|- valign="top"
| [[Seed7]]
| <tt>'''case''' expression '''of'''<br />'''when''' set1 ''':''' statements<br/>...<br/>«'''otherwise:''' statements» <br />'''end case'''</tt>
|
|- valign="top"
| [[Modula-2]]
| <tt>'''if''' condition '''then''' <dl><dd>statements</dd></dl> «'''else''' <dl><dd>statements»</dd></dl> '''end'''</tt>
| <tt>'''if''' condition<sub>1</sub> '''then''' <dl><dd>statements</dd></dl> '''elsif''' condition<sub>2</sub> '''then''' <dl><dd>statements</dd></dl>...<br>«'''else''' <dl><dd>statements»</dd></dl> '''end'''</tt>
| rowspan=1 | <tt>'''case''' expression '''of'''<br />caseLabelList ''':''' statements '''<nowiki>|</nowiki>'''<br/>...<br/>«'''else''' statements» <br />'''end'''</tt>
|
|- valign="top"
| rowspan=2 |[[ALGOL 68]] & "brief form"
| <tt>'''if''' condition '''then ''' statements «'''else''' statements» '''fi'''</tt>
| <tt>'''if''' condition '''then''' statements '''elif''' condition '''then''' statements '''fi'''</tt>
| <tt>'''case''' switch '''in''' statements, statements«,... '''out''' statements» '''esac'''</tt>
| rowspan=2 | <source lang="algol68" enclose="none">( condition | valueIfTrue | valueIfFalse )</source>
|- valign="top"
|<source lang="algol68" enclose="none">( condition | statements «| statements» )</source>
|<source lang="algol68" enclose="none">( condition | statements |: condition |  statements )</source>
|<source lang="algol68" enclose="none">( variable | statements,... «| statements» )</source>
|- valign="top"
| C (C99)
| rowspan=9|<tt>'''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| rowspan=8|<tt>'''if ('''condition''') {'''instructions'''}<br/>else if ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»</tt>
| rowspan=7|<tt>'''switch ('''variable''') {<dl><dd>case''' case1''':''' instructions «'''break;'''»<br/>...<br/>«'''default:''' instructions»</dd></dl>'''}'''</tt>
| rowspan=8| <tt>condition '''[[?:|?]]''' valueIfTrue '''[[?:|:]]''' valueIfFalse</tt>
|- valign="top"
| Objective-C
|- valign="top"
| C++ (STL)
|- valign="top"
| D
|- valign="top"
| Java
|- valign="top"
| JavaScript
|- valign="top"
| PHP
|- valign="top"
| C#
| <tt>'''switch ('''variable''') {<dl><dd>case''' case1''':''' instructions'''; '''«jump statement''';'''»<br/>...<br/>«'''default:''' instructions''';''' «jump statement''';'''»» </dd></dl> '''}'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''if ('''condition''') { '''instructions''' }<br/>elseif ('''condition''') { '''instructions''' }'''<br/>...<br/>«'''else { '''instructions''' }'''»</tt>
| <tt>'''switch ('''variable''') { '''case1''' { '''instructions «'''break;'''» '''}''' ... «'''default { '''instructions''' }'''»'''}'''</tt>
| 
|- valign="top"
| Go
| <tt>'''if '''condition''' {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''if '''condition''' {'''instructions'''}<br/>else if '''condition''' {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»<br/> or <br/> '''switch {<dl><dd>case''' condition''':''' instructions <br/>...<br/>«'''default:''' instructions»</dd></dl>'''}'''</tt>
| <tt>'''switch '''variable''' {<dl><dd>case''' case1''':''' instructions <br/>...<br/>«'''default:''' instructions»</dd></dl>'''}'''</tt>
| 
|- valign="top"
| Swift
| <tt>'''if '''condition''' {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''if '''condition''' {'''instructions'''}<br/>else if '''condition''' {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»<br/>
| <tt>'''switch '''variable''' {<dl><dd>case''' case1''':''' instructions <br/>...<br/>«'''default:''' instructions»</dd></dl>'''}'''</tt>
| 
|- valign="top"
| Perl
| <tt>'''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless ('''notcondition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''if ('''condition''') {'''instructions'''}<br/>elsif ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless ('''notcondition''') {'''instructions'''}<br/>elsif ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''use feature "switch";'''<br/>...<br/>'''given ('''variable''') {<dl><dd>when ('''case1''') { '''instructions''' }'''<br/>...<br/>«'''default { '''instructions''' }'''»</dd></dl>'''}'''</tt>
| <tt>condition '''[[?:|?]]''' valueIfTrue '''[[?:|:]]''' valueIfFalse</tt>
|- valign="top"
| Perl 6
| <tt>'''if''' condition '''{'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless''' notcondition '''{'''instructions'''}'''</tt>
| <tt>'''if''' condition''' {'''instructions'''}<br/>elsif''' condition '''{'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''</tt>
| <tt>'''given''' variable '''{<dl><dd>when''' case1 '''{ '''instructions''' }'''<br/>...<br/>«'''default { '''instructions''' }'''»</dd></dl>'''}'''</tt>
| <tt>condition '''[[?:|??]]''' valueIfTrue '''!!''' valueIfFalse</tt>
|- valign="top"
| Ruby
| <tt>'''if''' condition <dl><dd>instructions</dd></dl> «'''else''' <dl><dd>instructions»</dd></dl> </tt>
| <tt>'''if''' condition <dl><dd>instructions</dd></dl> '''elsif''' condition <dl><dd>instructions</dd></dl> ... <br/>«'''else''' <dl><dd>instructions»</dd></dl> '''end'''</tt>
| <tt>'''case''' variable <br/> '''when''' case1 <br/> <dl><dd>instructions</dd></dl> ... <br/> «'''else'''<dl><dd>instructions»</dd></dl>'''end'''</tt>
| <tt>condition '''[[?:|?]]''' valueIfTrue '''[[?:|:]]''' valueIfFalse</tt>
|- valign="top"
| Scala
| <tt>'''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''if ('''condition''') {'''instructions'''}<br/>else if ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>expression '''match {'''<dl><dd>'''case''' pattern1 '''=>''' expression<br/>'''case''' pattern2 '''=>''' expression<br/>...<br/>«'''case _ =>''' expression»</dd></dl>'''}'''{{ref|pattern matching|[b]}}</tt>
| <tt>'''if ('''condition''')''' valueIfTrue '''else''' valueIfFalse</tt>
|- valign="top"
| Smalltalk
| <tt>condition '''ifTrue:''' <dl><dd>trueBlock</dd></dl> «'''ifFalse:''' <dl><dd>falseBlock»</dd></dl> '''end'''</tt>
| 
| 
| <tt>condition '''ifTrue:''' trueBlock '''ifFalse:''' falseBlock</tt>
|- valign="top"
| Common Lisp
| <tt>'''(when '''condition<br/> <dl><dd>instructions''')'''</dd></dl> or<br/> '''(unless '''condition<br/> <dl><dd>instructions''')'''</dd></dl> or<br/> '''(if '''condition'''<br/><dl><dd>(progn '''instructions''')</dd><dd>'''«'''(progn '''instructions''')'''»''')'''</dd></dl></tt>
| <tt>'''(cond ('''condition1 instructions''')<br/><dl><dd>('''condition2 instructions''')</dd><dd>'''...'''</dd><dd>'''«'''(t '''instructions''')'''»''')'''</dd></dl></tt>
| <tt>'''(case '''expression'''<dl><dd>('''case1 instructions''')</dd><dd>('''case2 instructions''')</dd><dd>'''...'''</dd><dd>'''«'''(otherwise '''instructions''')'''»''')'''</dd></dl></tt>
| rowspan=2| <tt>'''(if '''condition valueIfTrue valueIfFalse''')'''</tt>
|- valign="top"
| Scheme
| <tt>'''(when '''conditioninstructions''')''' or <br/> '''(if '''condition''' (begin '''instructions''') '''«'''(begin '''instructions''')'''»''')'''</tt>
| <tt>'''(cond ('''condition1 instructions''') ('''condition2 instructions''') '''...''' '''«'''(else '''instructions''')'''»''')'''</tt>
| <tt>'''(case ('''variable''') (('''case1''')''' instructions''') (('''case2''')''' instructions''') '''...''' '''«'''(else '''instructions''')'''»''')'''</tt>
|- valign="top"
| ISLISP
| <tt>'''(if '''condition'''<br/><dl><dd>(progn '''instructions''')</dd><dd>'''«'''(progn '''instructions''')'''»''')'''</dd></dl></tt>
| <tt>'''(cond ('''condition1 instructions''')<br/><dl><dd>('''condition2 instructions''')</dd><dd>'''...'''</dd><dd>'''«'''(t '''instructions''')'''»''')'''</dd></dl></tt>
| <tt>'''(case '''expression'''<dl><dd>('''case1 instructions''')</dd><dd>('''case2 instructions''')</dd><dd>'''...'''</dd><dd>'''«'''(t '''instructions''')'''»''')'''</dd></dl></tt>
| <tt>'''(if '''condition valueIfTrue valueIfFalse''')'''</tt>
|- valign="top"
| Pascal
| <tt>'''if''' condition '''then begin''' <dl><dd>instructions</dd></dl> '''end''' <br/> «'''else begin'''<dl><dd>instructions</dd></dl>'''end'''»{{ref|pascal semicolon|[c]}}</tt>
| <tt>'''if''' condition '''then begin''' <dl><dd>instructions</dd></dl> '''end <br/> else if''' condition '''then begin'''<dl><dd>instructions</dd></dl> '''end'''<br/>...<br/>«'''else begin'''<dl><dd>instructions</dd></dl> '''end'''»{{ref|pascal semicolon|[c]}}</tt>
| <tt>'''case '''variable''' of''' <dl><dd>case1''':''' instructions <br/> ... <br/> «'''else:''' instructions»</dd></dl>'''end'''{{ref|pascal semicolon|[c]}}</tt>
|- valign="top"
| Visual Basic
| rowspan=3| <tt>'''If''' condition '''Then''' <dl><dd>instructions</dd></dl> «'''Else''' <dl><dd>instructions»</dd></dl>'''End If'''</tt>
| rowspan=3| <tt>'''If''' condition '''Then''' <dl><dd>instructions</dd></dl> '''ElseIf''' condition '''Then''' <dl><dd>instructions</dd></dl> ... <br/> «'''Else''' <dl><dd>instructions»</dd></dl>'''End If'''</tt>
| rowspan=3| <tt>'''Select Case''' variable <br/> '''Case''' case1 <dl><dd>instructions</dd></dl> ... <br/> «'''Case Else''' <dl><dd>instructions»</dd></dl> '''End Select'''</tt>
| <tt>'''[[IIf]]('''condition''', '''valueIfTrue''', '''valueIfFalse''')'''</tt>
|- valign="top"
| Visual Basic .NET
| rowspan=2| <tt>'''If('''condition''', '''valueIfTrue''', '''valueIfFalse''')'''</tt>
|- valign="top"
| Xojo
|- valign="top"
| Python {{ref|python indent|[a]}}
| <tt>'''if''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions»</tt>
| <tt>'''if''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/> '''elif''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/>  ... <br/> «'''else:''' <br/> {{keypress|Tab}} instructions»</tt>
| 
| <tt>valueIfTrue '''if''' condition '''else''' valueIfFalse</tt><br/>(Python 2.5+)
|- valign="top"
| S-Lang
| <tt>'''if ('''condition''') { '''instructions''' } '''«'''else { '''instructions''' }'''»</tt>
| <tt>'''if ('''condition''') { '''instructions''' } else if ('''condition''') {''' instructions '''}''' ... «'''else { '''instructions '''}'''»</tt>
| <tt>'''switch ('''variable''') { case '''case1''': '''instructions''' } { case '''case2''': '''instructions''' }''' ...</tt>
|
|- valign="top"
| Fortran
| <tt>'''IF ('''condition''') THEN <dl><dd> '''instructions''' </dd></dl> ELSE <dl><dd> '''instructions''' </dd></dl> ENDIF'''</tt>
| <tt>'''IF ('''condition''') THEN <dl><dd> '''instructions''' </dd></dl> ELSEIF ('''condition''') THEN <dl><dd> '''instructions''' </dd></dl> ... <br/> ELSE <dl><dd> '''instructions''' </dd></dl> ENDIF'''</tt>
| <tt>'''SELECT CASE('''variable''')<dl><dd> CASE ('''case1''') <dl><dd> '''instructions''' </dd></dl> ... <br/> CASE DEFAULT <dl><dd> '''instructions''' </dd></dl> </dd></dl> END SELECT</tt>
|
|- valign="top"
| Forth
| <tt>condition''' IF '''instructions «''' ELSE '''instructions»''' THEN'''</tt>
| <tt>condition''' IF '''instructions ''' ELSE '''condition''' IF '''instructions''' THEN THEN'''</tt>
| <tt>value''' CASE'''<br/>case''' OF '''instructions''' ENDOF'''<br/>case''' OF '''instructions''' ENDOF'''<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default instructions<br/>'''ENDCASE'''</tt>
| <tt>condition''' IF '''valueIfTrue''' ELSE '''valueIfFalse''' THEN'''</tt>
|- valign="top"
| OCaml
| <tt>'''if''' condition '''then begin''' instructions '''end''' «'''else begin''' instructions '''end'''»</tt>
| <tt>'''if''' condition '''then begin''' instructions '''end else if''' condition '''then begin''' instructions '''end''' ... «'''else begin''' instructions '''end'''»</tt>
| rowspan=2| <tt>'''match''' value '''with <dl><dd>'''pattern1'''  <nowiki>-></nowiki> '''expression'''<br/><nowiki>|</nowiki> '''pattern2''' <nowiki>-></nowiki> '''expression<br/> ... <br/>«'''<nowiki>| _ -></nowiki> '''expression»{{ref|pattern matching|[b]}}</dd></dl></tt>
| rowspan=4| <tt>'''if''' condition '''then''' valueIfTrue '''else''' valueIfFalse</tt>
|- valign="top"
| F#
| <tt>'''if''' condition '''then''' <br/>{{keypress|Tab}} instructions <br/> «'''else''' <br/>{{keypress|Tab}} instructions»</tt>
| <tt>'''if''' condition '''then''' <br/>{{keypress|Tab}} instructions <br/> '''elif''' condition '''then''' <br/>{{keypress|Tab}} instructions <br/> ... <br/> «'''else''' <br/>{{keypress|Tab}} instructions»</tt>
|- valign="top"
| Standard ML
| <tt>'''if''' condition '''then''' «'''('''»instructions «''')'''»<br/>'''else''' «'''('''» instructions «''')'''»</tt>
| <tt>'''if''' condition '''then''' «'''('''»instructions «''')'''»<br/>'''else if''' condition '''then''' «'''('''» instructions «''')'''»<br/>...<br/>'''else''' «'''('''» instructions «''')'''»</tt>
| <tt>'''case''' value '''of<dl><dd>'''pattern1''' <nowiki>=></nowiki> '''expression'''<br/> <nowiki>|</nowiki> '''pattern2''' => '''expression<br/> ...<br/> «'''<nowiki>| _ =></nowiki> '''expression»{{ref|pattern matching|[b]}}</dd></dl></tt>
|- valign="top"
| Haskell (GHC)
| <tt>'''if''' condition '''then''' expression '''else''' expression</tt><br/>or<br/><tt>'''when''' condition '''(do''' instructions''')'''</tt><br/>or<br/><tt>'''unless''' notcondition '''(do''' instructions''')'''</tt>
| <tt>result '''<nowiki>|</nowiki>''' condition '''=''' expression <dl><dd>'''<nowiki>|</nowiki>''' condition '''=''' expression <br/>'''<nowiki>|</nowiki> otherwise =''' expression</dd></dl></tt>
| <tt>'''case''' value '''of {<dl><dd>'''pattern1'''  <nowiki>-></nowiki> '''expression''';<br/>'''pattern2''' <nowiki>-></nowiki>'''expression''';'''<br/> ... <br/>«'''<nowiki>_ -></nowiki> '''expression»</dd></dl>'''}'''{{ref|pattern matching|[b]}}</tt>
|- valign="top"
| Bash shell
| <poem><tt>'''if''' condition-command; '''then'''
{{space|4}}expression 
«'''else''' 
{{space|4}}expression»
'''fi'''</tt></poem>
| <poem><tt>'''if''' condition-command; '''then'''
{{space|4}}expression 
'''elif''' condition-command; '''then'''
{{space|4}}expression 
«'''else''' 
{{space|4}}expression»
'''fi'''</tt></poem>
| <poem><tt>'''case''' "$variable" '''in'''
"$condition1" )
{{space|4}}command...
;;
"$condition2" )
{{space|4}}command...
;;
'''esac'''</tt></poem>
| 
|- valign="top"
| rowspan=5| CoffeeScript
| <tt>'''if''' condition '''then''' expression «'''else''' expression»</tt>
| <tt>'''if''' condition '''then''' expression '''else if''' condition '''then''' expression «'''else''' expression»</tt>
| rowspan=2| <tt>'''switch''' expression <dl><dd>'''when''' condition '''then''' expression</dd></dl> <dl><dd>'''else''' expression</dd></dl></tt>
| rowspan=5| ''All conditions are expressions''
|- valign="top"
| <tt>'''if''' condition <dl><dd>expression</dd></dl> «'''else''' <dl><dd>expression»</dd></dl></tt>
| <tt>'''if''' condition <dl><dd>expression</dd></dl> '''else if''' condition <dl><dd>expression</dd></dl> «'''else''' <dl><dd>expression»</dd></dl></tt>
|- valign="top"
| <tt>expression '''if''' condition</tt>
| rowspan=3| <tt>'''unless''' condition <dl><dd>expression</dd></dl> '''else unless''' condition <dl><dd>expression</dd></dl> «'''else''' <dl><dd>expression»</dd></dl></tt>
| rowspan=3| <tt>'''switch''' expression <dl><dd>'''when''' condition <dl><dd>expression</dd></dl> «'''else''' <dl><dd>expression»</dd></dl></dd></dl></tt>
|- valign="top"
| <tt>'''unless''' condition <dl><dd>expression</dd></dl> «'''else''' <dl><dd>expression»</dd></dl></tt>
|- valign="top"
| <tt>expression '''unless''' condition</tt>
|- valign="top"
| COBOL
| <tt>'''IF''' condition «'''THEN'''» <dl><dd> expression </dd></dl> «'''ELSE''' <dl><dd> expression»'''.''' </dd></dl></tt>{{ref|COBOL END-IF|[d]}}
| 
| <tt>'''EVALUATE''' expression «'''ALSO''' expression...» <dl><dd> '''WHEN''' case-or-condition «'''ALSO''' case-or-condition...» <dl><dd> expression </dd></dl></dd></dl> <dl><dd> ... </dd></dl> <dl><dd>«'''WHEN OTHER''' <dl><dd> expression» </dd></dl></dd></dl> '''END-EVALUATE'''</tt>
|
|- valign="top"
!
! if
! else if
! [[switch statement|select case]]
! [[Conditional (programming)#If expressions|conditional expression]]
|}

{{note|python indent|a}} A single instruction can be written on the same line following the colon. Multiple instructions are grouped together in a [[block (programming)|block]] which starts on a newline (The indentation is required). The conditional expression syntax does not follow this rule.
<br/>
{{note|pattern matching|b}} This is [[pattern matching]] and is similar to select case but not the same. It is usually used to deconstruct [[algebraic data type]]s.
<br/>
{{note|pascal semicolon|c}} In languages of the Pascal family, the semicolon is not part of the statement. It is a separator between statements, not a terminator.
<br/>
{{note|COBOL END-IF|d}} <tt>'''END-IF'''</tt> may be used instead of the period at the end.

=== [[Control flow#Loops|Loop statements]] ===
{| class="wikitable"
|-
!
! [[while loop|while]]
! [[do while loop|do while]]
! [[for loop|for i = first to last]]
! [[foreach]]
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>'''while''' condition '''loop''' <dl><dd>statements</dd></dl> '''end loop'''</tt>
| <tt>'''loop''' <dl><dd>statements</dd><dd>'''exit when not''' condition</dd></dl> '''end loop'''</tt>
| <tt>'''for''' index '''in''' «'''reverse'''» [first '''..''' last <nowiki>|</nowiki> discrete_type] '''loop''' <dl><dd>statements</dd></dl> '''end loop'''</tt>
| <tt>'''for''' item '''of''' «'''reverse'''» iterator '''loop''' <dl><dd>statements</dd></dl> '''end loop''' <br><br> '''(for''' ['''all''' <nowiki>|</nowiki> '''some'''] ['''in''' <nowiki>|</nowiki> '''of'''] [first '''..''' last <nowiki>|</nowiki> discrete_type <nowiki>|</nowiki> iterator] '''=>''' predicate''')'''{{ref|Ada_quantifiers|[b]}}</tt>
|-
|rowspan=2| [[ALGOL 68]] ||colspan=3 align=center| <tt>«'''for''' index» «'''from''' first» «'''by''' increment» «'''to''' last» «'''while''' condition» '''do''' statements '''od'''</tt> ||rowspan=2| <tt>'''for''' ''key'' «'''to''' '''upb''' ''list''» '''do''' «'''typename''' ''val''=''list''[''key''];» statements '''od'''</tt>
|-
| <tt>«'''while''' condition»</tt>
&nbsp;&nbsp;&nbsp;&nbsp;'''do''' statements '''od'''
| <tt>«'''while''' statements; condition»</tt>
&nbsp;&nbsp;&nbsp;&nbsp;'''do''' statements '''od'''
| <tt>«'''for''' index» «'''from''' first» «'''by''' increment» «'''to''' last» '''do''' statements '''od'''</tt>
|-
| C (C99)
| rowspan=9|<tt>'''while ('''condition''')''' '''{''' instructions '''}'''</tt>
| rowspan=9|<tt>'''do {''' instructions '''} while ('''condition''')'''</tt>
| rowspan=5|<tt>'''for ('''«type» i '''=''' first''';''' i '''<nowiki><=</nowiki>''' last'''; ++'''i''') {''' instructions '''}'''</tt>
| {{n/a}}
|-
| Objective-C
| <tt>'''for ('''type item '''in''' set''') {''' instructions '''}'''</tt>
|-
| C++ (STL)
| <tt>«'''std::'''»'''for_each('''start''',''' end''',''' function''')'''</tt>
([[C++11]]) <tt>'''for ('''type item ''':''' set''') {''' instructions '''}'''</tt>
|-
| C#
| <tt>'''foreach ('''type item '''in''' set''') {''' instructions '''}'''</tt>
|-
| Java
| <tt>'''for ('''type item ''':''' set''') {''' instructions '''}'''</tt>
|-
| JavaScript
|<tt>'''for (var''' i '''=''' first''';''' i '''<nowiki><=</nowiki>''' last''';''' i'''++) {''' instructions '''}'''</tt>
|<tt>'''for (var''' index '''in''' set''') {''' instructions '''}''' <br/> or <br/> '''for each (var''' item '''in''' set''') {''' instructions '''}'''</tt> (JS 1.6+, deprecated<ref>https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for_each...in</ref>)<br/>or<br/><tt>'''for (var''' item '''of''' set''') {''' instructions '''}'''</tt> ([[EcmaScript 6]] proposal, supported in Firefox<ref>https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...of</ref>)
|-
| PHP
| <tt>'''foreach (range('''first''', '''last''') as $i) {''' instructions '''}''' or <br/> '''for ($i = '''first'''; $i <= '''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''foreach ('''set '''as''' item''') {''' instructions '''}''' <br/> or <br/> '''foreach ('''set '''as '''key''' =>''' item''') {''' instructions '''}'''</tt>
|-
| Windows PowerShell
| <tt>'''for ($i = '''first'''; $i -le '''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''foreach ('''item '''in''' set''') {''' instructions using item '''}'''</tt>
|-
| D
| <tt>'''foreach''' (i; '''first''' ... '''last''') '''{''' instructions '''}'''</tt>
| <tt>'''foreach''' («type» item; set) '''{''' instructions '''}'''</tt>
|-
| Go
| <tt>'''for '''condition''' {''' instructions '''}'''</tt>
| 
| <tt>'''for '''i ''':=''' first''';''' i '''<nowiki><=</nowiki>''' last'''; '''i'''++ {''' instructions '''}'''</tt>
| <tt>'''for '''key''', '''item''' := range '''set''' {''' instructions '''}'''</tt>
|-
| Swift
| <tt>'''while '''condition''' {''' instructions '''}'''</tt>
| <tt>'''repeat {''' instructions '''} while '''condition</tt> (2.x)<br /> <tt>'''do {''' instructions '''} while '''condition</tt> (1.x)
| <tt>'''for''' i '''=''' first '''...''' last {''' instructions '''} or <br/> <tt>'''for''' i '''=''' first '''..<''' last+1 {''' instructions '''} or <br/> <tt>'''for var''' i '''=''' first''';''' i '''<nowiki><=</nowiki>''' last'''; '''i'''++ {''' instructions '''}'''</tt>
| <tt>'''for '''item''' in '''set''' {''' instructions '''}'''</tt>
|-
| Perl
| <tt>'''while ('''condition''')''' '''{''' instructions '''}''' or <br/> '''until ('''notcondition''')''' '''{''' instructions '''}'''</tt>
| <tt>'''do {''' instructions '''} while ('''condition''')''' or <br/> '''do {''' instructions '''} until ('''notcondition''')'''</tt>
| <tt>'''for'''«'''each'''»''' '''«'''$i'''»''' ('''first''' .. '''last''') {''' instructions '''}''' or <br/> '''for ($i = '''first'''; $i <= '''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''for'''«'''each'''» «$item» '''('''set''') {''' instructions '''}'''</tt>
|-
| Perl 6
| <tt>'''while''' condition '''{''' instructions '''}''' or <br/> '''until''' notcondition '''{''' instructions '''}'''</tt>
| <tt>'''repeat {''' instructions '''} while '''condition or <br/> '''repeat {''' instructions '''} until''' notcondition</tt>
| <tt>'''for'''  first'''..'''last '''<nowiki>-></nowiki> $i  {''' instructions '''}''' or <br/> '''loop ($i = '''first'''; $i <nowiki><=</nowiki>'''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''for''' set« '''<nowiki>-></nowiki>''' $item»  '''{''' instructions '''}'''</tt>
|-
| Ruby
| <tt>'''while''' condition <dl><dd>instructions</dd></dl>'''end''' <br/> or <br/> '''until''' notcondition <dl><dd>instructions</dd></dl> '''end'''</tt>
| <tt>'''begin''' <dl><dd>instructions</dd></dl> '''end while''' condition <br/> or <br/> '''begin''' <dl><dd>instructions</dd></dl> '''end until''' notcondition</tt>
| <tt>'''for i in '''first'''..'''last <dl><dd>instructions</dd></dl> '''end''' <br/> or <br/> <tt>'''for i in '''first'''...'''last+1 <dl><dd>instructions</dd></dl> '''end''' <br/> or <br/> first'''.{{not a typo|upto}}('''last''') { <nowiki>|i|</nowiki> '''instructions '''}'''</tt>
| <tt>'''for''' item '''in''' set <dl><dd>instructions</dd></dl> '''end''' <br/> or <br/> set'''.each { <nowiki>|</nowiki>'''item'''<nowiki>|</nowiki> '''instructions '''}'''</tt>
|-
| Bash shell
| <tt>'''while''' condition ;'''do'''<dl><dd>instructions</dd></dl>'''done''' <br/> or <br/> '''until''' notcondition ;'''do'''<dl><dd>instructions</dd></dl> '''done'''</tt>
| {{n/a}}
| <tt>'''for (('''i '''=''' first''';''' i '''<nowiki><=</nowiki>''' last'''; ++'''i''')) ; do'''
<dl><dd>instructions</dd></dl>
'''done'''
</tt>
| <tt>'''for''' item '''in''' set ;'''do'''<dl><dd>instructions</dd></dl> '''done'''</tt>
|-
| Scala
| <tt>'''while ('''condition''')''' '''{''' instructions '''}'''</tt>
| <tt>'''do {''' instructions '''} while ('''condition''')'''</tt>
| <tt>'''for ('''i '''<nowiki><-</nowiki>''' first '''to''' last «'''by 1'''»''') {''' instructions '''}'''<br/>or<br/>first '''to''' last «'''by 1'''» '''foreach ('''i '''<nowiki>=></nowiki> {''' instructions '''})'''</tt>
| <tt>'''for ('''item '''<nowiki><-</nowiki>''' set''') {''' instructions '''}'''<br/>or<br/>set '''foreach ('''item '''=> {''' instructions '''})'''</tt>
|-
| Smalltalk
| <tt>conditionBlock '''whileTrue:''' <dl><dd>loopBlock</dd></dl></tt>
| <tt>loopBlock '''doWhile:''' <dl><dd>conditionBlock</dd></dl></tt>
| <tt>first '''to:''' last '''do:''' <dl><dd>loopBlock</dd></dl></tt>
| <tt>collection '''do:''' <dl><dd>loopBlock</dd></dl></tt>
|-
| Common Lisp
| <tt>'''(loop<dl><dd>while '''condition'''</dd><dd>do</dd><dd>'''instructions''')'''</dd></dl> or <br/> '''(do () ('''notcondition''')<dl><dd>'''instructions''')'''</dd></dl></tt>
| <tt>'''(loop<dl><dd>do</dd><dd>'''instructions'''</dd><dd>while '''condition''')'''</dd></dl></tt>
| <tt>'''(loop<dl><dd>for i from '''first''' to '''last''' «by 1»</dd><dd>do</dd><dd>'''instructions''')'''</dd></dl> or <br/> '''(dotimes (i N)'''<dl><dd>instructions''')'''</dd></dl> or<br/> '''(do ((i '''first''' (1+ i))) ((<nowiki>>=</nowiki> i '''last'''))<dl><dd>'''instructions''')'''</dd></dl></tt>
| <tt>'''(loop<dl><dd>for '''item''' in '''set'''</dd><dd>do</dd><dd>'''instructions''')'''</dd></dl> or <br/> '''(dolist ('''item set''')<dl><dd>'''instructions''')'''</dd></dl> or <br/>'''(mapc '''function list''')''' or <br/> '''(map <nowiki>'</nowiki>'''type function sequence''')'''</tt>
|-
| Scheme
| <tt>'''(do () ('''notcondition''') '''instructions''')''' or <br/> '''(let loop () (if '''condition''' (begin '''instructions''' (loop))))'''</tt>
| <tt>'''(let loop () ('''instructions''' (if '''condition''' (loop))))'''</tt>
| <tt>'''(do ((i '''first''' (+ i 1))) ((<nowiki>>=</nowiki> i '''last''')) '''instructions''')''' or <br/> '''(let loop ((i '''first''')) (if (< i '''last''') (begin '''instructions''' (loop (+ i 1)))))'''</tt>
| <tt>'''(for-each (lambda ('''item''') '''instructions''') '''list''')'''</tt>
|-
| ISLISP
| <tt>'''(while '''condition''' '''instructions''')'''</tt>
| <tt>'''(tagbody loop''' instructions '''(if''' condition '''(go loop))'''</tt>
| <tt>'''(for ((i '''first''' (+ i 1))) ((<nowiki>>=</nowiki> i '''last''')) '''instructions''')'''</tt>
| <tt>'''(mapc (lambda ('''item''') '''instructions''') '''list''')'''</tt>
|-
| Pascal
| <tt>'''while''' condition '''do begin''' <dl><dd>instructions</dd></dl> '''end'''</tt>
| <tt>'''repeat''' <dl><dd>instructions</dd></dl> '''until''' notcondition''';'''</tt>
| <tt>'''for''' i ''':=''' first «'''step 1'''» '''to''' last '''do begin''' <dl><dd>instructions</dd></dl> '''end;'''{{ref|step|[a]}}</tt>
| <tt>'''for''' item '''in''' set '''do''' ...</tt>
|-
| Visual Basic
| rowspan=2| <tt>'''Do While''' condition <dl><dd>instructions</dd></dl>'''Loop''' <br/> or <br/>'''Do Until''' notcondition <dl><dd>instructions</dd></dl>'''Loop'''</tt>
| rowspan=2| <tt>'''Do''' <dl><dd>instructions</dd></dl> '''Loop While''' condition <br/> or <br/>'''Do''' <dl><dd>instructions</dd></dl> '''Loop Until''' notcondition</tt>
| <tt>'''For''' i '''=''' first '''To''' last «'''Step 1'''» <dl><dd>instructions</dd></dl> '''Next i'''</tt>
| <tt>'''For Each''' item '''In''' set <dl><dd>instructions</dd></dl> '''Next''' item</tt>
|-
| Visual Basic .NET
| rowspan=2| <tt>'''For i '''«'''As '''type» '''=''' first '''To''' last «'''Step 1'''» <dl><dd>instructions</dd></dl>'''Next i'''{{ref|step|[a]}}</tt>
| rowspan=2| <tt>'''For Each''' item '''As '''type''' In''' set <dl><dd>instructions</dd></dl> '''Next''' item</tt>
|-
| Xojo
| <tt>'''While''' condition <dl><dd>instructions</dd></dl>'''Wend'''</tt>
| <tt>'''Do Until''' notcondition <dl><dd>instructions</dd></dl>'''Loop''' <br/> or <br/>'''Do''' <dl><dd>instructions</dd></dl> '''Loop Until''' notcondition</tt>
|-
| Python
| <tt>'''while''' condition ''':''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions»</tt>
| {{n/a}}
| <tt>'''for i in range('''first''', '''last+1'''):''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions»</tt>(Python 3.x)<br/>
<tt>'''for i in xrange('''first''', '''last+1'''):''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}}instructions»</tt>(Python 2.x)
| <tt>'''for''' item '''in''' set''':''' <br/> {{keypress|Tab}} instructions <br/> «'''else:''' <br/> {{keypress|Tab}} instructions»</tt>
|-
| S-Lang
| <tt>'''while ('''condition''') {''' instructions '''}''' «'''then''' optional-block»</tt>
| <tt>'''do {''' instructions '''} while ('''condition''')''' «'''then''' optional-block»</tt>
| <tt>'''for (i = '''first'''; i <nowiki><=</nowiki> '''last'''; i++) {''' instructions '''}''' «'''then''' optional-block»</tt>
| <tt>'''foreach''' item'''('''set''')''' «'''using ('''what''')'''» '''{''' instructions '''}''' «'''then''' optional-block»</tt>
|-
| Fortran
| <tt>'''DO WHILE ('''condition''') <dl><dd> '''instructions'''</dd></dl> ENDDO'''</tt>
| <tt>'''DO <dl><dd> '''instructions''' <br/> IF ('''condition''') EXIT </dd></dl> ENDDO'''</tt>
| <tt>'''DO '''I''' = '''first''','''last''' <dl><dd> '''instructions''' </dd></dl> ENDDO'''</tt>
| {{n/a}}
|-
| Forth
| <tt>'''BEGIN '''« instructions » condition''' WHILE '''instructions''' REPEAT'''</tt>
| <tt>'''BEGIN ''' instructions condition''' UNTIL'''</tt>
| <tt>limit start''' DO '''instructions''' LOOP'''</tt>
| {{n/a}}
|-
| OCaml
| <tt>'''while''' condition '''do''' instructions '''done'''</tt>
| {{n/a}}
| <tt>'''for i = '''first''' to '''last''' do''' instructions '''done'''</tt>
| <tt>'''Array.iter (fun '''item''' <nowiki>-></nowiki> '''instructions''') '''array <br/> '''List.iter (fun '''item''' -> '''instructions''') '''list</tt>
|-
| F#
| <tt>'''while''' condition '''do''' <br/> {{keypress|Tab}} instructions</tt>
| {{n/a}}
| <tt>'''for i = '''first''' to '''last''' do''' <br/> {{keypress|Tab}} instructions</tt>
| <tt>'''for '''item''' in '''set''' do''' <br/> {{keypress|Tab}} instructions <br/> or <br/> '''Seq.iter (fun '''item''' -> '''instructions''') '''set</tt>
|-
| Standard ML
| <tt>'''while''' condition '''do (''' instructions ''')'''</tt>
| colspan=2 {{n/a}}
| <tt>'''Array.app (fn '''item''' <nowiki>=></nowiki> '''instructions''') '''array <br/> '''app (fn '''item''' => '''instructions''') '''list</tt>
|-
| Haskell (GHC)
| colspan=2 {{n/a}}
| <tt>'''Control.Monad.forM_ ['''first'''..'''last'''] (\i <nowiki>-></nowiki> do '''instructions''')'''</tt>
| <tt>'''Control.Monad.forM_ '''list '''(\item <nowiki>-></nowiki> do '''instructions''')'''</tt>
|-
| Eiffel
| colspan=4| <tt>'''from''' <dl><dd>setup</dd></dl> '''until''' <dl><dd>condition</dd></dl> '''loop''' <dl><dd>instructions</dd></dl> '''end'''</tt>
|-
| rowspan=6| CoffeeScript
| <tt>'''while''' condition <dl><dd>expression</dd></dl></tt>
| rowspan=6 {{n/a}}
| rowspan=4| <tt>'''for''' i '''in''' [first..last] <dl><dd>expression</dd></dl></tt>
| rowspan=4| <tt>'''for''' item '''in''' set <dl><dd>expression</dd></dl></tt>
|-
| <tt>expression '''while''' condition</tt>
|-
| <tt>'''while''' condition '''then''' expression</tt>
|-
| <tt>'''until''' condition <dl><dd>expression</dd></dl></tt>
|-
| <tt>expression '''until''' condition</tt>
| <tt>'''for''' i '''in''' [first..last] '''then''' expression</tt>
| <tt>'''for''' item '''in''' set '''then''' expression</tt>
|-
| <tt>'''until''' condition '''then''' expression</tt>
| <tt>expression '''for''' i '''in''' [first..last]</tt>
| <tt>expression '''for''' item '''in''' set</tt>
|-
| rowspan=2 | COBOL
| <tt>'''PERFORM''' procedure-1 «'''THROUGH''' procedure-2» ««'''WITH'''» '''TEST BEFORE'''» '''UNTIL''' condition{{ref|COBOL THRU|[c]}}</tt>
| <tt>'''PERFORM''' procedure-1 «'''THROUGH''' procedure-2» «'''WITH'''» '''TEST AFTER UNTIL''' condition{{ref|COBOL THRU|[c]}}</tt>
| <tt>'''PERFORM''' procedure-1 «'''THROUGH''' procedure-2» '''VARYING''' i '''FROM''' first '''BY''' increment '''UNTIL''' i '''>''' last{{ref|COBOL GREATER THAN|[d]}}</tt>
| rowspan=2 {{n/a}}
|-
| <tt>'''PERFORM''' ««'''WITH'''» '''TEST BEFORE'''» '''UNTIL''' condition <dl><dd> expression </dd></dl> '''END-PERFORM'''</tt>
| <tt>'''PERFORM''' «'''WITH'''» '''TEST AFTER UNTIL''' condition <dl><dd> expression </dd></dl> '''END-PERFORM'''</tt>
| <tt>'''PERFORM VARYING''' i '''FROM''' first '''BY''' increment '''UNTIL''' i '''>''' last <dl><dd> expression </dd></dl> '''END-PERFORM'''{{ref|COBOL GREATER THAN|[d]}}</tt>
|}
{{note|step|a}} "<tt>'''step'''</tt> n" is used to change the loop interval. If "<tt>'''step'''</tt>" is omitted, then the loop interval is 1.

{{note|Ada_quantifiers|b}} This implements the universal quantifier ("for all" or "∀") as well as the existential quantifier ("there exists" or "∃").

{{note|COBOL THRU|c}} <tt>'''THRU'''</tt> may be used instead of <tt>'''THROUGH'''</tt>.

{{note|COBOL GREATER THAN|d}} <tt>«'''IS'''» '''GREATER''' «'''THAN'''»</tt> may be used instead of <tt>'''>'''</tt>.

=== [[Exception handling|Exceptions]] ===
{{further|Exception handling syntax}}
{| class="wikitable"
|-
!
! throw
! handler
! assertion
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>'''raise''' exception_name «'''with''' string_expression»</tt>
| <tt>'''begin'''<dl><dd>statements</dd></dl>'''exception'''<dl><dd>'''when''' exception_list<sub>1</sub> '''<nowiki>=></nowiki>''' statements;</dd><dd>'''when''' exception_list<sub>2</sub> '''<nowiki>=></nowiki>''' statements;</dd></dl>...<br><dl><dd>«'''when others <nowiki>=></nowiki>''' statements;»</dd></dl>'''end'''{{ref|Ada_uncaught_exceptions|[b]}}</tt>
| <tt>'''pragma Assert ('''«'''Check <nowiki>=></nowiki>'''» boolean_expression ««'''Message =>'''» string_expression»''')'''<br><br>[function <nowiki>|</nowiki> procedure <nowiki>|</nowiki> entry] '''with'''<dl><dd>'''Pre <nowiki>=></nowiki>''' boolean_expression</dd><dd>'''Post <nowiki>=></nowiki>''' boolean_expression</dd></dl><br>any_type '''with Type_Invariant <nowiki>=></nowiki>''' boolean_expression</tt>
|-
| C (C99)
| <tt>'''[[longjmp]]('''state''',''' exception''');'''</tt>
| <tt>'''switch ([[setjmp]]('''state''')) { case 0: '''instructions''' break; case '''exception''': '''instructions''' ... }'''</tt>
| rowspan=2|<tt>'''assert('''condition''');'''</tt>
|-
| C++
| rowspan=8|<tt>'''throw''' exception''';'''</tt>
| <tt>'''try { '''instructions''' } catch''' «'''('''exception''')'''» '''{ '''instructions''' }''' ...</tt>
|-
| C#
| <tt>'''try { '''instructions''' } catch''' «'''('''exception''')'''» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''Debug.Assert('''condition''');'''</tt>
|-
| Java
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''assert '''condition''';'''</tt>
|-
| JavaScript
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' «'''finally { '''instructions''' }'''»</tt>
| {{dunno}}
|-
| D
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''assert('''condition''');'''</tt>
|-
| PHP
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' «'''finally { '''instructions''' }'''»</tt>
| <tt>'''assert('''condition''');'''</tt>
|-
| S-Lang
| <tt>'''try { '''instructions''' } catch''' «exception» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| {{dunno}}
|-
| Windows PowerShell
| <tt>'''trap''' «'''['''exception''']'''» '''{ '''instructions''' }''' ... instructions or '''try { '''instructions''' } catch''' «'''['''exception''']'''» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''[Debug]::Assert('''condition''')'''</tt>
|-
| Objective-C
| <tt>'''@throw''' exception''';'''</tt>
| <tt>'''@try { '''instructions''' } @catch ('''exception''') { '''instructions''' }''' ... «'''@finally { '''instructions''' }'''»</tt>
| <tt>'''NSAssert('''condition''', '''description''');'''</tt>
|-
| Swift
| <tt>'''throw''' exception</tt> (2.x)
| <tt>'''do { try '''expression''' ... '''instructions''' } catch '''exception''' { '''instructions''' }''' ...</tt> (2.x)
| <tt>'''assert('''condition'''«, '''description'''»)'''</tt>
|-
| Perl
| rowspan=2| <tt>'''die''' exception''';'''</tt>
| <tt>'''eval { '''instructions''' }; if ($@) { '''instructions''' }'''</tt>
| {{dunno}}
|-
| Perl 6
| <tt>'''try { '''instructions''' CATCH { when '''exception''' { '''instructions''' } '''...'''}}'''</tt>
| {{dunno}}
|-
| Ruby
| <tt>'''raise''' exception</tt>
| <tt>'''begin''' <dl><dd>instructions</dd></dl> '''rescue''' exception <dl><dd>instructions</dd></dl>... <br/> «'''else''' <dl><dd>instructions»</dd></dl> «'''ensure''' <dl><dd>instructions»</dd></dl> '''end'''</tt>
|
|-
| Smalltalk
| <tt>exception '''raise'''</tt>
| <tt>instructionBlock '''on:''' exception '''do:''' handlerBlock</tt>
| <tt>'''assert:''' conditionBlock</tt>
|-
| Common Lisp
| <tt>'''(error '''"exception"''')''' or <br/> '''(error (make-condition<dl><dd>'''type</dd><dd>arguments'''))'''</dd></dl></tt>
| <tt>'''(handler-case<dl><dd>(progn '''instructions''')</dd><dd>('''exception instructions''')</dd><dd>'''...''')'''</dd></dl> or <br/>'''(handler-bind<dl><dd>('''condition <dl><dd>'''(lambda</dd><dd>'''instructions</dd><dd>«'''invoke-restart''' restart args»'''))'''</dd></dl>...''')'''{{ref|a|[a]}}</dd></dl></tt>
| <tt>'''(assert '''condition''')''' or <br/>'''(assert '''condition<dl><dd>«'''('''place''')'''</dd><dd>«error»»''')'''</dd></dl> or <br/>'''(check-type '''var type''')'''</tt>
|-
| Scheme (R<sup>6</sup>RS)
| <tt>'''(raise '''exception''')'''</tt>
| <tt>'''(guard (con ('''condition''' '''instructions''') '''...''') '''instructions''')'''</tt>
| {{dunno}}
|-
| ISLISP
| <tt>'''(error '''"error-string" objects''')''' or <br/> '''(signal-condition '''condition continuable''')'''</tt>
| <tt>'''(with-handler<dl><dd>'''handler form*''')'''</tt>
| {{dunno}}
|-
| Pascal
| <tt>'''raise''' Exception.Create()</tt>
| <tt>'''try''' Except '''on''' E: exception '''do begin ''' instructions ''' end; end;'''</tt>
| {{dunno}}
|-
| Visual Basic
| <tt>'''Err.Raise''' ERRORNUMBER</tt>
| <tt>'''With New '''Try''': On Error Resume Next''' <dl><dd>OneInstruction</dd></dl> .Catch''': On Error GoTo 0: Select Case '''.Number <dl><dd>'''Case''' ERRORNUMBER</dd></dl> <dl><dd><dl><dd>instructions</dd></dl></dd></dl> '''End Select: End With'''
<source lang="vb" enclose="div">
'*** Try class ***
Private mstrDescription As String
Private mlngNumber As Long
Public Sub Catch()

mstrDescription = Err.Description

mlngNumber = Err.Number

End Sub
Public Property Get Number() As Long

Number = mlngNumber

End Property
Public Property Get Description() As String

Description = mstrDescription
End Property
</source><ref>https://sites.google.com/site/truetryforvisualbasic/</ref>
| <tt>'''Debug.Assert''' condition</tt>
|-
| Visual Basic .NET
| <tt>'''Throw''' exception</tt>
| <tt>'''Try''' <dl><dd>instructions</dd></dl> '''Catch''' «exception» «'''When''' condition» <dl><dd>instructions</dd></dl> ... <br/> «'''Finally''' <dl><dd>instructions»</dd></dl> '''End Try'''</tt>
| <tt>'''Debug.Assert('''condition''')'''</tt>
|-
| Xojo
| <tt>'''Raise''' exception</tt>
| <tt>'''Try''' <dl><dd>instructions</dd></dl> '''Catch''' «exception»<dl><dd>instructions</dd></dl> ... <br/> «'''Finally''' <dl><dd>instructions»</dd></dl> '''End Try'''</tt>
| {{n/a}}
|-
| Python
| <tt>'''raise''' exception</tt>
| <tt>'''try:''' <br/> {{keypress|Tab}} instructions <br/> '''except''' «exception»''':''' <br/> {{keypress|Tab}} instructions <br/> ... <br/> «'''else:''' <br/> {{keypress|Tab}} instructions» <br/> «'''finally:''' <br/> {{keypress|Tab}} instructions»</tt>
| <tt>'''assert '''condition</tt>
|-
| Fortran
| colspan=3 {{n/a}}
|-
| Forth
| <tt>code''' THROW'''</tt>
| <tt>xt''' CATCH''' ( code or 0 )</tt>
| {{n/a}}
|-
| OCaml
| rowspan=2| <tt>'''raise''' exception</tt>
| <tt>'''try''' expression '''with''' pattern '''->''' expression ...</tt>
| rowspan=2| <tt>'''assert''' condition</tt>
|-
| F#
| <tt>'''try''' expression '''with''' pattern '''->''' expression ... <br/> or <br/>'''try''' expression '''finally''' expression</tt>
|-
| Standard ML
| <tt>'''raise''' exception «arg»</tt>
| <tt>expression '''handle''' pattern '''=>''' expression ...</tt>
| 
|-
| Haskell (GHC)
| <tt>'''throw''' exception <br/> ''or'' <br/> '''throwError''' expression</tt>
| <tt>'''catch''' tryExpression catchExpression <br/> ''or'' <br/> '''catchError''' tryExpression catchExpression</tt>
| <tt>'''assert''' condition expression</tt>
|-
| COBOL
| <tt>'''RAISE''' «'''EXCEPTION'''» exception</tt>
| <tt>'''USE''' «'''AFTER'''» '''EXCEPTION OBJECT''' class-name'''.''' or<br/>
'''USE''' «'''AFTER'''» '''EO''' class-name'''.''' or<br/>
'''USE''' «'''AFTER'''» '''EXCEPTION CONDITION''' exception-name «'''FILE''' file-name»'''.''' or<br/>
'''USE''' «'''AFTER'''» '''EC''' exception-name «'''FILE''' file-name»'''.'''</tt>
| {{n/a}}
|}

{{note|common lisp restarts|a}} Common Lisp allows <code>with-simple-restart</code>, <code>restart-case</code> and <code>restart-bind</code> to define restarts for use with <code>invoke-restart</code>.  Unhandled conditions may cause the implementation to show a restarts menu to the user before unwinding the stack.

{{note|Ada_uncaught_exceptions|b}} Uncaught exceptions are propagated to the innermost dynamically enclosing execution. Exceptions are not propagated across tasks (unless these tasks are currently synchronised in a rendezvous).

=== Other control flow statements ===
{| class="wikitable"
|-
!
! exit block(break)
! continue
! [[Label (programming language)|label]]
! branch ([[goto]])
! return value from generator
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>'''exit''' «loop_name» «'''when''' condition»</tt>
| {{n/a}}
| <tt>label''':'''</tt>
| <tt>'''goto''' label</tt>
|  {{n/a}}
|-
| ALGOL 68
| <tt>value '''exit''';</tt> ...
| <tt>'''do''' statements; '''skip exit'''; label: statements '''od'''</tt>
| <tt>label:</tt> ...
| <tt>'''go to''' label; ...<br>
'''goto''' label; ...<br>
label; ...</tt>
| <tt>''yield''(''value'')</tt>
([[Callback (computer science)|Callback]])<ref>[http://rosettacode.org/wiki/Prime_decomposition#ALGOL_68 example]</ref>
|-
| C (C99)
| rowspan=5| <tt>'''break;'''</tt>
| rowspan=5| <tt>'''continue;'''</tt>
| rowspan=12| <tt>label''':'''</tt>
| rowspan=5| <tt>'''goto''' label''';'''</tt>
| rowspan=4 {{n/a}}
|-
| Objective-C
|-
| C++ (STL)
|-
| D
|-
| C#
| <tt>'''yield return''' value''';'''</tt>
|-
| Java
| rowspan=2| <tt>'''break''' «label»''';'''</tt>
| rowspan=2| <tt>'''continue''' «label»''';'''</tt>
| rowspan=2 {{n/a}}
|
|-
| JavaScript
| <tt>'''yield''' value«;»</tt>
|-
| PHP
| <tt>'''break''' «levels»''';'''</tt>
| <tt>'''continue''' «levels»''';'''</tt>
| rowspan=3| <tt>'''goto''' label''';'''</tt>
| <tt>'''yield''' «key <nowiki>=></nowiki>» value;</tt>
|-
| Perl
| rowspan=2| <tt>'''last''' «label»''';'''</tt>
| rowspan=2| <tt>'''next''' «label»''';'''</tt>
| 
|-
| Perl 6
| 
|-
| Go
| <tt>'''break''' «label»</tt>
| <tt>'''continue''' «label»</tt>
| <tt>'''goto''' label</tt>
| 
|-
| Swift
| <tt>'''break''' «label»</tt>
| <tt>'''continue''' «label»</tt>
| {{n/a}}
| 
|-
| Bash shell
| <tt>'''break''' «levels»</tt>
| <tt>'''continue''' «levels»</tt>
| {{n/a}}
| {{n/a}}

| {{n/a}}
|-
| Common Lisp
| <tt>'''(return)''' or <br/> '''(return-from '''block''')''' or <br/> '''(loop-finish)'''</tt>
| 
| <tt>'''(tagbody '''tag<dl><dd><dl><dd>...</dd><dd>tag</dd></dl>...''')'''</tt>
| <tt>'''(go '''tag''')'''</tt>
|
|-
| Scheme
| 
| 
|
| 
|
|-
| ISLISP
| <tt>'''(return-from '''block''')'''</tt>
| 
| <tt>'''(tagbody '''tag<dl><dd><dl><dd>...</dd><dd>tag</dd></dl>...''')'''</tt>
| <tt>'''(go '''tag''')'''</tt>
|
|-
| Pascal(ISO)
| colspan=2 {{n/a}}
| rowspan=2| <tt>label''':'''</tt>{{ref|Pascal's declarations|[a]}}
| rowspan=2| <tt>'''goto''' label''';'''</tt>
| rowspan=5 {{n/a}}
|-
| Pascal(FPC)
| <tt>'''break;'''</tt>
| <tt>'''continue;'''</tt>
|-
| Visual Basic
| rowspan=3| <tt>'''Exit''' block</tt>
| {{n/a}}
| rowspan=3| <tt>label''':'''</tt>
| rowspan=3| <tt>'''GoTo''' label</tt>
|-
| Visual Basic .NET 
| rowspan=2| <tt>'''Continue''' block</tt>
|-
| Xojo 
|-
| Python
| <tt>'''break'''</tt>
| <tt>'''continue'''</tt>
| colspan=2 {{n/a}}
| <tt>'''yield '''value</tt>
|-
| RPG IV
| <tt>'''LEAVE;'''</tt>
| <tt>'''ITER;'''</tt>
| 
| 
| 
|-
| S-Lang
| <tt>'''break;'''</tt>
| <tt>'''continue;'''</tt>
|
| 
|
|-
| Fortran
| <tt>'''EXIT'''</tt>
| <tt>'''CYCLE'''</tt>
| <tt>label</tt>{{ref|Fortran label|[b]}}
| <tt>'''GOTO''' label</tt>
| {{n/a}}
|-
| Ruby
| <tt>'''break'''</tt>
| <tt>'''next'''</tt>
| 
| 
| 
|-
| Windows PowerShell
| <tt>'''break''' «label»</tt>
| <tt>'''continue'''</tt>
|
|
|
|-
| OCaml
| rowspan=4 colspan=4 {{n/a}}
|
|-
| F#
| 
|-
| Standard ML
|
|-
| Haskell (GHC)
|
|-
| COBOL
| <tt>'''EXIT&nbsp;PERFORM''' or '''EXIT&nbsp;PARAGRAPH''' or '''EXIT&nbsp;SECTION''' or '''EXIT.'''
| <tt>'''EXIT PERFORM CYCLE'''</tt>
| <tt>label «'''SECTION'''»'''.'''
| <tt>'''GO TO''' label</tt>
| {{n/a}}
|-
| Ya
| <tt>'''break''' «from where»''';'''</tt> f.e.<br>
<tt>'''break for switch;'''
| <tt>'''continue''' «to where»''';'''</tt> f.e.<br>
<tt>'''continue for switch;'''
| <tt>''':'''label</tt>
| <tt>'''goto :'''label''';'''</tt>
| {{n/a}}
|}
{{note|Pascal's declarations|a}} Pascal has declaration blocks. See [[Comparison of programming languages (basic instructions)#Functions]].
<br/>{{note|Fortran label|b}} label must be a number between 1 and 99999.

== [[Subroutine|Functions]] ==
See [[Reflection (computer science)|reflection]] for calling and declaring functions by strings.
{| class="wikitable"
|- valign="top"
!
! calling a function
! basic/void function
! value-returning function
! required [[main function]]
|- valign="top"
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>''foo'' «(parameters)»</tt>
| <tt>'''procedure''' ''foo'' «(parameters)» '''is begin''' statements '''end''' foo</tt>
| <tt>'''function''' ''foo'' «(parameters)» '''return''' type '''is begin''' statements '''end''' foo</tt>
| {{n/a}}
|- valign="top"
| [[ALGOL 68]]
|<tt>''foo''«(parameters)»;</tt>
|<tt>'''proc''' ''foo'' = «(parameters)» [[void type|void]]: ( ''instructions'' );</tt>
|<tt>'''proc''' ''foo'' = «(parameters)» '''rettype''': ( ''instructions ...; retvalue'' );</tt>
| {{n/a}}
|- valign="top"
| C (C99)
| rowspan=9| <tt>'''foo('''«parameters»''')'''</tt>
| rowspan=6| <tt>'''[[void type|void]] foo('''«parameters»''') { '''instructions''' }'''</tt>
| rowspan=6| <tt>type '''foo('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
| rowspan=3| <tt>«global declarations» <br/> '''int main('''«'''int argc, char *argv[]'''»''') { <dl><dd>'''instructions'''</dd></dl> }'''</tt>
|- valign="top"
| Objective-C
|- valign="top"
| C++ (STL)
|- valign="top"
| C#
| <tt>'''static void Main('''«'''string[] args'''»''') { '''instructions''' }''' or<br/> '''static int Main('''«'''string[] args'''»''') { '''instructions''' }'''</tt>
|- valign="top"
| Java
| <tt>'''public static void main(String[] args) { '''instructions''' }''' or<br/> '''public static void main(String[[variadic function|...]] args) { '''instructions''' }'''</tt>
|- valign="top"
| D
| <tt>'''int main('''«'''char[][] args'''»''') { '''instructions'''}''' or<br /> '''int main('''«'''string[] args'''»''') { '''instructions'''}''' or<br /> '''void main('''«'''char[][] args'''»''') { '''instructions'''}''' or<br /> '''void main('''«'''string[] args'''»''') { '''instructions'''}'''</tt>
|- valign="top"
| JavaScript
| <tt>'''function foo('''«parameters»''') { '''instructions''' }''' or<br/> '''var foo = function ('''«parameters»''') {'''instructions''' }''' or<br/> '''var foo = new Function ('''«'''"'''parameter'''",''' ... ''',"'''last parameter'''"'''»''' "'''instructions'''");'''</tt>
| <tt>'''function foo('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
| {{n/a}}
|- valign="top"
| Go
| <tt>'''func foo('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''func foo('''«parameters»''') '''type''' { '''instructions ... '''return''' value''' }'''</tt>
| <tt>'''func main() { '''instructions''' }'''</tt>
|- valign="top"
| Swift
| <tt>'''func foo('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''func foo('''«parameters»''') -> '''type''' { '''instructions ... '''return''' value''' }'''</tt>
| {{n/a}}
|- valign="top"
| Common Lisp
| rowspan=3| <tt>'''(foo '''«parameters»''')'''</tt>
| <tt>'''([[defun]] foo ('''«parameters»''')'''<dl><dd>instructions''')'''</dd></dl> or <br/>'''(setf (symbol-function <nowiki>'</nowiki>'''symbol''')'''<dl><dd>lambda''')'''</dd></dl></tt>
| <tt>'''([[defun]] foo ('''«parameters»''')'''<dl><dd>...</dd><dd>value''')'''</dd></dl></tt>
| rowspan=3 {{n/a}}
|- valign="top"
| Scheme
| <tt>'''(define (foo '''parameters''')''' instructions''')''' or <br/> '''(define foo ([[anonymous function|lambda]] ('''parameters''')''' instructions'''))'''</tt>
| <tt>'''(define (foo '''parameters''')''' instructions... return_value''')''' or <br/> '''(define foo ([[anonymous function|lambda]] ('''parameters''')''' instructions... return_value'''))'''</tt>
|- valign="top"
| ISLISP
| <tt>'''([[defun]] foo ('''«parameters»''')'''<dl><dd>instructions''')'''</dd></dl></tt>
| <tt>'''([[defun]] foo ('''«parameters»''')'''<dl><dd>...</dd><dd>value''')'''</dd></dl></tt>
|- valign="top"
| Pascal
| <tt>'''foo'''«'''('''parameters''')'''»</tt>
| <tt>'''procedure foo'''«'''('''parameters''')'''»''';''' «'''forward;'''»{{ref|forward declaration|[a]}}<br/>
«'''label'''<dl><dd>label declarations»</dd></dl>
«'''const'''<dl><dd>constant declarations»</dd></dl>
«'''type'''<dl><dd>type declarations»</dd></dl>
«'''var'''<dl><dd>variable declarations»</dd></dl>
«local function declarations»<br/>'''begin'''<dl><dd>instructions</dd></dl>'''end;'''</tt>
| <tt>'''function foo'''«'''('''parameters''')'''»''': '''type'''; '''«'''forward;'''»{{ref|forward declaration|[a]}}<br/>
«'''label'''<dl><dd>label declarations»</dd></dl>
«'''const'''<dl><dd>constant declarations»</dd></dl>
«'''type'''<dl><dd>type declarations»</dd></dl>
«'''var'''<dl><dd>variable declarations»</dd></dl>
«local function declarations»<br/>'''begin'''<dl><dd> instructions'''; <br/> foo := '''value</dd></dl>'''end;'''</tt>
| <tt>'''program''' name''';'''<br/>
«'''label'''<dl><dd>label declarations»</dd></dl>
«'''const'''<dl><dd>constant declarations»</dd></dl>
«'''type'''<dl><dd>type declarations»</dd></dl>
«'''var'''<dl><dd>variable declarations»</dd></dl>
«function declarations»<br/>'''begin'''<dl><dd>instructions</dd></dl> '''end.'''</tt> <!--somewhat of a technicality-->
|- valign="top"
| Visual Basic
| rowspan=3| <tt>'''Foo('''«parameters»''')'''</tt>
| rowspan=3| <tt>'''Sub Foo('''«parameters»''') <dl><dd> '''instructions''' </dd></dl> End Sub'''</tt>
| <tt>'''Function Foo('''«parameters»''') As '''type <dl><dd>instructions<br/> '''Foo = '''value</dd></dl>'''End Function'''</tt>
| <tt>'''Sub Main()'''<dl><dd>instructions</dd></dl>'''End Sub'''</tt>
|- valign="top"
| Visual Basic .NET
| rowspan=2| <tt>'''Function Foo('''«parameters»''') As '''type <dl><dd>instructions<br/>'''Return '''value</dd></dl>'''End Function'''</tt>
| rowspan=2| <tt>'''Sub Main('''«'''ByVal CmdArgs() As String'''»''') <dl><dd>'''instructions'''</dd></dl> End Sub'''<br/>or<br/> '''Function Main('''«'''ByVal CmdArgs() As String'''»''') As Integer <dl><dd>'''instructions'''</dd></dl>End Function'''</tt>
|- valign="top"
| Xojo
|- valign="top"
| Python
| <tt>'''foo('''«parameters»''')'''</tt>
| <tt>'''def foo('''«parameters»'''):''' <br/> {{keypress|Tab}} instructions </tt>
| <tt>'''def foo('''«parameters»'''):''' <br/> {{keypress|Tab}} instructions <br/> {{keypress|Tab}} '''return''' value</tt>
| {{n/a}}
|- valign="top"
| S-Lang
| <tt>'''foo('''«parameters» «;qualifiers»''')'''</tt>
| <tt>'''define foo ('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''define foo ('''«parameters»''') { '''instructions ... '''return '''value'''; }'''</tt>
| <tt>'''public define slsh_main () { '''instructions''' }'''</tt>
|- valign="top"
| Fortran
| <tt>'''foo ('''«arguments»''') <br> CALL sub_foo ('''«arguments»''')'''{{ref|Fortran arguments|[c]}}</tt>
| <tt>'''SUBROUTINE sub_foo ('''«arguments»''') <dl><dd> '''instructions''' </dd></dl> END SUBROUTINE'''{{ref|Fortran arguments|[c]}}</tt>
| <tt>type''' FUNCTION foo ('''«arguments»''') <dl><dd> '''instructions''' <br/> ... <br/> foo '''= value''' </dd></dl> END FUNCTION'''{{ref|Fortran arguments|[c]}}</tt>
| <tt>'''PROGRAM '''main''' <dl><dd> '''instructions''' </dd></dl> END PROGRAM'''</tt>
|- valign="top"
| Forth
| <tt>«parameters»''' FOO'''</tt>
| <tt>''': FOO ''' « ''stack effect comment:'' '''( '''before '''-- )''' » ''' <dl><dd> '''instructions''' </dd></dl> ;'''</tt>
| <tt>''': FOO ''' « ''stack effect comment:'' '''( '''before '''--''' after ''')''' » ''' <dl><dd> '''instructions''' </dd></dl> ;'''</tt>
| {{n/a}}
|- valign="top"
| PHP
| <tt>'''foo('''«parameters»''')'''</tt>
| <tt>'''function foo('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''function foo('''«parameters»''') { '''instructions''' ... return '''value'''; }'''</tt>
| rowspan=4 {{n/a}}
|- valign="top"
| Perl
| <tt>'''foo('''«parameters»''')''' or <br/> '''&foo'''«'''('''parameters''')'''»</tt>
| <tt>'''sub foo { '''«'''my ('''parameters''') = @_;'''»''' '''instructions''' }'''</tt>
| <tt>'''sub foo { '''«'''my ('''parameters''') = @_;'''»''' '''instructions'''... '''«'''return'''»''' '''value'''; }'''</tt>
|- valign="top"
| Perl 6
| <tt>'''foo('''«parameters»''')''' or <br/> '''&foo'''«'''('''parameters''')'''»</tt>
| <tt>«'''multi''' »'''sub foo('''parameters''') { '''instructions''' }'''</tt>
| <tt>«'''our''' «type» »«'''multi''' »'''sub foo('''parameters''') { '''instructions'''... '''«'''return'''»''' '''value'''; }'''</tt>
|- valign="top"
| Ruby
| rowspan=2| <tt>'''foo'''«'''('''parameters''')'''»</tt>
| <tt>'''def foo'''«'''('''parameters''')'''» <dl><dd>instructions </dd></dl> '''end'''</tt>
| <tt>'''def foo'''«'''('''parameters''')'''» <dl><dd>instructions <br/> «'''return'''» value </dd></dl> '''end'''</tt>
|- valign="top"
| Scala
| <tt>'''def foo'''«'''('''parameters''')'''»«''': Unit ='''» '''{''' instructions '''}'''</tt>
| <tt>'''def foo'''«'''('''parameters''')'''»«''':''' type» '''= {''' instructions ... «'''return'''» value '''}'''</tt>
| <tt>'''def main(args: Array[String]) {''' instructions '''}'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''foo''' «parameters»</tt>
| <tt>'''function foo ''' { '''instructions''' };'''<br/>or<br/>'''function foo { '''«'''param('''parameters''')'''»''' '''instructions''' }'''</tt>
| <tt>'''function foo '''«'''('''parameters''')'''» ''' { '''instructions''' ''' … '''return '''value''' };''' or<br/>'''function foo { '''«'''param('''parameters''')'''» '''instructions''' …''' return '''value''' }'''</tt>
| rowspan=4 {{n/a}}
|- valign="top"
| rowspan=2|Bash shell
| rowspan=2|<tt>'''foo''' «parameters»</tt>
| <poem><tt>'''function foo {'''
{{space|4}}instructions
'''}'''
</tt>or<tt>
'''foo () {'''
{{space|4}}instructions
''' }'''</tt></poem>
| <poem><tt>'''function foo {'''
{{space|4}}instructions
{{space|4}}'''return''' «exit_code»
'''}'''
</tt>or<tt>
'''foo () {'''
{{space|4}}instructions
{{space|4}}'''return''' «exit_code»
''' }'''</tt></poem>
|- valign="top"
| colspan=2|
* parameters
** <tt>'''$'''n</tt> ('''$1''', '''$2''', '''$3''', ...)
** <tt>'''$@'''</tt> (all parameters)
** <tt>'''$#'''</tt> (the number of parameters)
** <tt>'''$0'''</tt> (this function name)
|- valign="top"
| OCaml
| rowspan=4| <tt>'''foo '''parameters</tt>
| rowspan=2| <tt>'''let''' «'''rec'''» '''foo''' parameters '''=''' instructions</tt>
| rowspan=2| <tt>'''let''' «'''rec'''» '''foo''' parameters '''=''' instructions... return_value</tt>
|- valign="top"
| F#
| <tt>'''[<EntryPoint>] let main args =''' instructions</tt>
|- valign="top"
| Standard ML
| <tt>'''fun foo''' parameters '''= (''' instructions ''')'''</tt>
| <tt>'''fun foo''' parameters '''= (''' instructions... return_value ''')'''</tt>
| 
|- valign="top"
| Haskell
| <tt>'''foo''' parameters '''= do'''<br/>{{keypress|Tab}} instructions</tt>
| <tt>'''foo''' parameters '''=''' return_value <br/> or <br/> '''foo''' parameters '''= do'''<br/>{{keypress|Tab}} instructions<br/>{{keypress|Tab}} '''return''' value</tt>
| <tt>«'''main :: IO ()'''» <br/> '''main = do''' instructions</tt>
|- valign="top"
| Eiffel
| <tt>'''foo ('''«parameters»''')'''</tt>
| <tt>'''foo ('''«parameters»''')'''<br/><dl><dd>'''require''' <dl><dd>preconditions</dd></dl> '''do''' <dl><dd>instructions</dd></dl> '''ensure''' <dl><dd>postconditions</dd></dl> '''end'''</dd></dl></tt>
| <tt>'''foo ('''«parameters»''')''': type<br/><dl><dd>'''require''' <dl><dd>preconditions</dd></dl> '''do''' <dl><dd>instructions</dd><dd>'''Result''' := value</dd></dl> '''ensure''' <dl><dd>postconditions</dd></dl> '''end'''</dd></dl></tt>
| {{ref|root class and feature|[b]}}
|- valign="top"
| rowspan=2| CoffeeScript
| <tt>'''foo()'''</tt>
| <tt>'''foo = <nowiki>-></nowiki>'''</tt>
| <tt>'''foo = <nowiki>-></nowiki>''' value</tt>
| rowspan=2 {{n/a}}
|- valign="top"
| <tt>'''foo''' parameters</tt>
| <tt>'''foo = <nowiki>() -></nowiki>'''</tt>
| <tt>'''foo = (''' parameters ''') <nowiki>-></nowiki>''' value</tt>
|- valign="top"
| rowspan=2 | COBOL
| <tt>'''CALL''' '''"'''foo'''"''' «'''USING''' parameters» <dl><dd> «exception-handling» </dd></dl> «'''END-CALL'''»</tt>{{ref|COBOL calling programs|[d]}}
| <tt>«'''IDENTIFICATION DIVISION.'''»<br/>
'''PROGRAM-ID.''' foo'''.'''<br/>
«other divisions...»<br/>
'''PROCEDURE DIVISION''' «'''USING''' parameters»'''.'''<br/>
<dl><dd> instructions'''.'''</dd></dl> </tt>
| rowspan=2 | <tt>«'''IDENTIFICATION DIVISION.'''»<br/>
'''PROGRAM-ID'''/'''FUNCTION-ID.''' foo'''.'''<br/>
«other divisions...»<br/>
'''DATA DIVISION.'''<br/>
«other sections...»<br/>
'''LINKAGE SECTION.'''<br/>
«parameter definitions...»<br/>
variable-to-return definition<br/>
«other sections...»<br/>
'''PROCEDURE DIVISION''' «'''USING''' parameters» '''RETURNING''' variable-to-return'''.'''<br/>
<dl><dd> instructions'''.'''</dd></dl></tt>
| rowspan=2 {{n/a}}
|-
|<tt>«'''FUNCTION'''» foo«(«parameters»)»</tt>
| {{n/a}}
|}
{{note|forward declaration|a}} Pascal requires "<tt>forward;</tt>" for [[forward declaration]]s.<br/>
{{note|root class and feature|b}} Eiffel allows the specification of an application's root class and feature.<br/>
{{note|Fortran arguments|c}} In Fortran, function/subroutine parameters are called arguments (since <tt>PARAMETER</tt> is a language keyword); the <tt>CALL</tt> keyword is required for subroutines.<br/>
{{note|COBOL calling programs|d}} Instead of using <tt>"foo"</tt>, a string variable may be used instead containing the same value.

== [[Type conversion]]s ==
Where ''string'' is a signed decimal number:
{| class="wikitable"
|-
! 
! string to integer
! string to long integer
! string to floating point
! integer to string
! floating point to string
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt> '''Integer'Value ('''string_expression''')'''</tt>
| <tt> '''Long_Integer'Value ('''string_expression''')'''</tt>
| <tt> '''Float'Value ('''string_expression''')'''</tt>
| <tt> '''Integer'Image ('''integer_expression''')'''</tt>
| <tt> '''Float'Image ('''float_expression''')'''</tt>
|-
| rowspan=3 | [[ALGOL 68]] with general, and then specific formats
| colspan=5 align=center| With prior declarations and association of: <tt>'''string''' buf := "12345678.9012e34 "; '''file''' proxy; associate(proxy, buf);</tt>
|-
| <source lang="algol68" enclose="none">get(proxy, ivar);</source>
| <source lang="algol68" enclose="none">get(proxy, livar);</source>
| <source lang="algol68" enclose="none">get(proxy, rvar);</source>
| <source lang="algol68" enclose="none">put(proxy, ival);</source>
| <source lang="algol68" enclose="none">put(proxy, rval);</source>
|-
| <source lang="algol68" enclose="none">getf(proxy, ($g$, ivar));</source><br/>orv
<source lang="algol68" enclose="none">getf(proxy, ($dddd$, ivar));</source>
| <source lang="algol68" enclose="none">getf(proxy, ($g$, livar));</source><br/>or<br/>
<source lang="algol68" enclose="none">getf(proxy, ($8d$, livar));</source>
| <source lang="algol68" enclose="none">getf(proxy, ($g$, rvar));</source><br/>or<br/>
<source lang="algol68" enclose="none">getf(proxy, ($8d.4dE2d$, rvar));</source>
| <source lang="algol68" enclose="none">putf(proxy, ($g$, ival));</source><br/>or<br/>
<source lang="algol68" enclose="none">putf(proxy, ($4d$, ival));</source>
| <source lang="algol68" enclose="none">putf(proxy, ($g(width, places, exp)$, rval));</source><br/>or<br/>
<source lang="algol68" enclose="none">putf(proxy, ($8d.4dE2d$, rval));</source><br/>etc.
|-
| C (C99)
| <tt> integer '''= [[atoi]]('''string''');'''</tt>
| <tt> long '''= [[atol (programming)|atol]]('''string''');'''</tt>
| <tt> float '''= [[atof]]('''string''');'''</tt>
| <tt> '''[[sprintf]]('''string''', "%i", '''integer''');'''</tt>
| <tt> '''[[sprintf]]('''string''', "%f", '''float''');'''</tt>
|-
| Objective-C
| <tt> integer '''= ['''string''' intValue];'''</tt>
| <tt> long '''= ['''string''' longLongValue];'''</tt>
| <tt> float '''= ['''string''' doubleValue];'''</tt>
| <tt> string '''= [NSString stringWithFormat<wbr/>:@"%i", '''integer'''];'''</tt>
| <tt> string '''= [NSString stringWithFormat<wbr/>:@"%f", '''float'''];'''</tt>
|-
| C++ (STL)
| colspan=3| <tt>«'''std::'''»'''istringstream('''string''') >> '''number;</tt>
| colspan=2| <tt>«'''std::'''»'''ostringstream '''o''';''' o''' << '''number'''; '''string '''= '''o'''.str();'''</tt>
|-
| C++11
| <tt> integer '''= «'''std::'''»stoi('''string''');'''</tt>
| <tt> long '''= «'''std::'''»stol('''string''');'''</tt>
| <tt> float '''= «'''std::'''»stof('''string''');''' 
double '''= «'''std::'''»stod('''string''');''' </tt>
| colspan=2| <tt>string '''= «'''std::'''»to_string('''number''');'''</tt>
|-
| C#
| <tt> integer '''= int.Parse<wbr/>('''string''');'''</tt>
| <tt> long '''= long.Parse<wbr/>('''string''');'''</tt>
| <tt> float '''= float.Parse<wbr/>('''string''');''' or<br/> double '''= double.Parse<wbr/>('''string''');'''</tt>
| colspan=2| <tt>string '''= '''number'''<wbr/>.ToString();'''</tt>
|-
| D
| <tt> integer '''= std.conv.to!int<wbr/>('''string''')'''</tt>
| <tt> long '''= std.conv.to!long<wbr/>('''string''')'''</tt>
| <tt> float '''= std.conv.to!float<wbr/>('''string''')''' or<br/> double '''= std.conv.to!double<wbr/>('''string''')'''</tt>
| colspan=2| <tt> string '''= std.conv.to!string<wbr/>('''number''')'''</tt>
|-
| Java
| <tt> integer '''= Integer.parseInt<wbr/>('''string''');'''</tt>
| <tt> long''' = Long.parseLong<wbr/>('''string''');'''</tt>
| <tt> float''' = Float.parseFloat<wbr/>('''string''');''' or<br/> double '''= Double.parseDouble<wbr/>('''string''');'''</tt>
| <tt> string''' = Integer.toString<wbr/>('''integer''');''' or<br/> string''' = String.valueOf<wbr/>('''integer''');'''</tt>
| <tt> string''' = Float.toString<wbr/>('''float''');''' or<br/> string''' = Double.toString<wbr/>('''double''');'''</tt>
|-
| <tt> JavaScript{{ref|JavaScript's technicalities|[a]}}</tt>
| colspan=2| <tt> integer '''= parseInt('''string''');'''</tt>
| <tt> float '''= parseFloat('''string''');''' or<br/> float''' = new Number ('''string''')''' or<br/> float''' = Number ('''string''')''' or<br/> float '''= +'''string</tt>
| colspan=2| <tt> string''' = '''number'''.toString ();''' or<br/> string '''= new String ('''number''');''' or<br/> string '''= String ('''number''');''' or<br/> string''' = '''number'''+"";'''</tt>
|-
| Go
| <tt> integer''',''' error '''= strconv.Atoi('''string''')''' or<br /> integer''',''' error '''= strconv.ParseInt<wbr/>('''string''', 10, 0)'''</tt>
| <tt> long''',''' error  '''= strconv.ParseInt<wbr/>('''string''', 10, 64)'''</tt>
| <tt> float''',''' error  '''= strconv.ParseFloat<wbr/>('''string''', 64)'''</tt>
| <tt> string '''= strconv.Itoa('''integer''')''' or<br/> string '''= strconv.FormatInt<wbr/>('''integer''', 10)''' or<br/> string '''= fmt.Sprint('''integer''')'''</tt>
| <tt> string '''= strconv.FormatFloat<wbr/>('''float''')''' or<br/> string '''= fmt.Sprint<wbr/>('''float''')'''</tt>
|-
| Common Lisp
| colspan=2| <tt>'''(setf''' integer '''(parse-integer '''string'''))'''</tt>
| <tt> '''(setf''' float '''(read-from-string '''string'''))'''</tt>
| colspan=2| <tt>'''(setf''' string '''(princ-to-string '''number'''))'''</tt>
|-
| Scheme
| colspan=3| <tt>'''(define''' number '''(string->number '''string'''))'''</tt>
| colspan=2| <tt>'''(define''' string '''(number->string '''number'''))'''</tt>
|-
| ISLISP
| colspan=2| <tt>'''(setf''' integer '''(convert '''string''' &lt;integer&gt;))'''</tt>
| <tt> '''(setf''' float '''(convert '''string''' &lt;float&gt;))'''</tt>
| colspan=2| <tt>'''(setf''' string '''(convert '''number''' &lt;string&gt;))'''</tt>
|-
| Pascal <!-- Pascal or Delphi? -->
| <tt> integer ''':= StrToInt('''string''');'''</tt>
| 
| <tt> float ''':= StrToFloat('''string''');'''</tt>
| <tt> string ''':= IntToStr('''integer''');'''</tt>
| <tt> string ''':= FloatToStr('''float''');'''</tt>
|-
| Visual Basic
| rowspan=2| <tt>integer''' = CInt('''string''')'''</tt>
| rowspan=2| <tt>long''' = CLng('''string''')'''</tt>
| rowspan=2| <tt>float''' = CSng('''string''')''' or<br/> double''' = CDbl('''string''')'''</tt>
| <tt> rowspan=2 colspan=2|string''' = CStr('''number''')'''</tt>
|-
| Visual Basic .NET
|-
| Xojo
| <tt>integer''' = Val('''string''')'''</tt>
| <tt>long''' = Val('''string''')'''</tt>
| <tt>double''' = Val('''string''')''' or<br/> double''' = CDbl('''string''')'''</tt>
| colspan=2| <tt> string''' = CStr('''number''')''' or<br/> string''' = Str('''number''')</tt>
|-
| Python
| <tt> integer''' = int('''string''')'''</tt>
| <tt> long''' = long('''string''')'''</tt>
| <tt> float''' = float('''string''')'''</tt>
| colspan=2| <tt>string''' = str('''number''')'''</tt>
|-
| S-Lang
| <tt> integer''' = [[atoi]]('''string''');'''</tt>
| <tt> long''' = [[atol (programming)|atol]]('''string''');'''</tt>
| <tt> float''' = [[atof]]('''string''');'''</tt>
| colspan=2| <tt>string''' = string('''number''');'''</tt>
|-
| Fortran
| colspan=3| <tt>'''READ('''string''','''format''') '''number</tt>
| colspan=2| <tt>'''WRITE('''string''','''format''') '''number</tt>
|-
| PHP
| colspan=2| <tt> integer '''= intval('''string''');''' or<br/> integer '''= (int)'''string''';'''</tt>
| <tt> float '''= floatval('''string''');''' or<br/> float '''= (float)'''string''';'''</tt>
| colspan=2| <tt> string '''= "'''number'''";''' or<br/> string '''= strval('''number''');''' or<br/> string '''= (string)'''number''';'''</tt>
|-
| Perl{{ref|Perl's technicalities|[b]}}
| colspan=3| <tt> number '''= 0 +''' string;</tt>
| colspan=2| <tt> string '''= "'''number'''";'''</tt>
|-
| Perl 6
| colspan=3| <tt> number '''= +'''string;</tt>
| colspan=2| <tt> string '''= ~'''number''';'''</tt>
|-
| Ruby
| colspan=2| <tt> integer '''=''' string'''.to_i''' or<br/>integer '''= Integer('''string''')'''</tt>
| <tt> float '''=''' string'''.to_f''' or<br/>float '''= Float('''string''')'''</tt>
| colspan=2| <tt> string '''=''' number'''.to_s'''</tt>
|-
| Scala
| <tt> integer '''=''' string'''.toInt'''</tt>
| <tt> long '''=''' string'''.toLong'''</tt>
| <tt> float '''=''' string'''.toFloat''' or<br/> double '''=''' string'''.toDouble'''</tt>
| colspan=2| <tt>string '''= '''number'''.toString'''</tt>
|-
| Windows PowerShell
| <tt> integer''' = [int]'''string</tt>
| <tt> long''' = [long]'''string</tt>
| <tt> float''' = [float]'''string</tt>
| colspan=2| <tt>string''' = [string]'''number''';''' or<br/>string''' = "'''number'''";''' or<br/>string''' = ('''number''').ToString()'''</tt>
|-
| OCaml
| <tt> '''let''' integer''' = int_<wbr/>of_string '''string</tt>
| 
| <tt> '''let''' float''' = float_<wbr/>of_string '''string</tt>
| <tt> '''let''' string''' = string_<wbr/>of_int '''integer</tt>
| <tt> '''let''' string''' = string_<wbr/>of_float '''float</tt>
|-
| F#
| <tt> '''let''' integer''' = int '''string</tt>
| <tt> '''let''' integer''' = int64 '''string</tt>
| <tt> '''let''' float''' = float '''string</tt>
| colspan=2| <tt> '''let''' string''' = string '''number</tt>
|-
| Standard ML
| <tt> '''val''' integer''' = Int<wbr/>.fromString '''string</tt>
| 
| <tt> '''val''' float''' = Real<wbr/>.fromString '''string</tt>
| <tt> '''val''' string''' = Int<wbr/>.toString '''integer</tt>
| <tt> '''val''' string''' = Real<wbr/>.toString '''float</tt>
|-
| Haskell (GHC)
| colspan=3| <tt> number '''= read '''string</tt>
| colspan=2| <tt> string '''= show '''number</tt>
|-
| COBOL
| colspan=3 | <code>'''MOVE''' «'''FUNCTION'''» '''NUMVAL('''string''')'''{{ref|COBOL's NUMVAL alternatives|[c]}} '''TO''' number</code>
| colspan=2 | <code>'''MOVE''' number '''TO''' numeric-edited</code>
|-
|}
{{note|JavaScript's technicalities|a}} JavaScript only uses floating point numbers so there are some technicalities.<ref name="Javascript numbers"/>
<br/>{{note|Perl's technicalities|b}} Perl doesn't have separate types. Strings and numbers are interchangeable.
<br/>{{note|COBOL's NUMVAL alternatives|c}} <code>NUMVAL-C</code> or <code>NUMVAL-F</code> may be used instead of <code>NUMVAL</code>.

== [[Standard streams|Standard stream I/O]] ==
{| class="wikitable"
|-
! rowspan=2| 
! read from
! colspan=2| write to
|-
! [[stdin]]
! [[stdout]]
! [[stderr]]
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>'''Get ('''x''')'''</tt>
| <tt>'''Put ('''x''')'''</tt>
| <tt>'''Put (Standard_Error, '''x''')'''</tt>
|-
| [[ALGOL 68]]
| <tt>'''readf(('''$format$''', '''x'''));''' or <br/> '''getf(stand in, ('''$format$''', '''x'''));'''</tt>
| <tt>'''[[printf]](('''$format$''', '''x'''));''' or <br/> '''putf(stand out, ('''$format$''', '''x'''));''' </tt>
| <tt>'''putf(stand error, ('''$format$''', '''x'''));'''{{ref|ALGOL Unformatted|[a]}}</tt>
|-
| C (C99) 
| <tt>'''[[scanf]]('''format''', &'''x''');''' or <br/> '''[[fscanf]](stdin, '''format''', &'''x''');''' {{ref|more c input|[b]}}</tt>
| <tt>'''[[printf]]( '''format''', '''x''');''' or <br/> '''[[fprintf]](stdout, '''format''', '''x''');''' {{ref|more c output|[c]}}</tt>
| <tt>'''[[fprintf]](stderr, '''format''', '''x''' );'''{{ref|more c error output|[d]}}</tt>
|-
| Objective-C
| <tt>data = '''[[NSFileHandle fileHandleWithStandardInput] readDataToEndOfFile];'''</tt>
| <tt>'''[[NSFileHandle fileHandleWithStandardOutput] writeData:'''data'''];'''</tt>
| <tt>'''[[NSFileHandle fileHandleWithStandardError] writeData:'''data'''];'''</tt>
|-
| C++
| <tt>[[iostream|«'''std::'''»'''cin''']] '''>>''' x''';''' or <br/> «'''std::'''»'''getline('''«'''std::'''»'''cin, '''str''');'''</tt>
| <tt>[[iostream|«'''std::'''»'''cout''']] '''<<''' x''';'''</tt>
| <tt>[[iostream|«'''std::'''»'''cerr''']] '''<<''' x''';''' or<br/> [[iostream|«'''std::'''»'''clog''']] '''<<''' x''';'''</tt>
|-
| C#
| <tt>x ''' = Console.Read();''' or <br/> x '''= Console.ReadLine();'''</tt>
| <tt>'''Console.Write('''«format''', '''»x''');''' or <br/> '''Console.WriteLine('''«format''', '''»x''');'''</tt>
| <tt>'''Console.Error<wbr/>.Write('''«format''', '''»x''');''' or <br/> '''Console.Error<wbr/>.WriteLine('''«format''', '''»x''');'''</tt>
|-
| D
| <tt>x = '''std.stdio.readln()'''</tt>
| <tt>'''std.stdio.write('''x''')''' or <br /> '''std.stdio.writeln('''x''')''' or <br /> '''std.stdio.writef('''format''', '''x''')''' or <br /> '''std.stdio.writefln('''format''', '''x''')'''</tt>
| <tt>'''stderr.write('''x''')''' or <br /> '''stderr.writeln('''x''')''' or <br /> '''std.stdio<wbr/>.writef(stderr, '''format''', '''x''')''' or <br /> '''std.stdio<wbr/>.writefln(stderr, '''format''', '''x''')'''</tt>
|-
| Java
| <tt>x '''= System.in.read();''' or <br/> x '''= new Scanner(System.in)<wbr/>.nextInt();''' or <br/> x '''= new Scanner(System.in)<wbr/>.nextLine();'''</tt>
| <tt>'''System.out.print('''x''');''' or <br/> '''System.out.[[printf]]('''format''', '''x''');''' or <br/> '''System.out.println('''x''');'''</tt>
| <tt>'''System.err.print('''x''');''' or <br/> '''System.err.[[printf]]('''format''', '''x''');''' or <br/> '''System.err.println('''x''');'''</tt>
|-
| Go
| <tt>'''fmt.Scan(&'''x''')''' or <br/> '''fmt.[[Scanf]]('''format''', &'''x''')''' or <br/> x = '''bufio.NewReader(os.Stdin)<wbr/>.ReadString('\n')'''</tt>
| <tt>'''fmt.Println('''x''')''' or<br/> '''fmt.[[Printf]]('''format''', '''x''')'''</tt>
| <tt>'''fmt.Fprintln(os{{Not a typo|.}}Stderr, '''x''')''' or<br/> '''fmt.[[Fprintf]](os{{Not a typo|.}}Stderr, '''format''', '''x''')'''</tt>
|-
| Swift
| <tt>x = '''readLine()'''</tt> (2.x)
| <tt>'''print('''x''')'''</tt> (2.x)<br /> <tt>'''println('''x''')'''</tt> (1.x)
| 
|-
| JavaScript<br/><small>[[Client-side JavaScript|Web Browser implementation]]</small>
| 
| <tt>'''document.write('''x''')'''</tt>
| 
|-
| JavaScript<br/><small>[[Active Server Pages]]</small>
| 
| <tt>'''Response.Write('''x''')'''</tt>
| 
|-
| JavaScript<br/><small>[[Windows Script Host]]</small>
| <tt>x '''= WScript.StdIn.Read('''chars''')''' or<br/> x '''= WScript.StdIn.ReadLine()'''</tt>
| <tt>'''WScript.Echo('''x''')''' or<br/> '''WScript.StdOut.Write('''x''')''' or<br/> '''WScript.StdOut.WriteLine('''x''')'''</tt>
| <tt>'''WScript.StdErr.Write('''x''')''' or<br/> '''WScript.StdErr.WriteLine('''x''')'''</tt>
|-
| Common Lisp
| <tt>'''(setf''' x '''(read-line))'''</tt>
| <tt>'''(princ''' x''')''' or<br/> '''(format t '''format x''')'''</tt>
| <tt>'''(princ''' x''' *error-output*)''' or<br/> '''(format *error-output* '''format x''')'''</tt>
|-
| Scheme (R<sup>6</sup>RS)
| <tt>'''(define''' x''' (read-line))'''</tt>
| <tt>'''(display''' x''')''' or<br/> '''(format #t '''format x''')'''</tt>
| <tt>'''(display''' x''' (current-error-port))''' or<br/> '''(format (current-error-port) '''format x''')'''</tt>
|-
| ISLISP
| <tt>'''(setf''' x '''(read-line))'''</tt>
| <tt>'''(format (standard-output) '''format x''')'''</tt>
| <tt>'''(format (error-output) '''format x''')'''</tt>
|-
| Pascal
| <tt>'''read('''x''');''' or <br/> '''readln('''x''');'''</tt>
| <tt>'''write('''x''');''' or <br/> '''writeln('''x''');'''</tt>
| rowspan=2 {{n/a}}
|-
| Visual Basic
| <tt>'''Input'''« prompt''','''»''' '''x'''</tt>
| <tt>'''Print '''x or <br/> '''? '''x'''</tt>
|-
| Visual Basic .NET
| <tt>x ''' = Console.Read()''' or <br/> x '''= Console.ReadLine()'''</tt>
| <tt>'''Console.Write('''«format''', '''»x''')''' or <br/> '''Console.WriteLine('''«format''', '''»x''')'''</tt>
| <tt>'''Console.Error<wbr/>.Write('''«format''', '''»x''')''' or <br/> '''Console.Error<wbr/>.WriteLine('''«format''', '''»x''')'''</tt>
|-
| Xojo
| <tt>x ''' = StandardInputStream.Read()''' or <br/> x '''= StandardInputStreame.ReadLine()'''</tt>
| <tt>'''StandardOutputStream.Write('''x''')''' or <br/> '''StandardOutputStream.WriteLine('''x''')'''</tt>
| <tt>'''StdErr.Write('''x''')''' or <br/> '''StdErr.WriteLine('''x''')'''</tt>
|-
| Python 2.x
| <tt>x '''= raw_input('''«prompt»''')'''</tt>
| <tt>'''print''' x or <br/> '''sys.stdout.write('''x''')'''</tt>
| <tt>'''print >> sys.stderr,''' x or <br/> '''sys.stderr.write('''x''')'''</tt>
|-
| Python 3.x
| <tt>x '''= input('''«prompt»''')'''</tt>
| <tt>'''print('''x«''', end=""'''»''')'''</tt>
| <tt>'''print('''x«''', end=""'''»''', file=sys.stderr)'''</tt>
|-
| S-Lang
| <tt>'''[[fgets]] (&'''x''', stdin)'''</tt>
| <tt>'''[[fputs]] ('''x''', stdout)'''</tt>
| <tt>'''[[fputs]] ('''x''', stderr)'''</tt>
|-
| Fortran
| <tt>'''READ(*,'''format''') '''variable names''' or <br/> READ(INPUT_UNIT,'''format''') '''variable names'''{{ref|Fortran standard units|[e]}}</tt>
| <tt>'''WRITE(*,'''format''') '''expressions''' or <br/>WRITE(OUTPUT_UNIT,'''format''') '''expressions'''{{ref|Fortran standard units|[e]}}</tt>
| <tt>'''WRITE(ERROR_UNIT,'''format''') '''expressions{{ref|Fortran standard units|[e]}}</tt>
|-
| Forth
| <tt>buffer length''' ACCEPT''' ( # chars read ) <br/>'''KEY''' ( char )</tt>
| <tt>buffer length''' TYPE'''<br/>char''' EMIT'''</tt>
| {{n/a}}
|-
| PHP
| <tt>$x '''= [[fgets]](STDIN);''' or <br/> $x '''= [[fscanf]](STDIN, '''format''');'''</tt>
| <tt>'''print '''x''';''' or <br/> '''[[echo (command)|echo]] '''x''';''' or <br/> '''[[printf]]('''format''', '''x''');'''</tt>
| <tt>'''[[fprintf]](STDERR, '''format''', '''x''');'''</tt>
|-
| Perl
| <tt>$x '''= <>;''' or <br/> $x '''= <STDIN>;'''</tt>
| <tt>'''print '''x''';''' or <br/> '''[[printf]] '''format''', '''x''';'''</tt>
| <tt>'''print STDERR '''x''';''' or <br/> '''[[printf]] STDERR '''format''', '''x''';'''</tt>
|-
| Perl 6
| <tt>$x '''= $*IN.get;'''</tt>
| <tt>x'''.print''' or<br/> x'''.say'''</tt>
| <tt>x'''.note''' or<br/> '''$*ERR.print('''x''')''' or<br/> '''$*ERR.say('''x''')'''</tt>
|-
| Ruby
| <tt>x '''= gets'''</tt>
| <tt>'''puts''' x or<br/> '''[[printf]]('''format''', '''x''')'''</tt>
| <tt>'''$stderr.puts('''x''')''' or<br/> '''$stderr.[[printf]]('''format''', '''x''')'''</tt>
|-
| Windows PowerShell
| <tt>$x '''= Read-Host'''««''' -Prompt'''» text»''';''' or <br/> $x '''= [Console]::Read();''' or <br/> $x '''= [Console]::ReadLine()'''</tt>
| <tt>x''';''' or <br/> '''Write-Output '''x''';''' or <br/> '''echo '''x</tt>
| <tt>'''Write-Error '''x</tt>
|-
| OCaml
| <tt>'''let''' x '''= read_int ()''' or <br/> '''let''' str '''= read_line ()''' or <br/> '''Scanf.[[scanf]]''' format '''(fun '''x ...'''  <nowiki>-></nowiki> '''...''')'''</tt>
| <tt>'''print_int''' x or <br/> '''print_endline''' str or <br/> '''Printf.[[printf]]''' format x ...</tt>
| <tt>'''prerr_int''' x or <br/> '''prerr_endline''' str or <br/> '''Printf.[[fprintf|eprintf]]''' format x ...</tt>
|-
| F#
| <tt>'''let''' x '''= System.Console<wbr/>.ReadLine()'''</tt>
| <tt>'''[[printf]]''' format x ... or <br/> '''[[printf]]n''' format x ...</tt>
| <tt>'''[[fprintf|eprintf]]''' format x ... or <br/>'''[[fprintf|eprintf]]n''' format x ...</tt>
|-
| Standard ML
| <tt>'''val''' str '''= TextIO.inputLIne TextIO.stdIn'''</tt>
| <tt>'''print''' str</tt>
| <tt>'''TextIO.output (TextIO.stdErr, '''str''')'''</tt>
|-
| Haskell (GHC)
| <tt>x '''<- readLn''' or <br/> str '''<nowiki><-</nowiki> getLine'''</tt>
| <tt>'''print '''x or <br/> '''putStrLn''' str</tt>
| <tt>'''hPrint stderr '''x or <br/> '''hPutStrLn stderr''' str</tt>
|-
| COBOL
| <code>'''ACCEPT''' x</code>
| <code>'''DISPLAY''' x</code>
|
|-
|}
<br>{{note|ALGOL Unformatted|a}} Algol 68 additionally as the "unformatted" [[transput]] routines: <tt>''read'', ''write'', ''get''</tt> and <tt>''put''</tt>.
<br>{{note|more c input|b}} <tt>'''[[gets()|gets]](x)'''</tt> and <tt>'''[[fgets]](x,''' length''', stdin)'''</tt> read unformatted text from stdin. Use of gets is not recommended.
<br/>{{note|more c input|c}} <tt>'''[[puts (C)|puts]](x)'''</tt> and <tt>'''[[fputs]](x, stdout)'''</tt> write unformatted text to stdout.
<br/>{{note|more c error output|d}} <tt>'''fputs(x, stderr)'''</tt> writes unformatted text to stderr
<br/>{{note|Fortran standard units|e}} <tt>'''INPUT_UNIT''', '''OUTPUT_UNIT''', '''ERROR_UNIT'''</tt> are defined in the <tt>ISO_FORTRAN_ENV</tt> module.<ref>http://fortranwiki.org/fortran/show/iso_fortran_env</ref>

== Reading [[command-line argument]]s ==
{| class="wikitable"
|-
! 
! Argument values
! Argument counts
! Program name / Script name
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| <tt>'''Argument ('''n''')'''</tt>
| <tt>'''Argument_Count'''</tt>
| <tt>'''Command_Name'''</tt>
|-
| C (C99) 
| rowspan=3| <tt>'''argv['''n''']'''</tt>
| rowspan=3| <tt>'''argc'''</tt>
| rowspan=3| first argument
|-
| Objective-C
|-
| C++
|-
| C#
| rowspan=3| <tt>'''args['''n''']'''</tt>
| <tt>'''args.Length'''</tt>
| <tt>'''Assembly.GetEntryAssembly()<wbr/>.Location;'''</tt>
|-
| Java
| rowspan=2| <tt>'''args.length'''</tt>
| <!-- same as name of class containing '''main()''' --> <!-- not sure if that would yield the name of the exe/binary file of the program -->
|-
| D
| first argument
|-
| JavaScript <br/><small>[[Windows Script Host]] implementation</small>
| <tt>'''WScript.Arguments('''n''')'''</tt>
| <tt>'''WScript.Arguments.length'''</tt>
| <tt>'''WScript.ScriptName''' or '''WScript.ScriptFullName'''</tt>
|-
| Go
| <tt>'''os.Args['''n''']'''</tt>
| <tt>'''len(os.Args)'''</tt> 
| first argument
|-
| Swift
| <tt>'''Process.arguments['''n''']'''</tt> or <br /> <tt>'''Process.unsafeArgv['''n''']'''</tt>
| <tt>'''Process.arguments.count'''</tt> or <br /> <tt>'''Process.argc'''</tt>
| first argument
|-
| Common Lisp
| {{dunno}}
| {{dunno}}
| {{dunno}}
|-
| Scheme (R<sup>6</sup>RS)
| <tt>'''(list-ref (command-line) '''n''')'''</tt>
| <tt>'''(length (command-line))'''</tt>
| first argument
|-
| ISLISP
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| Pascal
| <tt>'''ParamStr('''n''')'''</tt>
| <tt>'''ParamCount'''</tt>
| first argument
|-
| Visual Basic
| <tt>'''Command'''</tt>{{ref|unseparated|[a]}}
| {{n/a}}
| <tt>'''App.Path'''</tt>
|-
| Visual Basic .NET
| <tt>'''CmdArgs('''n''')'''</tt>
| <tt>'''CmdArgs.Length'''</tt>
| <tt>'''[Assembly].GetEntryAssembly().Location'''</tt>
|-
| Xojo
| <tt>'''System.CommandLine'''</tt>
| (string parsing)
| '''Application.ExecutableFile.Name'''
|-
| Python
| <tt>'''sys.argv['''n''']'''</tt>
| <tt>'''len(sys.argv)'''</tt>
| first argument
|-
| S-Lang
| <tt>'''__argv['''n''']'''</tt>
| <tt>'''__argc'''</tt>
| first argument
|-
| Fortran
| <tt>'''DO '''i''' = '''1''','''argc''' <dl><dd> CALL GET_COMMAND_ARGUMENT ('''i''','''argv(i)''') </dd></dl> ENDDO'''</tt>
| <tt>argc''' = COMMAND_ARGUMENT_COUNT ()'''</tt>
| <tt>'''CALL GET_COMMAND_ARGUMENT ('''0''','''progname''')'''</tt>
|-
| PHP
| <tt>'''$argv['''n''']'''</tt>
| <tt>'''$argc'''</tt>
| first argument
|-
| Bash shell
| <tt>'''$'''n ('''$1''', '''$2''', '''$3''', ...)</tt><br/><tt>'''$@'''</tt> (all arguments)
| <tt>'''$#'''</tt>
| <tt>'''$0'''</tt>
|-
| Perl
| <tt>'''$ARGV['''n''']'''</tt>
| <tt>'''scalar(@ARGV)'''</tt>
| <tt>'''$0'''</tt>
|-
| Perl 6
| <tt>'''@*ARGS['''n''']'''</tt>
| <tt>'''@*ARGS.elems'''</tt>
| <tt>'''$PROGRAM_NAME'''</tt>
|-
| Ruby
| <tt>'''ARGV['''n''']'''</tt>
| <tt>'''ARGV.size'''</tt>
| <tt>'''$0'''</tt>
|-
| Windows PowerShell
| <tt>'''$args['''n''']'''</tt>
| <tt>'''$args.Length'''</tt>
| <tt>'''$MyInvocation.MyCommand<wbr/>.Name'''</tt>
|-
| OCaml
| <tt>'''Sys.argv.('''n''')'''</tt>
| <tt>'''Array.length Sys.argv'''</tt>
| first argument
|-
| F#
| <tt>'''args.['''n''']'''</tt>
| <tt>'''args.Length'''</tt>
| <tt>'''Assembly.GetEntryAssembly()<wbr/>.Location'''</tt>
|-
| Standard ML
| <tt>'''List.nth (CommandLine<wbr/>.arguments (), '''n''')'''</tt>
| <tt>'''length (CommandLine<wbr/>.arguments ())'''</tt>
| <tt>'''CommandLine.name ()'''</tt>
|-
| Haskell (GHC)
| {{code|lang=haskell|do { args <- System.getArgs; return length args !! n }}}
| {{code|lang=haskell|do { args <- System.getArgs; return length args }}}
| <tt>'''System.getProgName'''</tt>
|-
| COBOL
| colspan=2 | {{ref|COBOL Arguments|[b]}}
| {{n/a}}
|}
* {{note|unseparated|a}}The command-line arguments in Visual Basic are not separated. A split function <code>'''Split('''string''')'''</code> is required for separating them.
* {{note|COBOL Arguments|b}} The COBOL standard does not include any way to access command-line arguments but common compiler-extensions for accessing them include defining parameters for the main program or using <code>ACCEPT</code> statements.

== Execution of commands ==

{| class="wikitable"
!
!Shell command
!Execute program
![[exec (operating system)|Replace current program with new executed program]]
|-
| [[Ada (programming language)|Ada]]<ref name="Ada_RM_2012" />
| colspan=3 align="center"| Not part of the language standard. Commonly done by compiler provided packages or by interfacing to C or Posix.<ref name=Ada_Execute_Command>http://rosettacode.org/wiki/Execute_a_system_command#Ada</ref> 
|-
| C
| rowspan=3| <tt>'''[[system (C standard library)|system]]("'''command'''");'''</tt>
|
| rowspan=2| <tt>'''[[Exec (operating system)|execl]]('''path''',''' args''');''' or<br/> '''[[Exec (operating system)|execv]]('''path''',''' arglist''');'''</tt>
|-
| C++
| 
|-
| Objective-C
| <tt>'''[NSTask launchedTaskWithLaunchPath:(NSString *)'''path''' arguments:(NSArray *)'''arguments'''];'''</tt>
| 
|-
| C#
|
| rowspan=2| <tt>'''System.Diagnostics<wbr/>.Process.Start('''path''',''' argstring''');'''</tt>
|
|-
| F#
|
|
|-
| Go
|
| <tt>'''exec.Run('''path''',''' argv''',''' envv''',''' dir''', exec.DevNull, exec.DevNull, exec.DevNull)'''</tt>
| <tt>'''os.Exec('''path''',''' argv''',''' envv''')'''</tt>
|-
| Visual Basic
| <tt>'''Interaction.Shell('''command «''',&nbsp;'''WindowStyle» «''',&nbsp;'''isWaitOnReturn»''')'''</tt>
|
|
|-
| Visual Basic .NET
| <tt>'''Microsoft.VisualBasic<wbr/>.Interaction.Shell('''command «''',&nbsp;'''WindowStyle» «''',&nbsp;'''isWaitOnReturn»''')'''</tt>
| <tt>'''System.Diagnostics<wbr/>.Process.Start('''path''',''' argstring''')'''</tt>
|
|-
| Xojo
| <tt>'''Shell.Execute('''command «''',&nbsp;'''Parameters»''')'''</tt>
| <tt>'''FolderItem.Launch('''parameters''',''' activate''')'''</tt>
| {{n/a}}
|-
| D
| <tt>'''std.process.system("'''command'''");'''</tt>
| 
| <tt>'''std.process.execv('''path''',''' arglist''');'''</tt>
|-
| Java
|
| <tt>'''Runtime.exec('''command''');''' or<br/> '''new ProcessBuilder('''command''').start();'''</tt>
|
|-
| JavaScript <br/> <small>[[Windows Script Host]] implementation</small>
| <tt>'''WScript.CreateObject ("WScript.Shell").Run('''command «''',&nbsp;'''WindowStyle» «''',&nbsp;'''isWaitOnReturn»''');'''</tt>
| <tt>'''WshShell.Exec(command)'''</tt>
|
|-
| Common Lisp
| <tt>'''(shell '''command''')'''</tt>
|
|
|-
| Scheme
| <tt>'''(system '''command''')'''</tt>
|
| 
|-
| ISLISP
| {{n/a}}
| {{n/a}}
| {{n/a}}
|-
| Pascal
| <tt>'''system('''command''');'''</tt>
|
| 
|-
| OCaml
| <tt>'''Sys.command '''command, '''Unix.open_process_full''' command env (stdout, stdin, stderr),...</tt>
| <tt>'''Unix.create_process''' prog args new_stdin new_stdout new_stderr, ...</tt>
| <tt>'''Unix.execv''' prog args or <br/> '''Unix.execve''' prog args env</tt>
|-
| Standard ML
| <tt>'''OS.Process.system '''command</tt>
| <tt>'''Unix.execute ('''path''', '''args''')'''</tt>
| <tt>'''Posix.Process.exec ('''path''', '''args''')'''</tt>
|-
| Haskell (GHC)
| <tt>'''System.system '''command</tt>
| <tt>'''System.Process<wbr/>.runProcess '''path''' '''args''' ...</tt>
| <tt>'''Posix.Process<wbr/>.executeFile '''path''' True '''args''' ...</tt>
|-
| Perl
| <tt>'''system('''command''')''' or <br/>$output '''= `'''command'''`''' or<br/>$output '''= qx('''command''')'''</tt> 
|
| <tt>'''exec('''path''',''' args''')'''</tt>
|-
| Ruby
| <tt>'''system('''command''')''' or <br/> output '''= `'''command'''`'''</tt>
|
| <tt>'''exec('''path''',''' args''')'''</tt>
|-
| PHP
| <tt>'''system('''command''')''' or <br/> $output '''= `'''command'''`''' or <br/> '''exec('''command''')''' or <br/> '''passthru('''command''')'''</tt>
|
|
|-
| Python
| <tt>'''os.system('''command''')''' or <br/> '''subprocess.Popen('''command''')''' </tt>
|
| <tt>'''os.execv('''path''',''' args''')'''</tt>
|-
| S-Lang
| <tt>'''system('''command''')'''</tt>
|
|
|-
| Fortran
| <tt>'''CALL SYSTEM ('''command''', '''status''') or <br/> '''status''' = SYSTEM ('''command''')'''{{ref|Fortran extension|[a]}}</tt>
|
|
|-
| Windows PowerShell
| <tt>'''[Diagnostics.Process]::Start('''command''')'''</tt>
| <tt>«'''Invoke-Item''' »program arg1 arg2 …</tt>
|
|-
| Bash shell
| <tt>output'''=`'''command'''`'''</tt> or
<tt>output'''=$('''command''')'''</tt>
| <tt>program arg1 arg2 …</tt>
| 
|}
{{note|Fortran extension|a}} Compiler-dependent extension.<ref>http://gcc.gnu.org/onlinedocs/gfortran/SYSTEM.html#SYSTEM</ref>

== References ==
{{Reflist}}

{{DEFAULTSORT:Comparison Of Programming Languages (Basic Instructions)}}
[[Category:Programming constructs]]
[[Category:Programming language comparisons]]
