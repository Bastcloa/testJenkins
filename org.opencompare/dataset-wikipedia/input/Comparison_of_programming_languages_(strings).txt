{{merge|comparison of programming languages (string functions)|date=February 2012}}
{{Unreferenced|date=February 2009}}
{{ProgLangCompare}}

This '''comparison of programming languages (strings)''' compares the features of [[string (computer science)|string]] [[data structure]]s or [[text string|text-string]] processing for over 52 various computer [[programming language]]s.

== Concatenation ==
Different languages use different symbols for the concatenation operator. Many languages use the "+" symbol, though several deviate from this.

===Common variants===

{| class="wikitable"
|-
! Operator
! Languages
|-
| +
| [[ALGOL 68]], [[BASIC programming language|BASIC]], [[C++]], [[C Sharp (programming language)|C#]], [[Cobra (programming language) |Cobra]], [[Pascal programming language|Pascal]], [[Object Pascal]], [[Eiffel (programming language)|Eiffel]], [[Go (programming language)|Go]], [[JavaScript]], [[Java (programming language)|Java]], [[Python (programming language)|Python]], [[Turing (programming language)|Turing]], [[Ruby programming language|Ruby]], [[Windows PowerShell]], [[Objective-C]], [[F Sharp (programming language)|F#]], [[Scala (programming language)|Scala]], Ya
|-
| ++
| [[Haskell (programming language)|Haskell]], [[Erlang (programming language)|Erlang]]
|-
| $+
| [[MIRC scripting language|mIRC Scripting Language]]
|-
| &
| [[Ada (programming language)|Ada]], [[AppleScript]], [[COBOL]] (for literals only), [[Curl programming language|Curl]], [[Seed7]], [[VHDL]], [[Visual Basic]], [[Microsoft Excel|Excel]], [[FreeBASIC]]
|-
| nconc
| [[Common Lisp]]
|-
| .
| [[Perl]] (before version 6), [[PHP]], and [[Maple computer algebra system|Maple]] (up to version 5), Autohotkey
|-
| ~ 
| [[Perl 6]] and [[D programming language|D]] 
|-
| <nowiki>||</nowiki>
| [[Icon (programming language)|Icon]], Standard [[SQL]], [[PL/I]], [[Rexx]], and [[Maple computer algebra system|Maple]] (from version 6)
|-
| <>
| [[Mathematica]] 
|-
| ..
| [[Lua programming language|Lua]]
|-
|, 
| [[J programming language]], [[Smalltalk]]
|-
| ^
| [[OCaml]], [[Standard ML]], [[F Sharp (programming language)|F#]], [[rc]]
|-
| //
| [[Fortran]]
|}

===Unique variants===

* [[Awk]] uses the empty string: two expressions adjacent to each other are concatenated. This is called [[Juxtaposition (literary)|juxtaposition]]. [[Unix shell]]s have a similar syntax. [[Rexx]] uses this syntax for concatenation including an intervening space.
* [[C (programming language)|C]] allows juxtaposition for string literals, however, for strings stored as [[Character (computing)|character]] [[Array data structure|arrays]], the <code>[[strcat]]</code> function must be used.
* [[COBOL]] uses the <code>STRING</code> statement to concatenate string variables.
* [[MATLAB]] and [[Octave programming language|Octave]] use the syntax "<code>[x y]</code>" to concatenate x and y.
* [[Visual Basic]] Versions 1 to 6 can also use the "<code>+</code>" sign but, this leads to ambiguity if a string representing a number and a number is added together.
* [[Microsoft Excel]] allows both "<code>&</code>" and the function "<code>=CONCATENATE(X,Y)</code>".

== String literals ==
This section compares styles for declaring a [[string literal]].

=== Quoted raw ===
"Raw" meaning that the interpreter/compiler does not recognize any variable or constant identifiers located inside the string and the content of the identifier will not replace the identifier in the string.
{| class="wikitable"
|-
! Syntax
! Language(s)
|-
| <tt>@"Hello, world!"</tt>
| C#, F#
|-
| <tt>"Hello, world!"</tt>
| Cobol, FreeBASIC, Java, JavaScript 
|-
| <tt>r"Hello, world!"</tt>
| D, Python, Cobra
|-
| <tt>'Hello, world!'</tt>
| Fortran, JavaScript, Object Pascal, Pascal, Perl,  PHP, Windows PowerShell,
|-
| <tt>`Hello, world!`</tt>
| D, Go, Smalltalk
|-
| <tt>R"(Hello, world!)"</tt>
| C++11
|}

=== Quoted interpolated ===
"Interpolated" means that the interpreter/compiler does recognize a variable or constant identifier located inside the string and the content of the identifier will replace the identifier in the string. 
{| class="wikitable"
|-
! Syntax
! Language(s)
|-
| <tt>"Hello, $name!"</tt>
| PHP, Perl, Windows PowerShell, Bash shell
|-
| <tt>"Hello, {$name}!"</tt>
| PHP
|-
| <tt>"Hello, #{name}!"</tt>
| Ruby
|-
| <tt>(format t "Hello, ~A" name)</tt>
|Common Lisp
|-
| <tt>`Hello, ${name}!`</tt>
| JavaScript (ECMAScript 6)
|}

=== Escaped quotes ===
"Escaped" quotes means that a 'flag' symbol is used to warn that the character after the flag is used in the string rather than ending the string.
{| class="wikitable"
|-
! Syntax
! Language(s)
|-
| <tt>"I said \"Hello, world!\""</tt>
| C, C++, C#, D, F#, Java, Ocaml, Perl, Python, JavaScript, Mathematica, Ya
|-
| <tt><nowiki>'I said ''Hello, world!'''</nowiki></tt>
| Smalltalk
|-
| <tt>"I said `"Hello, world!`""</tt>
| Windows Powershell
|-
| <tt>"I said ^"Hello, world!^""</tt>
| REBOL
|-
| <tt>"I said, %"Hello, World!%""</tt>
| Eiffel
|-
| <tt>!"I said \"Hello, world!\""</tt>
| FreeBASIC
|}

=== Dual quoting ===
"Dual quoting" means that whenever a quote is used in a string, it is used twice, and one of them is discarded and the single quote is then used within the string.
{| class="wikitable"
|-
! Syntax
! Language(s)
|-
| <tt>"I said ""Hello, world!"""</tt>
| Ada, ALGOL 68, Excel, Fortran, Visual Basic, FreeBASIC, COBOL
|-
| <tt><nowiki>'I said ''Hello, world!'''</nowiki></tt>
| Fortran, rc, COBOL, SQL, Pascal, Object Pascal
|-
| <tt><nowiki>'I said "Hello, world!"'</nowiki></tt>
| Smalltalk
|}

{{Expand section|date=June 2008}}

=== Multiple quoting ===

{| class="wikitable"
|-
! Syntax
! Language(s)
|-
| <tt>q(I said "Hello, world!")
qq(I said "Hello, $name!")</tt>
| Perl (raw & interpolated)
|-
| <tt>%Q(I said "Hello, world!")
%(I said "Hello, world!")</tt>
| Ruby
|-
| <tt>{I said "Hello, world!"}</tt>
| REBOL
|}

=== Here document ===

{| class="wikitable" border="1"
|-
! Syntax
! Language(s)
|-
| <tt><<EOF<br />I have a lot of things to say<br />and so little time to say them<br />EOF</tt>
|  [[Bourne shell]], Perl, PHP, Ruby
|-
| <tt>@"<br />I have a lot of things to say<br />and so little time to say them<br />"@</tt>
| Windows Powershell
|-
| <tt>"[<br />I have a lot of things to say<br />and so little time to say them<br />]"</tt>
| Eiffel
|-
| <tt>"""<br />I have a lot of things to say<br />and so little time to say them<br />"""</tt>
| CoffeeScript
|}

=== Unique quoting variants ===
{| class="wikitable"
|-
! Syntax
! Variant name
! Language(s)
|-
| <tt>"""Hello, world!"""</tt>
| Triple quoting
| Python
|-
| <tt>13HHello, world!</tt>
| Hollerith notation
| Fortran 66
|-
| (indented with whitespace)
| Indented with whitespace and newlines
| YAML
|}

{{DEFAULTSORT:Comparison Of Programming Languages (Strings)}}
[[Category:Programming language comparisons]]
[[Category:String (computer science)]]
