{{ProgLangCompare}}
[[Programming language]]s are used for controlling the behavior of a machine (often a [[computer]]). Like [[natural language]]s, programming languages conform to rules for [[syntax]] and [[semantics]].

There are [[list of programming languages|thousands of programming languages]]<ref>As of May 2006 Diarmuid Pigott's [http://hopl.murdoch.edu.au/ Encyclopedia of Computer Languages] hosted at [[Murdoch University]], [[Australia]] lists 8512 computer languages.</ref> and new ones are created every year. Few languages ever become sufficiently popular that they are used by more than a few people, but professional [[programmer]]s may use dozens of languages in a career.

__TOC__
{{-}}

==General comparison==
The following table compares general and technical information for a selection of commonly used [[programming language]]s. See the individual languages' articles for further information. Please note that the following table may be missing some information.
<!-- Per [[WP:REPEATLINK]]: Wikilink terms on 1st instance only, remove later repeat links. -->
{|class="wikitable sortable" style="text-align:center;

|- align="center"
! Language
! Intended use <!--What this was to be used for originally. Not what it is used for now, which is hard to verify.-->
! [[imperative programming|Imperative]]
! [[object-oriented programming|Object-oriented]]
! [[functional programming|Functional]]
! [[procedural programming|Procedural]]
! [[generic programming|Generic]]
! [[reflective programming|Reflective]]
! [[event-driven programming|Event-driven]]
! Other [[programming paradigm|paradigm]](s)
! [[standardization|Standardized]]?

|- align="center"
! [[ActionScript]] 3.0 <!-- Language -->
| Application, client-side, Web <!-- Intended use -->
<!-- Sparse matrix for ActionScript 3.0 -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1996}}, ECMA <!-- Standardized? -->

|- align="center"
! [[Ada (programming language)|Ada]] <!-- Language -->
| Application, embedded, realtime, [[System programming language|system]] <!-- Intended use -->
<!-- Sparse matrix for Ada -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-6.html Section 6: Subprograms]</ref> <!-- Procedural -->
| {{Yes}}<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-12.html Section 12: Generic Units]</ref> <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[concurrent programming language|concurrent]],<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-9.html Section 9: Tasks and Synchronization]</ref> [[distributed programming|distributed]],<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3] [http://www.adaic.org/standards/05rm/html/RM-E.html Annex E: Distributed Systems]</ref> imperative object-oriented<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-3-9.html 3.9 Tagged Types and Type Extensions]</ref> <!-- Other paradigms -->
| {{yes|1983}}, 2005, 2012, ANSI, ISO, [[GOST]] 27831-88<ref>[http://vak.ru/lib/exe/fetch.php/book/gost/pdf/gost-27831-88.pdf Vak.ru]</ref> <!-- Standardized? -->

|- align="center"
! [[Aldor]] <!-- Language -->
| Highly domain-specific, symbolic computing <!-- Intended use -->
<!-- Sparse matrix for Aldor -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[ALGOL 58]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for ALGOL 58 -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[ALGOL 60]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for ALGOL 60 -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1960}}, [[IFIP WG 2.1]], ISO<ref>[http://www.open-std.org/jtc1/sc22/docs/oldwgs/wg6.html ISO 1538:1984]</ref> <!-- Standardized? -->

|- align="center"
! [[ALGOL 68]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for ALGOL 68 -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent <!-- Other paradigms -->
| {{yes|1968}}, [[IFIP WG 2.1]], [[GOST 27974-88]],<ref>[http://vak.ru/lib/exe/fetch.php/book/gost/pdf/gost-27974-88.pdf Vak.ru]</ref> <!-- Standardized? -->

|- align="center"
! [[Ateji PX]] <!-- Language -->
| Parallel application <!-- Intended use -->
<!-- Sparse matrix for Ateji PX -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[pi calculus]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[APL (programming language)|APL]] <!-- Language -->
| Application, data processing <!-- Intended use -->
<!-- Sparse matrix for APL -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[array programming|array-oriented]], [[tacit programming|tacit]] <!-- Other paradigms -->
| {{yes|1989}}, ISO <!-- Standardized? -->

|- align="center"
! [[Assembly language]] <!-- Language -->
| [[General purpose programming language|General]] <!-- Intended use -->
<!-- Sparse matrix for Assembly language -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| any, syntax is usually highly specific, related to the target processor <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[AutoHotkey]] <!-- Language -->
| GUI automation (macros), highly domain-specific <!-- Intended use -->
<!-- Sparse matrix for AutoHotkey -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[AutoIt]] <!-- Language -->
| GUI automation (macros), highly domain-specific <!-- Intended use -->
<!-- Sparse matrix for AutoIt -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Bash (Unix shell)|Bash]] <!-- Language -->
| Shell, scripting <!-- Intended use -->
<!-- Sparse matrix for BASIC -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| <!-- Standardized? -->

|- align="center"
! [[BASIC]] <!-- Language -->
| Application, education <!-- Intended use -->
<!-- Sparse matrix for BASIC -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1983}}, [http://portal.acm.org/citation.cfm?id=988221 ANSI], ISO <!-- Standardized? -->

|- align="center"
! [[BBj]] <!-- Language -->
| Application, business, Web <!-- Intended use -->
<!-- Sparse matrix for BBj -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[BeanShell]] <!-- Language -->
| Application, scripting <!-- Intended use -->
<!-- Sparse matrix for BeanShell -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no|In progress}}, [[Java Community Process|JCP]]<ref>[http://jcp.org/en/jsr/detail?id=274 JSR 274]</ref> <!-- Standardized? -->

|- align="center"
! [[BitC]] <!-- Language -->
| System <!-- Intended use -->
<!-- Sparse matrix for BitC -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[BLISS]] <!-- Language -->
| System <!-- Intended use -->
<!-- Sparse matrix for BLISS -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[BlitzMax]] <!-- Language -->
| Application, game <!-- Intended use -->
<!-- Sparse matrix for BlitzMax -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Boo (programming language)|Boo]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Boo -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Bro (software)|Bro]] <!-- Language -->
| domain-specific, application <!-- Intended use -->
<!-- Sparse matrix for Bro -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[C (programming language)|C]] <!-- Language -->
| Application, system,<ref>[http://cm.bell-labs.com/cm/cs/who/dmr/chist.html CM.bell-labs.com]</ref> general purpose, low-level operations <!-- Intended use -->
<!-- Sparse matrix for C -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1989}}, [[ANSI C|ANSI C89, ISO C90, ISO C99, ISO C11]]<ref>[http://www.open-std.org/JTC1/SC22/WG14/ ANSI C89, ISO/IEC 9899:1990, 1999, 2011]</ref> <!-- Standardized? -->

|- align="center"
! [[C++]] <!-- Language -->
| Application, system <!-- Intended use -->
<!-- Sparse matrix for C++ -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1998}}, ISO/IEC 1998, ISO/IEC 2003, ISO/IEC 2011<ref>[http://www.open-std.org/JTC1/SC22/WG21/ ISO/IEC 14882:1998, 2003, 2011]</ref> <!-- Standardized? -->

|- align="center"
! [[C Sharp (programming language)|C#]] <!-- Language -->
| Application, RAD, business, client-side, general, server-side, Web <!-- Intended use -->
<!-- Sparse matrix for C# -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<ref>[http://www.codeproject.com/KB/cs/intro_functional_csharp.aspx Codeproject.com: Functional Programming in C# 3.0 using Lambda Expression]</ref> <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| structured, concurrent <!-- Other paradigms -->
| {{yes|2000}}, ECMA, ISO<ref>ECMA-334; ISO/IEC 23270:2006</ref> <!-- Standardized? -->

|- align="center"
! [[Clarion (programming language)|Clarion]] <!-- Language -->
| General, business, Web <!-- Intended use -->
<!-- Sparse matrix for Clarion -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<ref>[http://www.softvelocity.com Softvelocity.com]</ref> <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
|{{unknown}}<!-- Standardized? -->

|- align="center"
! [[Clean (programming language)|Clean]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for Clean -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Clojure]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for Clojure -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[CLU (programming language)|CLU]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for CLU -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[COBOL]] <!-- Language -->
| Application, business <!-- Intended use -->
<!-- Sparse matrix for COBOL -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|ANSI X3.23 1968, 1974, 1985; ISO/IEC 1989:1985, 2002, 2014}} <!-- Standardized? -->

|- align="center"
! [[Cobra (programming language)|Cobra]] <!-- Language -->
| Application, business, general, Web <!-- Intended use -->
<!-- Sparse matrix for Cobra -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[ColdFusion Markup Language|ColdFusion]] (CFML) <!-- Language -->
| Web <!-- Intended use -->
<!-- Sparse matrix for ColdFusion(CFML) -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Common Lisp]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for Common Lisp -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| extensible syntax, [[Macro (computer science)#Syntactic macros|syntactic macros]], [[multiple dispatch]]<!-- Other paradigms -->
| {{yes|1994}}, ANSI <!-- Standardized? -->

|- align="center"
! [[COMAL]] 80 <!-- Language -->
| Education <!-- Intended use -->
<!-- Sparse matrix for COMAL 80 -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! Crystal 1.0.0 <!-- Language -->
| Education <!-- Intended use -->
<!-- Sparse matrix for Crystal 1.0.0 -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Cython]] <!-- Language -->
| Application, general, numerical computing <!-- Intended use -->
<!-- Sparse matrix for Cython -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[aspect-oriented programming|aspect-oriented]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[D (programming language)|D]] <!-- Language -->
| Application, system <!-- Intended use -->
<!-- Sparse matrix for D -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| generative, concurrent <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Dart (programming language)|Dart]] <!-- Language -->
| Application, Web <!-- Intended use -->
<!-- Sparse matrix for Dart -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| structured <!-- Other paradigms -->
| {{yes|Ecma-408 standard}} <!-- Standardized? -->

|- align="center"
! [[Dylan (programming language)|Dylan]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Dylan -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Eiffel (programming language)|Eiffel]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Eiffel -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|2005}}, ECMA, ISO<ref>ECMA-367; ISO/IEC 25436:2006</ref> <!-- Standardized? -->

|- align="center"
! [[Elixir (programming language)|Elixir]] <!-- Language -->
| Application, distributed <!-- Intended use -->
<!-- Sparse matrix for Elixir -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent, [[distributed programming|distributed]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Erlang (programming language)|Erlang]] <!-- Language -->
| Application, distributed, telecom <!-- Intended use -->
<!-- Sparse matrix for Erlang -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent, [[distributed programming|distributed]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Euphoria (programming language)|Euphoria]] <!-- Language -->
| Application<!-- Intended use -->
<!-- Sparse matrix for Euphoria -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Factor (programming language)|Factor]] <!-- Language -->
| <!-- Intended use -->
<!-- Sparse matrix for Factor -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[stack-oriented programming language|stack-oriented]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Falcon (programming language)|Falcon]] <!-- Language -->
| General, Application <!-- Intended use -->
<!-- Sparse matrix for Falcon -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| prototype OOP, message oriented, tabular programming <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[FP (programming language)|FP]] <!-- Language -->
| <!-- Intended use -->
<!-- Sparse matrix for FP -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[F Sharp (programming language)|F#]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for F# -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Forth (programming language)|Forth]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for Forth -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| can be viewed as<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| stack-oriented <!-- Other paradigms -->
| {{yes|1994}}, ANSI <!-- Standardized? -->

|- align="center"
! [[Fortran]] <!-- Language -->
| Application, numerical computing <!-- Intended use -->
<!-- Sparse matrix for Fortran -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1966}}, ANSI 66, ANSI 77, MIL-STD-1753, ISO 90, ISO 95, ISO 2003, ISO/IEC 1539-1:2010 (2008) <!-- Standardized? -->

|- align="center"
! [[FreeBASIC]] <!-- Language -->
| Application, numerical computing <!-- Intended use -->
<!-- Sparse matrix for FreeBASIC -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! G2 <!-- Language -->
| Application, inference, expert system <!-- Intended use -->
<!-- Sparse matrix for G2 -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| common graphical development and runtime environment <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Gambas]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Gambas -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Game Maker Language]]
| Application, games
<!-- Sparse matrix for Game Maker Language -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- Other paradigms -->
| <!-- Other paradigms for Game Maker Language -->
| {{no}}

|- align="center"
! [[GLBasic]] <!-- Language -->
| Application, games <!-- Intended use -->
<!-- Sparse matrix for GLBasic -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| simple object-oriented <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Go (programming language)|Go]] <!-- Language -->
| Application, Web, server-side<!-- Intended use -->
<!-- Sparse matrix for Go -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven (channels are built-in) -->
<!-- -------------------- -->
| concurrent <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Gosu (programming language)|Gosu]] <!-- Language -->
| Application, general, scripting, Web <!-- Intended use -->
<!-- Sparse matrix for Gosu -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[GraphTalk]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for GraphTalk -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| logic <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Groovy (programming language)|Groovy]] <!-- Language -->
| Application, general, scripting, Web <!-- Intended use -->
<!-- Sparse matrix for Groovy -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| aspect-oriented <!-- Other paradigms -->
| {{no|In progress}}, [[Java Community Process|JCP]]<ref>[http://jcp.org/en/jsr/detail?id=241 JSR 241]</ref> <!-- Standardized? -->

|- align="center"
! [[Harbour (programming language)|Harbour]] <!-- Language -->
| Application, business, data processing, general, Web <!-- Intended use -->
<!-- Sparse matrix for Harbour -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[declarative programming|declarative]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Haskell (programming language)|Haskell]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Haskell -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[lazy evaluation]] <!-- Other paradigms -->
| {{yes|2010}}, Haskell 2010<ref>{{cite web|url=http://www.haskell.org/onlinereport/haskell2010/ |title=The Haskell 2010 Language Report |accessdate=2011-12-07}} Most Haskell implementations extend the Haskell 2010 standard.</ref> <!-- Standardized? -->

|- align="center"
! [[Haxe]] <!-- Language -->
| Application, general, Web <!-- Intended use -->
<!-- Sparse matrix for Haxe -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[HyperNext]] <!-- Language -->
| Application, education <!-- Intended use -->
<!-- Sparse matrix for HyperNext -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| [[weak typing|weakly typed]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[HyperTalk]] <!-- Language -->
| Application, RAD, General <!-- Intended use -->
<!-- Sparse matrix for HyperTalk -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| [[weak typing|weakly typed]] <!-- Other paradigms -->
| {{unk}} <!-- Standardized? -->

|- align="center"
! [[Io (programming language)|Io]] <!-- Language -->
| Application, host-driven scripting <!-- Intended use -->
<!-- Sparse matrix for Io -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[ISLISP]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for ISLISP -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1997}}, [[International Organization for Standardization|ISO]] <!-- Standardized? -->

|- align="center"
! [[J (programming language)|J]] <!-- Language -->
| Data processing <!-- Intended use -->
<!-- Sparse matrix for J -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| array-oriented, [[function-level programming|function-level]], tacit <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[JADE (programming language)|JADE]] <!-- Language -->
| Application, distributed <!-- Intended use -->
<!-- Sparse matrix for JADE -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Java (programming language)|Java]] <!-- Language -->
| Application, business, client-side, general, server-side, Web <!-- Intended use -->
<!-- Sparse matrix for Java -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent <!-- Other paradigms -->
| {{yes|''De facto'' standard}} via [http://docs.oracle.com/javase/specs/jls/se8/html/index.html Java Language Specification] <!-- Standardized? -->

|- align="center"
! [[Julia (programming language)|Julia]] <!-- Language -->
| General and made for technical computing <!-- Intended use -->
<!-- Sparse matrix for Java -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[multiple dispatch]], meta, scalar and [[Array programming|array-oriented]], parallel, concurrent, distributed ("cloud") <!-- Other paradigms -->
| {{No}}<!-- Standardized? -->

|- align="center"
! [[JavaScript]] <!-- Language -->
| Client-side, Server-side, Web <!-- Intended use -->
<!-- Sparse matrix for JavaScript -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[prototype-based]] <!-- Other paradigms -->
| {{yes|1997}}, ECMA <!-- Standardized? -->

|- align="center"
! [[Joy (programming language)|Joy]] <!-- Language -->
| Research <!-- Intended use -->
<!-- Sparse matrix for Joy -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| stack-oriented <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[K (programming language)|K]] <!-- Language -->
| Data processing, business <!-- Intended use -->
<!-- Sparse matrix for K -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| array-oriented, tacit <!-- Other paradigms -->
| {{unk}} <!-- Standardized? -->

|- align="center"
! [[Kotlin (programming language)|Kotlin]] <!-- Language -->
| Application, mobile development, server-sider, client-side, Web<!-- Intended use -->
<!-- Sparse matrix for Kotlin -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<ref>{{cite web|url=http://blog.jetbrains.com/kotlin/2014/07/m8-is-out/|title=M8 is out!|quote=As a first peek into the future reflective capabilities of Kotlin, you can now access properties as first-class objects in Kotlin}}</ref><!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
|{{no}} <!-- Standardized? -->

|- align="center"
! [[LabVIEW]] (G) <!-- Language -->
| Application, industrial instrumentation-automation <!-- Intended use -->
<!-- Sparse matrix for LabVIEW (G) -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[dataflow programming|dataflow]], [[visual programming language|visual]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Lisp (programming language)|Lisp]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for Lisp -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{unk}} <!-- Standardized? -->

|- align="center"
! [[LiveCode|Livecode]] <!-- Language -->
| Application, RAD, General <!-- Intended use -->
<!-- Sparse matrix for Livecode -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| [[weak typing|weakly typed]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Logtalk]] <!-- Language -->
| Artificial intelligence, application <!-- Intended use -->
<!-- Sparse matrix for Logtalk -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| logic <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Lua (programming language)|Lua]] <!-- Language -->
| Application, embedded scripting <!-- Intended use -->
<!-- Sparse matrix for Lua -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<ref>Lua doesn't have explicit "object" type (more general type of "table" is used for object definition), but does have explicit syntax for object method calling</ref> <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| aspect-oriented <!-- Other paradigms -->
| {{no}}<ref>Version releases are accompanied with a definitive Lua Reference Manual showing full syntax and semantics; a reference implementation, and a test suite. These are used to generate other Lua [[virtual machine|VM]] implementations and compilers such as [[Kahlua (software)|Kahlua]] and [[LLVM-Lua]].</ref> <!-- Standardized? -->

|- align="center"
! [[Maple (software)|Maple]] <!-- Language -->
| Symbolic computation, numerical computing <!-- Intended use -->
<!-- Sparse matrix for Maple -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[distributed programming|distributed]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Mathematica]] <!-- Language -->
| Symbolic language <!-- Intended use -->
<!-- Sparse matrix for Mathematica -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| logic, distributed <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[MATLAB]] <!-- Language -->
| Highly domain-specific, numerical computing <!-- Intended use -->
<!-- Sparse matrix for MATLAB -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Modula-2]] <!-- Language -->
| Application, system <!-- Intended use -->
<!-- Sparse matrix for Modula-2 -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1996}}, ISO<ref>ISO/IEC 10514-1:1996</ref> <!-- Standardized? -->

|- align="center"
! [[Modula-3]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Modula-3 -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[MUMPS|MUMPS (M)]] <!-- Language -->
| Application, databases <!-- Intended use -->
<!-- Sparse matrix for MUMPS -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[Concurrent computing|concurrent]], [[multi-user]], [[NoSQL]], [[transaction processing]]<!-- Other paradigms -->
| {{yes|1977}}, ANSI <!-- Standardized? -->

|- align="center"
! [[Nim (programming language)|Nim]] <!-- Language -->
| Application, general, Web, scripting, system <!-- Intended use -->
<!-- Sparse matrix for Nim -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[Multiple dispatch|multiple dispatch]], Concurrent, [[Metaprogramming|meta]]<!-- Other paradigms -->
| {{no}}<!-- Standardized? -->


|- align="center"
! [[Oberon (programming language)|Oberon]] <!-- Language -->
| Application, system <!-- Intended use -->
<!-- Sparse matrix for Oberon -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}}<!-- Standardized? -->

|- align="center"
! [[Object Pascal]] ([[Embarcadero Delphi|Delphi]]) <!-- Language -->
| Application, general, mobile App, Web <!-- Intended use -->
<!-- Sparse matrix for Dart -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| structured <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Objective-C]] <!-- Language -->
| Application, general <!-- Intended use -->
<!-- Sparse matrix for Objective-C -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[OCaml]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for OCaml -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Occam (programming language)|Occam]] <!-- Language -->
| General <!-- Intended use -->
<!-- Sparse matrix for Occam -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent, [[process-oriented programming|process-oriented]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Opa (programming language)|Opa]] <!-- Language -->
| Web applications <!-- Intended use -->
<!-- Sparse matrix for Opa -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[distributed programming|distributed]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Oxygene (programming language)|Oxygene]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Oxygene -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Oz (programming language)|Oz]] <!-- Language -->
| Application, distribution, education <!-- Intended use -->
<!-- Sparse matrix for Oz -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent, logic <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Pascal (programming language)|Pascal]] <!-- Language -->
| Application, education <!-- Intended use -->
<!-- Sparse matrix for Pascal -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1983}}, ISO<ref>ISO 7185</ref> <!-- Standardized? -->

|- align="center"
! [[Perl]] <!-- Language -->
| Application, scripting, text processing, Web <!-- Intended use -->
<!-- Sparse matrix for Perl -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[PHP]] <!-- Language -->
| Server-side, Web Application, Web <!-- Intended use -->
<!-- Sparse matrix for PHP -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.oop5.php Chapter 19. Classes and Objects (PHP 5)],</ref> <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.functions.php Chapter 17. Functions]</ref> <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[PL/I]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for PL/I -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1969}} <!-- Standardized? -->

|- align="center"
! [[Plus (programming language)|Plus]] <!-- Language -->
| Application, system development <!-- Intended use -->
<!-- Sparse matrix for Plus -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Prolog]] <!-- Language -->
| Application, artificial intelligence <!-- Intended use -->
<!-- Sparse matrix for Prolog -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| logic <!-- Other paradigms -->
| {{yes|1995}}, ISO <!-- Standardized? -->

|- align="center"
! [[PureBasic]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for PureBasic -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Python (programming language)|Python]] <!-- Language -->
| Application, general, Web, scripting, artificial intelligence, scientific computing <!-- Intended use -->
<!-- Sparse matrix for Python -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| aspect-oriented <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Racket (programming language)|Racket]] <!-- Language -->
| Education, general, scripting <!-- Intended use -->
<!-- Sparse matrix for Racket -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| modular, logic, meta <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[REALbasic]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for REALbasic -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{unk}} <!-- Standardized? -->

|- align="center"
! [[REBOL]] <!-- Language -->
| Distributed <!-- Intended use -->
<!-- Sparse matrix for REBOL -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[dialecting|dialected]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[IBM RPG|RPG]] <!-- Language -->
| Application, system <!-- Intended use -->
<!-- Sparse matrix for IBM RPG -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Ruby (programming language)|Ruby]] <!-- Language -->
| Application, scripting, Web <!-- Intended use -->
<!-- Sparse matrix for Ruby -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| aspect-oriented <!-- Other paradigms -->
| {{yes|2011(JIS X 3017), 2012(ISO/IEC 30170)}} <!-- Standardized? -->

|- align="center"
! [[Rust (programming language)|Rust]] <!-- Language -->
| Application, system <!-- Intended use -->
<!-- Sparse matrix for Rust -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| concurrent <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[S (programming language)|S]] <!-- Language -->
| Application, statistics <!-- Intended use -->
<!-- Sparse matrix for S -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[S-Lang (programming library)|S-Lang]] <!-- Language -->
| Application, numerical, scripting <!-- Intended use -->
<!-- Sparse matrix for S-Lang -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Scala (programming language)|Scala]] <!-- Language -->
| Application, distributed, Web <!-- Intended use -->
<!-- Sparse matrix for Scala -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|''De facto'' standard}} via [http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaReference.pdf Scala Language Specification (SLS)] <!-- Standardized? -->

|- align="center"
! [[Scheme (programming language)|Scheme]] <!-- Language -->
| Education, general <!-- Intended use -->
<!-- Sparse matrix for Scheme -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1998}}, R<sup>6</sup>RS <!-- Standardized? -->

|- align="center"
! [[Seed7]] <!-- Language -->
| Application, general, scripting, Web <!-- Intended use -->
<!-- Sparse matrix for Seed7 -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| multi-paradigm, extensible, structured <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Simula]] <!-- Language -->
| Education, general <!-- Intended use -->
<!-- Sparse matrix for Simula -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| [[discrete event simulation]], [[multi-threaded]] (quasi-parallel) program execution <!-- Other paradigms -->
| {{yes|1968}} <!-- Standardized? -->

|- align="center"
! [[Microsoft Small Basic|Small Basic]] <!-- Language -->
| Application, education, games <!-- Intended use -->
<!-- Sparse matrix for Small Basic -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| [[component-oriented programming|component-oriented]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Smalltalk]] <!-- Language -->
| Application, General, Business, Web, Artificial Intelligence, Education <!-- Intended use -->
<!-- Sparse matrix for Smalltalk -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| concurrent, declarative <!-- Other paradigms -->
| {{yes|1998}}, [http://www.techstreet.com/cgi-bin/detail?product_id=56122 ANSI] <!-- Standardized? -->

|- align="center"
! [[SNOBOL]] <!-- Language -->
| Text processing <!-- Intended use -->
<!-- Sparse matrix for SNOBOL -->
| <!-- Imperative -->
| <!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{unk}} <!-- Standardized? -->

|- align="center"
! [[Standard ML]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Standard ML -->
| {{Yes}}<!-- Imperative -->
| <!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{yes|1997}}, SML '97<ref>[http://www.smlnj.org/sml97.html SMLNJ.org]</ref> <!-- Standardized? -->

|- align="center"
! [[Swift (Apple programming language)|Swift]] <!-- Language -->
| Application, general <!-- Intended use -->
<!-- Sparse matrix for Swift -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| concurrent <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Tcl]] <!-- Language -->
| Application, scripting, Web <!-- Intended use -->
<!-- Sparse matrix for Tcl -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Visual Basic]] <!-- Language -->
| Application, RAD, education, business, general, (Includes VBA), office automation <!-- Intended use -->
<!-- Sparse matrix for Visual Basic -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| [[component-oriented programming|component-oriented]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! {{nowrap|[[Visual Basic .NET]]}} <!-- Language -->
| Application, RAD, education, Web, business, general <!-- Intended use -->
<!-- Sparse matrix for Visual Basic .NET -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| {{Yes}}<!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Visual FoxPro]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Visual FoxPro -->
| <!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| data-centric, logic <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Visual Prolog]] <!-- Language -->
| Application <!-- Intended use -->
<!-- Sparse matrix for Visual Prolog -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| declarative, logic <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Windows PowerShell]] <!-- Language -->
| Administration <!-- Intended use -->
<!-- Sparse matrix for Windows PowerShell -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| {{Yes}}<!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[pipeline programming|pipeline]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[XL (programming language)|XL]] <!-- Language -->
| <!-- Intended use -->
<!-- Sparse matrix for XL -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| <!-- Procedural -->
| <!-- Generic -->
| <!-- Reflective -->
| <!-- Event-driven -->
<!-- -------------------- -->
| [[concept programming]] <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

|- align="center"
! [[Xojo]] <!-- Language -->
| Application, RAD, General, Web <!-- Intended use -->
<!-- Sparse matrix for Xojo -->
| {{Yes}}<!-- Imperative -->
| {{Yes}}<!-- Object-oriented -->
| <!-- Functional -->
| {{Yes}}<!-- Procedural -->
| <!-- Generic -->
| {{Yes}}<!-- Reflective -->
| {{Yes}}<!-- Event-driven -->
<!-- -------------------- -->
| <!-- Other paradigms -->
| {{no}} <!-- Standardized? -->

<!-- -------------------- -->
|- align="center"class="sortbottom"
! Language
! Intended use <!--What this was to be used for originally. Not what it is used for now, which is hard to verify.-->
! Imperative
! Object-oriented
! Functional
! Procedural
! Generic
! Reflective
! Event-driven
! Other paradigm(s)
! Standardized?
|}

==Type systems==
Brief definitions
* A [[Nominative type system|nominal type system]] means that the language decides whether types are compatible and/or equivalent based on explicit declarations and names.
* A [[structural type system]] means that the language decides whether types are compatible and/or equivalent based on the definition and characteristics of the types.
* ''Type checking'' determines whether and when types are verified. Static checking means that type errors are reported based on a program's text (source code). Dynamic checking means that type errors are reported based on a program's dynamic (run-time) behavior.
{| class="wikitable sortable"
|-
! Language
! [[Type safety]]
! [[Type system#Explicit or implicit declaration and inference|Type expression]]
! [[Type equivalence|Type compatibility and equivalence]] <!-- dynamic typing doesn't automatically mean it has structural compatibility -->
! [[Type checking]]
|-
! [[ActionScript]] 3.0
| {{Yes|safe}}
| implicit with optional explicit typing
|
| static
|-
! [[Ada (programming language)|Ada]]
| {{Yes|safe}}<ref group=TS>Unsafe operations are well isolated by a "Unchecked_" prefix.</ref>
| explicit
| nominal
| static
|-
! [[Aldor]]
| {{No|unsafe}}
| implicit
|
| static
|-
! [[ALGOL 58]]
| {{Yes|safe}}
| explicit
|
| static
|-
! [[ALGOL 60]]
| {{Yes|safe}}
| explicit
|
| static
|-
! [[ALGOL 68]]
| {{Yes|safe}}
| explicit
| structural
| static & [[tagged union]]s
|-
! [[APL (programming language)|APL]]
| {{Yes|safe}}
|
|
| dynamic
|-
! [[AutoHotkey]]
| typeless
| n/a
| n/a
| n/a
|-
! [[Ateji PX]]
| {{Yes|safe}}
| explicit
| nominal
| static
|-
! [[Bash (Unix shell)|Bash]]
| {{?}}
| {{?}}
| {{?}}
| {{?}}
|-
! [[BASIC]]
| {{Yes|safe}}
| explicit
| nominal
| static
|-
! [[BLISS]]
| typeless
| n/a
| n/a
| n/a
|-
! [[BeanShell]]
| {{Yes|safe}}
|
| nominal
| dynamic
|-
! [[Boo (programming language)|Boo]]
| {{Yes|safe}}
| implicit with optional explicit typing
|
| static with optional dynamic typing
|-
! [[Bro (software)|Bro]]
| {{Yes|safe}}
| implicit with optional explicit typing
| nominal
| static
|-
! [[C (programming language)|C]]
| {{No|unsafe}}
| explicit
| nominal
| static
|-
! [[C++]] ([[ISO/IEC 14882]])
| {{No|unsafe}}
| explicit
| nominal
| static<ref group=TS>with optional dynamic type casting (see [[dynamic cast]])</ref>
|-
! [[C Sharp (programming language)|C#]]
| {{No|unsafe}}<ref group=TS name=r2 />
| implicit with optional explicit typing
| nominal
| static<ref group=TS>with optional dynamic type (see [[C Sharp syntax#Dynamic|dynamic member lookup]])</ref>
|-
! [[Clean (programming language)|Clean]]
| {{Yes|safe}}
| implicit
|
| static
|-
! [[Clojure]]
| {{Yes|safe}}
| implicit with optional explicit typing
|
| dynamic
|-
! [[COBOL]]
| {{Yes|safe}}
| explicit
| nominal
| static
|-
! [[ColdFusion Markup Language|ColdFusion]] (CFML)
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Common Lisp]]
| {{Yes|safe}}
| implicit with optional explicit typing
|
| dynamic
|-
! [[Curl (programming language)|Curl]]
| {{Yes|safe}}
|
| nominal
|
|-
! [[Cython]]
| {{Yes|safe}}
| implicit with optional explicit typing
| nominal (extension types) and structural (Python)
| dynamic with optional static typing
|-
! [[D (programming language)|D]]
| {{No|unsafe}}<ref group=TS name=r2>It is almost safe, unsafe features are not commonly used.</ref>
| explicit
| nominal
| static
|-
! [[Dylan (programming language)|Dylan]]
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Eiffel (programming language)|Eiffel]]
| {{Yes|safe}}
|
| nominal
| static
|-
! [[Erlang (programming language)|Erlang]]
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Euphoria (programming language)|Euphoria]]
| {{Yes|safe}}
| explicit, implicit with objects
| nominal
| static, dynamic with objects
|-
! [[F Sharp (programming language)|F#]]
| {{Yes|safe}}
| implicit
| nominal
| static
|-
! [[Falcon (programming language)|Falcon]]
| {{Yes|safe}}
| implicit
| structural
| dynamic
|-
! [[Forth (programming language)|Forth]]
| typeless
| n/a
| n/a
| n/a
|-
! [[Fortran]]
| {{Yes|safe}}
| explicit<ref group=TS>Optionally, typing can be ''explicitly implied'' by the first letter of the identifier (known as implicit typing within the Fortran community).</ref>
| nominal
| static
|-
! [[Gambas]]
| {{Yes|safe}}
| explicit
| nominal
|
|-
! [[GLBasic]]
| {{Yes|safe}}
| explicit. Non-explicit declarations available through project options
| nominal
| static
|-
! [[Go (programming language)|Go]]<ref>[http://golang.org/doc/go_spec.html The Go Programming Language Specification]</ref>
| {{Yes|safe}}
| implicit with optional explicit typing
| structural
| static
|-
! [[Gosu (programming language)|Gosu]]
| {{Yes|safe}}
| partially implicit (local type inference)
| nominal (subclassing) and structural (structural)
| static
|-
! [[Groovy (programming language)|Groovy]]
| {{Yes|safe}}
| implicit with optional explicit typing
|
| dynamic with optional static typing
|-
! [[Harbour (programming language)|Harbour]]
| {{Yes|safe}}
| implicit with optional explicit typing
|
| dynamic
|-
! [[Haskell (programming language)|Haskell]]
| {{Yes|safe}}
| implicit with optional explicit typing
| structural
| static
|-
! [[Haxe]]
| {{Yes|safe}}
| implicit with optional explicit typing
| nominal (subclassing) and structural (structural)
| static with optional dynamic typing
|-
! [[Io (programming language)|Io]]
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[ISLISP]]
| {{Yes|safe}}
|
|
| dynamic
|-
! [[J (programming language)|J]]
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Java (programming language)|Java]]
| {{Yes|safe}}<ref>Sheng Liang, Gilad Bracha. [http://doi.acm.org/10.1145/286942.286945 Dynamic class loading in the Java virtual machine]. Volume 33, Issue 10 of ACM SIGPLAN Notices, October 1998.</ref>
| explicit
| nominal
| static
|-
! [[JavaScript]]
| {{Yes|safe}}
| implicit
| structural
| dynamic
|-
! [[Julia (programming language)|Julia]]
| {{Yes|safe}}
| implicit with optional explicit typing<ref>http://julia.readthedocs.org/en/latest/manual/types/</ref>
|
|
|-
! [[Joy (programming language)|Joy]]
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Kotlin (programming language)|Kotlin]]
| {{Yes|safe}}
| partially implicit (local type inference)
| nominal
| static
|-
! [[LabVIEW]]
| {{Yes|safe}}
|
|
|
|-
! [[Lua (programming language)|Lua]]
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Maple (programming language)|Maple]]
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Mathematica]]
| {{Yes|safe}}
|
|
| dynamic
|-
! [[MATLAB]] M-code
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Modula-2]]
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
| nominal
| static
|-
! [[Modula-3]]
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
| structural
| static
|-
! [[MUMPS|MUMPS (M)]]
| typeless
| n/a
| n/a
| n/a
|-
! [[Oberon (programming language)|Oberon]]
| {{Yes|safe}}
| explicit
| nominal
| static and partially dynamic<ref group=TS>dynamic checking of type extensions i.e. inherited types</ref>
|-
! [[Objective-C]]
| {{Yes|safe}}
| explicit
| nominal
| dynamic with optional static typing<ref>[http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocStaticBehavior.html Developer.apple.com]</ref>
|-
! [[OCaml]]
| {{Yes|safe}}
| implicit with optional explicit typing
| structural (records are nominal)
| static
|-
! [[Object Pascal]] ([[Embarcadero Delphi|Delphi]])
| {{Yes|safe}}
| explicit
| nominal
| static
|-
! [[Opa (programming language)|Opa]]
| {{Yes|safe}}
| implicit with optional explicit typing
| structural
| static
|-
! [[Oxygene (programming language)|Oxygene]]
| {{No|unsafe}}
| implicit
|
| static
|-
! [[Oz (programming language)|Oz]]
| {{Yes|safe}}
| implicit
| structural
| dynamic
|-
! [[Pascal (programming language)|Pascal]]
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
| nominal
| static
|-
! [[Perl]] 5
|
| implicit
|
| dynamic
|-
! [[Perl 6]]
|
| partially implicit<ref group=TS>explicit for static types</ref>
|
| dynamic with optional static typing
|-
! [[PHP]]
|
| implicit
|
| dynamic
|-
! [[Plus (programming language)|Plus]]
| {{Yes|safe}}
| explicit
| structural
| static, dynamic (optional)
|-
! [[Prolog]]
|
|
|
| dynamic
|-
! [[Pure (programming language)|Pure]]
|
|
|
| dynamic
|-
! [[Python (programming language)|Python]]
| {{Yes|safe}}
| implicit
| structural
| dynamic
|-
! [[REBOL]]
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Rexx]]
| typeless
| n/a, implicit wrt numbers
| n/a
| static+dynamic wrt numbers
|-
! [[IBM RPG|RPG]]
| {{No|unsafe}}
|
|
| static
|-
! [[Ruby (programming language)|Ruby]]
| {{Yes|safe}}
| implicit
| structural
| dynamic
|-
! [[Rust (programming language)|Rust]]
| {{Yes|safe}}
| implicit with optional explicit typing
|
| static with optional dynamic typing
|-
! [[S (programming language)|S]]
|
|
|
| dynamic
|-
! [[S-Lang (programming library)|S-Lang]]
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Scala (programming language)|Scala]]
| {{Yes|safe}}
| partially implicit (local type inference)
| nominal (subclassing) and structural (structural)
| static
|-
! [[Scheme (programming language)|Scheme]]
| {{Yes|safe}}
| implicit
|
| dynamic ([[Latent_typing|latent]])
|-
! [[Seed7]]
| {{Yes|safe}}
| explicit
| nominal
| static
|-
! [[Simula]]
| {{Yes|safe}}
|
|
| static<ref group=TS>optional for formal and virtual procedures</ref>
|-
! [[Smalltalk]]
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Swift (programming language)|Swift]]
| {{Yes|safe}}
| partially implicit (local type inference)
| nominal (subclassing) and structural (structural)
| static
|-
! [[Standard ML]]
| {{Yes|safe}}
| implicit with optional explicit typing
| structural
| static
|-
! [[Tcl]]
|
|
|
| dynamic
|-
! [[Visual Basic]]
| {{Yes|safe}}
| implicit with optional explicit typing
| nominal
| static
|-
! {{nowrap|[[Visual Basic .NET]]}}
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
|
| static
|-
! [[Visual Prolog]]
| {{Yes|safe}}
| partially implicit
| nominal
| static
|-
! [[Windows PowerShell]]
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[XL (programming language)|XL]]
| {{Yes|safe}}
|
| nominal
| static
|-
! [[Xojo]]
| {{Yes|safe}}
| explicit
| nominal
| static
|- class="sortbottom"
! Language
! Type safety
! Type expression
! Type compatibility among composites
! Type checking
|}

{{Reflist|group=TS}}

==Failsafe I/O and system calls==
Most programming languages will print an [[error message]] and/or throw an [[exception handling|exception]] if an [[input/output]] operation or other [[system call]] (e.g., [[chmod]], [[kill (Unix)|kill]]) fails, unless the programmer has explicitly arranged for different handling of these events. Thus, these languages [[failsafe|fail safely]] in this regard.

Some (mostly older) languages require that the programmer explicitly add checks for these kinds of errors. Psychologically, different [[List of cognitive biases|cognitive biases]] (e.g., [[optimism bias]]) may affect novice and experts alike and these omissions can lead to [[software bug|erroneous behavior]].

{|class="wikitable sortable"
|-
! Language
! Failsafe I/O
|-
! [[Ada (programming language)|Ada]]
| {{yes}} (exceptions)
|-
! [[ALGOL]]
| {{yes}} (exceptions or return value depending on function)
|-
! [[AutoHotkey]]
| {{no}} (global ErrorLevel must be explicitly checked)
|-
! [[Bash (Unix shell)|Bash]]
| {{?}}
|-
! [[Bro (software)|Bro]]
| {{yes}}
|-
! [[C (programming language)|C]]
| {{no}}<ref group="FSIO">[[GNU compiler collection|gcc]] can warn on unchecked error status. Newer versions of [[Visual Studio]] usually throw exceptions on failed I/O when using stdio.</ref>
|-
! [[C++]]
| {{no}}<ref name="VS" group="FSIO">[[GNU compiler collection|g++]] can warn on unchecked error status. Newer versions of [[Visual Studio]] usually throw exceptions on failed I/O when using stdio.</ref>
|-
! [[C Sharp (programming language)|C#]]
| {{yes}}
|-
! [[COBOL]]
| {{no}}
|-
! [[Common Lisp]]
| {{yes}}
|-
! [[D (programming language)|D]]
| {{yes}}{{citation needed|date=February 2011}}
|-
! [[Eiffel (programming language)|Eiffel]]
| {{no}} – It actually depends on the library and it is not defined by the language
|-
! [[Erlang (programming language)|Erlang]]
| {{yes}}
|-
! [[Falcon (programming language)|Falcon]]
| {{yes}}
|-
! [[Fortran]]
| {{yes}}
|-
! [[GLBasic]]
| {{no}} – Will generally cause program to crash
|-
! [[Go (programming language)|Go]]
| {{yes}} (unless result explicitly ignored)
|-
! [[Gosu (programming language)|Gosu]]
| {{yes}}
|-
! [[Harbour (programming language)|Harbour]]
| {{yes}}
|-
! [[Haskell (programming language)|Haskell]]
| {{yes}}
|-
! [[ISLISP]]
| {{yes}}
|-
! [[Java (programming language)|Java]]
| {{yes}}
|-
! [[Julia (programming language)|Julia]]
| {{yes}}
|-
! [[Kotlin (programming language)|Kotlin]]
| {{yes}}
|-
! [[LabVIEW]]
| {{yes}}
|-
! [[Lua (programming language)|Lua]]
| {{no}} (some functions do not warn or throw exceptions)
|-
! [[Mathematica]]
| {{yes}}
|-
! [[Object Pascal]] ([[Embarcadero Delphi|Delphi]])
| {{some}}
|-
! [[Objective-C]]
| {{yes}} (exceptions)
|-
! [[OCaml]]
| {{yes}} (exceptions)
|-
! [[Perl]]
| {{no}}<ref group="FSIO">Considerable error checking can be enabled optionally, but by default Perl is not failsafe.</ref>
|-
! [[Perl 6]]
| {{yes}}
|-
! [[PHP]]
| {{yes}}
|-
! [[Python (programming language)|Python]]
| {{yes}}
|-
! [[REBOL]]
| {{yes}}
|-
! [[Rexx]]
| {{yes}} (with optional '''signal on'''&hellip; trap handling)
|-
! [[IBM RPG|RPG]]
| {{no}}
|-
! [[Ruby (programming language)|Ruby]]
| {{yes}}
|-
! [[Rust (programming language)|Rust]]
| {{yes}} (unless result explicitly ignored)
|-
! [[S (programming language)|S]]
| {{unknown}}
|-
! [[Smalltalk (programming language)|Smalltalk]]
| {{yes}}
|-
! [[Scala (programming language)|Scala]]
| {{yes}}<ref>Scala runs on the Java Virtual Machine from which it inherits the runtime exception handling.</ref>
|-
! [[Standard ML]]
| {{yes}}{{citation needed|date=February 2011}}
|-
! [[Tcl]]
| {{yes}}
|-
! [[Visual Basic]]
| {{yes}}
|-
! [[Visual Prolog]]
| {{yes}}
|-
! [[Xojo]]
| {{yes}}
|- class="sortbottom"
! Language
! Failsafe I/O
|}

{{Reflist|group=FSIO}}

==Expressiveness==
{| id="Expressiveness" class="wikitable" style="float:right;"
|-
! Language !! Statements ratio<ref>Data from [http://books.google.at/books?id=3JfE7TGUwvgC&pg=PT100 Code Complete, p. 100]. The ''Statements ratio'' column "shows typical ratios of source statements in several high-level languages to the equivalent code in C. A higher ratio means that each line of code in the language listed accomplishes more than does each line of code in C.</ref>
! Lines ratio<ref>The ratio of line count tests won by each language to the number won by C when using the ''Compare to'' feature at [http://benchmarksgame.alioth.debian.org/debian/c.php benchmarksgame.alioth.debian.org]. Last updated May, 2006. C gcc was used for C, C++ g++ was used for C++, FORTRAN G95 was used for FORTRAN, Java JDK Server was used for Java, and Smalltalk GST was used for Smalltalk.</ref>
|-
| C || 1 || 1
|-
| C++ || 2.5 || 1
|-
| Fortran || 2 || 0.8
|-
| Java || 2.5 || 1.5
|-
| Perl || 6 || 6
|-
| Smalltalk || 6 || 6.25
|-
| Python || 6 || 6.5
|}

The literature on programming languages contains an abundance of informal claims about their relative [[expressive power]], but there is no framework for formalizing such statements nor for deriving interesting consequences.<ref>{{cite conference | id = {{citeseerx|10.1.1.51.4656}} | title = On the Expressive Power of Programming Languages | first = Matthias | last = Felleisen | conference = ESOP '90 3rd European Symposium on Programming }}</ref> This table provides two measures of expressiveness from two different sources. An additional measure of expressiveness, in [http://benchmarksgame.alioth.debian.org/play.html#gzbytes GZip bytes], can be found on the Computer Language Benchmarks Game.
{{-}}

==Benchmarks==
[[benchmark (computing)|Benchmarks]] are designed to mimic a particular type of workload on a component or system. The computer programs used for compiling some of the benchmark data in this section may not have been fully optimized, and the relevance of the data is disputed. The most accurate benchmarks are those that are customized to your particular situation. Other people's benchmark data may have some value to others, but proper interpretation brings many [[benchmark (computing)#Challenges|challenges]]. [http://benchmarksgame.alioth.debian.org/ The Computer Language Benchmarks Game] site warns against [http://benchmarksgame.alioth.debian.org/dont-jump-to-conclusions.php over-generalizing from benchmark data], but contains a large number of micro-benchmarks of reader-contributed code snippets, with an interface that generates various charts and tables comparing specific programming languages and types of tests.

==Timeline of specific language comparisons==
* 1973 – [http://comjnl.oxfordjournals.org/cgi/content/abstract/17/4/325 Comparative Notes on Algol 68 and PL/I] – S. H. Valentine – February 1973
* 1976 – Evaluation of [[ALGOL 68]], [[JOVIAL]] J3B, [[Pascal (programming language)|Pascal]], [[Simula]] 67, and [[TACPOL]] Versus TINMAN – Requirements for a Common High Order Programming Language. <!-- [http://www.dtic.mil/srch/doc?collection=t2&id=ADA037637 Report Number: 1021-14] -->
* 1977 – [http://comjnl.oxfordjournals.org/cgi/content/abstract/21/4/316 A comparison of PASCAL and ALGOL 68]<ref>http://dare.ubvu.vu.nl/bitstream/1871/2609/1/11054.pdf</ref> – [[Andrew S. Tanenbaum]] – June 1977.
* 1993 – [http://cm.bell-labs.com/cm/cs/who/dmr/hopl.html Five Little Languages and How They Grew] – [[BLISS]], [[Pascal (programming language)|Pascal]], [[ALGOL 68]], [[BCPL]] & [[C (programming language)|C]] – [[Dennis M. Ritchie]] – April 1993.
* 2009 – [http://www.cowlark.com/2009-11-15-go On Go – oh, go on] – How well will Google's [[Go (programming language)|Go]] stand up against Brand X programming language? – David Given – November 2009

==See also==
* [[Alphabetical list of programming languages]]
* [[Comparison of basic instructions of programming languages]]
* [[Comparison of programming languages (string functions)]]
* [[Comparison of programming languages (strings)]]
* [[Comparison of programming languages (syntax)]]
* [[Comparison of programming languages (array)]]
* [[Comparison of programming languages (object-oriented programming)]]
* [[Comparison of programming languages (list comprehension)]]
* [[Comparison of programming languages (mapping)]]
* [[Comparison of programming paradigms]]
* [[Comparison of multi-paradigm programming languages]]
* [[Comparison of type systems]]
* [[Educational programming language]]
* [[Hello world program examples]]
* [[Measuring programming language popularity]]
* [[Programming language]]
* [[TIOBE index]]

==References==
{{Reflist|2}}

==Further reading==
* {{cite book|title=A Guide to Programming Languages: Overview and Comparison|first=Ruknet|last=Cezzar|isbn=978-0-89006-812-0}}

==External links==
* [http://99-bottles-of-beer.net/ 99-bottles-of-beer.net] — one program in over a thousand variations and multiple languages.
* [http://gmarceau.qc.ca/blog/2009/05/speed-size-and-dependability-of.html The speed, size and dependability of programming languages] — charts and narrative based on The Computer Language Benchmarks Game data.
* [http://benchmarksgame.alioth.debian.org/u32/code-used-time-used-shapes.php Shapes: Source Code Size and Run Time] - charts based on current Benchmarks Game data.
* [http://www.scriptol.com/programming/choose.php Comparison of syntaxes] with sample codes.
* [http://rigaux.org/language-study/syntax-across-languages.html Syntax Across Languages]
* [http://merd.sourceforge.net/pixel/language-study/scripting-language/ Scriptometer scores] — multiple comparisons of 26 programming languages.
* [http://pleac.sourceforge.net/ PLEAC] — Programming Language Examples Alike Cookbook.
* [http://www.ohloh.net/languages OHLOH Language Statistics] — gives an indication of the popularity of programming languages in open-source projects.
* [http://hhh.gavilan.edu/dvantassel/history/history.html History of Programming Language Statements] — history and comparison of programming languages.
* [http://rosettacode.org/ Rosetta Code] — a programming language comparison wiki

{{DEFAULTSORT:Comparison of programming languages}}
[[Category:Programming language comparisons]]
