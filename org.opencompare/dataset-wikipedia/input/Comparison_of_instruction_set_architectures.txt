== Factors ==

=== Bits ===
[[Computer architecture]]s are often described as ''n''-[[bit]] architectures. Today ''n'' is often 8, 16, 32, or 64, but other sizes have been used. This is actually a strong simplification. A computer architecture often has a few more or less "natural" datasizes in the [[instruction set]], but the hardware implementation of these may be very different. Many architectures have instructions operating on half and/or twice the size of respective processors major internal datapaths. Examples of this are the 8080, Z80, MC68000 as well as many others. On this type of implementations, a twice as wide operation typically also takes around twice as many clock cycles (which is not the case on high performance implementations). On the 68000, for instance, this means 8 instead of 4 clock ticks, and this particular chip may be described as a [[32-bit]] architecture with a [[16-bit]] implementation. The external databus width is often not useful to determine the width of the architecture; the NS32008, NS32016 and NS32032 were basically the same 32-bit chip with different external data buses. The NS32764 had a [[64-bit computing|64-bit]] bus, but used 32-bit registers.

The width of addresses may or may not be different from the width of data.
Early 32-bit microprocessors often had a 24-bit address, as did the [[System/360]] processors.

=== Operands ===
{{main| instruction set#Number of operands}}

The number of operands is one of the factors that may give an indication about the performance of the instruction set.
A three-operand architecture will allow
 A := B + C
to be computed in one instruction.

A two-operand architecture will allow
 A := A + B
to be computed in one instruction, so two instructions will need to be executed to simulate a single three-operand instruction
 A := B
 A := A + C

=== Endianness ===
An architecture may use "big" or "little" endianness, or both, or be configurable to use either. Little endian processors order [[byte]]s in memory with the least significant byte of a multi-byte value in the lowest-numbered memory location. Big endian architectures instead order them with the most significant byte at the lowest-numbered address. The x86 and the ARM architectures as well as several [[8-bit]] architectures are little endian. Most [[RISC]] architectures (SPARC, Power, PowerPC, MIPS) were originally big endian, but many (including ARM) are now configurable.

== Instruction sets ==
Usually the number of registers is a power of two, e.g. 8, 16, 32. In some cases a hardwired-to-zero pseudo-register is included, as "part" of [[register file]]s of architectures, mostly to simplify indexing modes. This table only counts the integer "registers" usable by general instructions at any moment. Architectures always include special-purpose registers such as the program pointer (PC). Those are not counted unless mentioned. Note that some architectures, such as SPARC, have [[register window]]s; for those architectures, the count below indicates how many registers are available within a register window. Also, non-architected registers for [[register renaming#Architectural vs physical registers|register renaming]] are not counted.

Note, a common type of architecture, "load-store", is a synonym for "Register Register" below, meaning no instructions access memory except special – load to register(s) – and store from register(s) – with the possible exceptions of atomic memory operations for locking.

The table below compares basic information about instruction sets to be implemented in the CPU architectures:

{| class="wikitable sortable" border="1" style="font-size: 90%"
! Instruction set
! Bits
! Version
! Introduced
! Max # [[operand]]s
! Type
! Design <!-- Design Strategy/Philosophy -->
! [[Processor register|Registers]] (excluding FP/vector)
! Instruction encoding
! [[Branch (computer science)|Branch]] evaluation
! [[Endianness]]
! Extensions
! Open
! Royalty free
|-
| [[DEC Alpha|Alpha]]
| 64
|
| 1992
| 3
| Register Register
| [[Reduced instruction set computer|RISC]]
| 32 (including "zero")<!-- 31 64-bit GPRs, 31 64-bit FPRs, one of both is hardwired zero -->
| Fixed <small>(32-bit)</small>
| Condition register
| Bi
| {{H:title|Motion Video Instructions|MVI}}, {{H:title|Byte-Word Extensions|BWX}}, {{H:title|Floating-point Extensions|FIX}}, {{H:title|Count Extensions|CIX}}
| {{No}}
| {{Unknown}}
|-
| [[ARM architecture|ARM]]
| 32
| ARMv7 and earlier
| 1983
| 3
| Register Register
| RISC
| 16 (including [[Program counter|PC]] and [[Stack pointer|SP]])
| Fixed <small>(32-bit)</small>, Thumb: Fixed <small>(16-bit)</small>, Thumb-2: Variable <small>(16- and 32-bit)</small>
| Condition code
| Bi
| NEON, [[Jazelle]], {{H:title|Vector Floating Point|VFP}}, [[ARM architecture#Security Extensions (TrustZone)|TrustZone]], {{Abbr|LPAE||Large Physical Address Extension}}
| {{Unknown}}
| {{No}}
|-
| [[ARMv8-A]]
| 64/32
| ARMv8-A<ref>[http://www.arm.com/files/downloads/ARMv8_Architecture.pdf ARMv8 Technology Preview]</ref>
| 2011<ref>{{cite web |url= http://www.computerworld.com/s/article/9221262/ARM_goes_64_bit_with_new_ARMv8_chip_architecture/ |title= ARM goes 64-bit with new ARMv8 chip architecture |accessdate= 26 May 2012}}</ref>
| 3
| Register Register
| RISC
| 32 (including SP)
| Fixed <small>(32-bit)</small>. In ARMv7 compatibility mode: Thumb: Fixed <small>(16-bit)</small>, Thumb-2: Variable <small>(16- and 32-bit)</small>, A64
| Condition code
| Bi
| None (all extensions of ARMv7 are non-optional)
| {{Unknown}}
| {{No}}
|-
| [[Atmel AVR instruction set|AVR]]
| 8
|
| 1997
| 2
| Register Register
| RISC
| 32 (16 on "reduced architecture")
| Variable <small>(mostly 16-bit, four instructions are 32-bit)</small>
| Condition register, skip conditioned on an I/O or general purpose register bit, compare and skip
| Little
|
| {{Unknown}}
| {{Unknown}}
|-
| [[AVR32]]
| 32
| Rev 2
| 2006 <!-- AVR family 1996, first AVR32 chip in 2006 -->
| 2–3
|
| RISC
| 15 <!-- Up to 15× general-purpose 32-bit registers -->
| Variable<ref>{{cite web | url= http://www.atmel.com/dyn/resources/prod_documents/doc32000.pdf | title= AVR32 Architecture Document | publisher= [[Atmel]] | accessdate= 2008-06-15}}</ref>
|
| Big <!-- have special endian-translating load and store instructions -->
| [[Java Virtual Machine]]
| {{Unknown}}
| {{Unknown}}
|-
| [[Blackfin]]
| 32
|
| 2000
|
|
| RISC<ref>{{cite web | url= http://www.analog.com/en/embedded-processing-dsp/blackfin/content/blackfin_architecture/fca.html | title= Blackfin Processor Architecture Overview | publisher= [[Analog Devices]] | accessdate= 2009-05-10}}</ref>
| 8 <!-- 8× 32-bit registers -->
|
|
| Little<ref>{{cite web | url= http://www.analog.com/FAQs/FAQDisplay.html?DSPKBContentID=752A11D1-9E11-4A7F-91AC-CA3C264C5667 | title= Blackfin memory architecture | publisher= [[Analog Devices]] | accessdate= 2009-12-18}}</ref>
|
| {{Unknown}}
| {{Unknown}}
|-
| [[Transmeta Crusoe|Crusoe]]
| 32
|
| 2000
| 1
| Register Register<ref name="crusoe-arch">{{cite web |url=http://www.realworldtech.com/crusoe-exposed/ |title=Crusoe Exposed: Transmeta TM5xxx Architecture 2 |publisher=Real World Technologies}}</ref>
| VLIW<ref name="crusoe-arch" /><ref name="technology-behind-crusoe">{{cite web |url=http://www.cs.ucf.edu/~lboloni/Teaching/EEL5708_2004/slides/paper_aklaiber_19jan00.pdf |title=The Technology Behind Crusoe Processors |author=Alexander Klaiber |publisher=Transmeta Corporation |date=January 2000 |accessdate=December 6, 2013}}</ref>
| 64<ref name="crusoe-arch" /><ref name="technology-behind-crusoe" />
| Variable <small>(64- or 128-bit)</small><ref name="technology-behind-crusoe" />
| Condition code<ref name="crusoe-arch" />
| Little
|
|
|
|-
| [[DLX]]
| 32
|
| 1990
| 3
|
| RISC
| 32
| Fixed <small>(32-bit)</small>
|
| Big
|
| {{Unknown}}
| {{Unknown}}
|-
| [[eSi-RISC]]
| 16/32
|
| 2009
| 3
| Register Register
| RISC
| 8–72
| Variable<small> (16- or 32-bit)</small>
| Compare and branch and condition register
| Bi
| User-defined instructions
| {{No}}
| {{No}}
|-
| [[Itanium]] (IA-64)
| 64
|
| 2001
|
| Register Register
| [[Explicitly parallel instruction computing|EPIC]]
| 128 <!-- 128× 64-bit general purpose registers, 128× 80-bit floating-point registers, 64× 1-bit predicate registers -->
|
| Condition register
| Bi (selectable)
| Intel Virtualization Technology
| {{No}}
| {{No}}
|-
| [[M32R]]
| 32
|
| 1997
|
|
| RISC
| 16 <!-- 16× 32-bit registers -->
| Fixed <small>(16- or 32-bit)</small>
|
| Bi
|
| {{Unknown}}
| {{Unknown}}
|-
| [[Motorola 68k]]
| 32
|
| 1979
| 2
| Register Memory
| [[Complex instruction set computer|CISC]]
| 8 data and 8 address
| Variable
| Condition register
| Big
|
| {{Unknown}}
| {{Unknown}}
|-
| [[LatticeMico32|Mico32]]
| 32
|
| 2006
| 3
| Register Register
| RISC
| 32<ref>{{cite web | url= http://www.latticesemi.com/products/intellectualproperty/ipcores/mico32/mico32architecture.cfm | title= LatticeMico32 Architecture | publisher= [[Lattice Semiconductor]] | accessdate= 2009-12-18}}</ref>
| Fixed <small>(32-bit)</small>
| Compare and branch
| Big
| User-defined instructions
| {{Yes}}<ref>{{cite web | url= http://www.latticesemi.com/products/intellectualproperty/ipcores/mico32/mico32opensourcelicensing.cfm | title= Open Source Licensing | publisher= [[Lattice Semiconductor]] | accessdate= 2009-12-18}}</ref>
| {{Yes}}
|-
| [[MIPS architecture|MIPS]]
| 64 <small>(32→64)</small>
| 5 <!-- 21 October 1996 -->
| 1981
| 1–3
| Register Register
| RISC
| 4–32 (including "zero")<!-- 15× 32-bit GPRs (R0=0), 16× 32-bit FP regs (paired DP). MIPS64 has 31× 64-bit GPRs. R0=0 sometimes counted as 32nd GPR, but isn't. Some customized chip may have much fewer register in order to fixed the custom instruction set for specific use, ex: Emotion engine -->
| Fixed <small>(32-bit)<small>
| Condition register
| Bi
| [[MDMX]], [[MIPS-3D]]
| {{Unknown}}
| {{No}}
|-
| [[MMIX]]
| 64
|
| 1999
| 3
| Register Register
| RISC
| 256 <!-- 256× 64-bit general-purpose registers and 32× 64-bit special-purpose registers -->
| Fixed <small>(32-bit)</small>
|
| Big
|
| {{Yes}}
| {{Yes}}
|-
| [[MOS Technology 6502|6502]]
| 8
|
| 1975
| 1
| Register Memory
| CISC
| 1
| Variable <small>(8- to 32-bit)</small>
| Condition register
| Little
|
|
|
|-
| [[65k]]
| 64&nbsp;<small>(8→64)</small><ref name="65k arch">{{cite web |url=http://6502.org/users/andre/65k/specsprog.html |title=The 65k Project |publisher=Advanced 6502 |accessdate=20 December 2013}}</ref>
|
| 2006?
| 1
| Memory Memory{{citation needed|date=May 2014}}
| CISC
| 1
| Variable <small>(8-bit to 256&nbsp;bytes)</small>
| Compare and branch{{citation needed|date=December 2013}}
| Little
|
|
|
|-
| [[NS320xx]]
| 32
|
| 1982
| 5
| Memory Memory
| CISC
| 8 <!-- Up to 8× general-purpose 32-bit registers -->
| Variable Huffman coded, up to 23&nbsp;bytes long
| Condition code
| Little
| BitBlt instructions
| {{Unknown}}
| {{Unknown}}
|-
| [[OpenRISC]]
| 32, 64
|
| 2010
| 3
| Register Register
| RISC
| 16 or 32 <!-- 32-bit registers -->
| Fixed
| 
| 
| 
| {{Yes}}
| {{Yes}}
|-
| [[PA-RISC]] (HP/PA)
| 64 <small>(32→64)</small>
| 2.0 <!-- 1996 -->
| 1986
| 3
| Register Register
| RISC
| 32
| Fixed <small>(32-bit)</small>
| Compare and branch
| Big → Bi <!-- 1.0 is big-endian, 1.1 and 2.0 are bi-endian -->
| [[Multimedia Acceleration eXtensions]] (MAX), MAX-2
| {{No}}
| {{Unknown}}
|-
| [[PowerPC]]
| 32/64&nbsp;<small>(32→64)</small>
| 2.07<ref>{{cite web | url=https://www.power.org/documentation/power-isa-v-2-07b/ | title= Power ISA 2.07 | publisher= [[IBM]] | accessdate= 2013-08-12}}</ref> <!-- Power ISA 2.07 released in May 10, 2013 -->
| 1991
| 3
| Register Register
| RISC
| 32
| Fixed <small>(32-bit)</small>, Variable
| Condition code
| Big/Bi
| [[AltiVec]], APU, [[AltiVec#VSX|VSX]], [[Cell (microprocessor)|Cell]]
| {{Yes}}
| {{No}}
|-
| [[RISC-V]]
| 32, 64
| 
| 2010
|
| Register Register
| RISC
| 62 <!-- 31 integer registers and 31 floating-point registers. -->
| Variable
|
| Little
|
| {{Yes}} <!-- BSD License -->
| {{Yes}} <!-- BSD License -->
|-
| [[S+core]]
| 16/32
|
| 2005
|
|
| RISC
|
|
|
| Little
|
| {{Unknown}}
| {{Unknown}}
|-
| [[SPARC]]
| 64 <small>(32→64)</small>
| OSA2015<ref>http://www.oracle.com/technetwork/server-storage/sun-sparc-enterprise/documentation/sparc-processor-2516655.html Oracle SPARC Processor Documentation</ref>
| 1985
| 3
| Register Register
| RISC
| 32 (including "zero")<!-- 8 globals but %g0 always zero; at least 3 register windows of 16, not counting overlap -->
| Fixed <small>(32-bit)</small>
| Condition code
| Big → Bi <!-- Historically big-endian, V9 is bi-endian -->
| [[Visual Instruction Set|VIS]] 1.0, 2.0, 3.0, 4.0
| {{Yes}}
| {{Yes}}<ref>http://sparc.org/technical-documents/#ArchLic SPARC Architecture License</ref>
|-
| [[SuperH]] (SH)
| 32
|
| 1990s
| 2
| Register Register / Register Memory
| RISC
| 16
| Fixed <small>(16- or 32-bit)</small>, Variable
| Condition Code (Single bit)
| Bi
|
| {{Unknown}}
| {{Unknown}}
|-
| System/360 / [[System/370]] / [[z/Architecture]]
| 64 <small>(32→64)</small>
| 3 <!-- ARCHLVL 3 in 2008 -->
| 1964
|
| Register Memory / Memory Memory
| CISC
| 16 <!-- 16× 64/32-bit general purpose registers, 16× 64-bit floating point registers, 16× 32-bit access registers, 16× 64/32-bit control registers -->
| Variable <!-- 2, 4 or 6 bytes long -->
| Condition code
| Big
|
| {{Unknown}}
| {{Unknown}}
|-
| [[Transputer]]
| 32 <small>(4→64)</small>
|
| 1987
| 1
| [[Stack machine]]
| MISC
| 0
| Variable <small>(8 ~ 120 bytes)</small>
| Compare and branch
| Little
|
|
|
|-
| [[VAX]]
| 32
|
| 1977
| 6
| Memory Memory
| CISC
| 16
| Variable <!-- 1 to 321 bytes -->
| Compare and branch
| Little
| VAX Vector Architecture
| {{Unknown}}
| {{Unknown}}
|-
| [[x86]]
| 16, 32, 64 (16→32→64) 
|
| 1978
| 2 (integer)<br>3 (AVX-512)
| Register Memory
| CISC
| {{ubl|6 in 16-bit|8 in 32-bit|16 in 64-bit}}<!-- general-purpose registers; floating-point stack and SSE registers not counted -->
| Variable <!-- 1 to 16 bytes -->
| Condition code
| Little
| [[x87]], [[IA-32]], [[MMX (instruction set)|MMX]], [[3DNow!]], [[Streaming SIMD Extensions|SSE]], [[SSE2]], [[Physical Address Extension|PAE]], [[x86-64]], [[SSE3]], [[SSE4]], [[SSE5]], [[Advanced Vector Extensions|AVX]], [[AES instruction set|AES]], [[FMA instruction set|FMA]]
| {{No}}
| {{No}}
|-
| [[Z80]]
| 8
|
| 1976
| 2
| Register Memory
| CISC
| 8
| Variable <small>(8 to 32&nbsp;bits)</small>
| Condition register
| Little
|
|
|
|-
! Architecture
! Bits
! Version
! Introduced
! Max # operands
! Type
! Design <!-- Design Strategy/Philosophy -->
! Registers (excluding FP/vector)
! Instruction encoding
! Branch evaluation
! Endianness
! Extensions
! Open
! Royalty free
|}

== See also ==
{{Portal|Computer science}}
* [[Central processing unit]] (CPU)
* [[CPU design]]
* [[Comparison of CPU microarchitectures]]
* [[Instruction set]]
* [[List of instruction sets]]
* [[Microprocessor]]
* [[Benchmark (computing)]]

== References ==
{{reflist|30em}}

{{CPU technologies}}

[[Category:Instruction set architectures]]
[[Category:Computer architecture]]
[[Category:Computing comparisons]]
