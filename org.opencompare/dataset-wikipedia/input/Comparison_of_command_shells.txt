{{multiple issues|
{{Refimprove|date=August 2011}}
{{Undue|date=October 2013}}
{{POV|date=July 2014}}
{{Bare URLs|date=February 2015}}}}

{{details|Shell (computing)}}
[[File:Bash screenshot.png|250px|thumb|[[Bash (Unix shell)|Bash]], the default shell on many GNU/Linux distributions.]]
A [[command shell]] is a [[command line interface]] computer program to an [[operating system]].

==General characteristics==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
!Usual environment
!Usually invoked
!Introduced
![[Cross-platform|Platform-independent]]
!Default login shell in
!Default script shell in
!License
!Source code availability
!User interface
!Mouse support
![[Unicode]] support
![[ISO 8601]] support
!Console redirection
![[Standard streams|Stream]] [[Redirection (Unix)|redirection]]
!Configurability<!-- yes/no/which, persistent via config files, registry, temporary via env vars, startup scripts - might require a table of its own -->
!Startup/shutdown scripts
!Batch scripts
!Logging<!-- - might require a table of its own -->
!Native [[Common Information Model (computing)|CIM]]/[[Web-Based Enterprise Management|WBEM]] support
!available as statically linked, independent single file executable

|-

![[Bourne shell]] 1977 version
|[[Version 7 Unix|7th Ed. UNIX]]
|sh
|1977
|{{yes|Yes<ref>A [http://www.collyer.net/who/geoff/v7sh.tar platform independent version] based on the historical UNIX V7 original source code is available from [http://www.collyer.net/who/geoff/ Geoff Collyer]</ref>}}
|[[Version 7 Unix|7th Ed. UNIX]]
|[[Version 7 Unix|7th Ed. UNIX]],
|{{proprietary|Proprietary<ref>The historic UNIX V7 version is available under [http://minnie.tuhs.org/Archive/Caldera-license.pdf a BSD-style license] through the Unix Heritage Society and others.</ref>}}
|{{yes}}
|Text-based [[Command-line interface|CLI]]
|{{no}}
|{{no}}
|{{N/A}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>[[file descriptor|fd]]s</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (<tt>.profile</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{no}}
|{{no}}
|{{yes}}

|-

![[Bourne shell]] current version
|Various [[UNIX]]
|sh
|1977
|{{yes|Yes<ref>A [https://sourceforge.net/projects/schilytools/files/ platform independent version] based on the SVr4/Solaris source code is available from [[Jörg Schilling]]</ref>}}
|SunOS-5.x
|SunOS-5.x
|{{free|[[Common Development and Distribution License|CDDL]]<ref>The SVr4 (OpenSolaris) version https://sourceforge.net/p/schillix-on/schillix-on/ci/default/tree/usr/src/cmd/sh/ is available under CDDL, older versions (except UNIX V7) are available under a AT&T proprietary license. However, most extent versions (AIX, IRIX64, HPUX, Tru64) remain under AT&T license.</ref>{{better source|date=April 2015}}}}
|{{yes}}
|Text-based [[Command-line interface|CLI]]
|{{no}}
|{{yes}}<ref>Since mid 1990s</ref>{{better source|date=April 2015}}
|{{N/A}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>[[file descriptor|fd]]s</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (<tt>.profile</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}<ref>if compiled with -DACCT</ref>
|{{no}}
|{{yes}}
|-

![[POSIX]] shell<ref>{{cite book | author = [[IEEE]] and The Open Group | title = IEEE 1003.1 Standard for Information Technology – Portable Operating System Interface (POSIX): Shell and Utilities, Issue 7 | date = 2008}}</ref>
|[[POSIX]]
|sh
|1992<ref>As part of IEEE Std.1003.2-1992 (POSIX.2); integrated into IEEE Std.1003.1 with the 2001 revision.</ref>
|{{N/A}}
|{{N/A}}
|[[POSIX]]
|{{N/A}}
|{{N/A}}
|Text-based CLI
|{{no}}
|{{yes|Yes, if used by configured locale}}
|{{yes|Yes (<tt>date</tt> and <tt>touch</tt> utilities)}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>fds</tt>)}}
|{{yes|Yes (via variables and options)}}
|Unspecified (<tt>.profile</tt> given as an example)
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{N/A}}

|-

![[Bash (Unix shell)|bash]] (v4)
|[[POSIX]]
|bash, sh
|1989<ref>
{{Cite newsgroup
 | title = Bash is in beta release!
 | author = Brian Fox (forwarded by Leonard H. Tower Jr.)
 | date = 7 June 1989
 | newsgroup = gnu.announce
 |message-id= 8906080235.AA01983@wheat-chex.ai.mit.edu
 | url = http://groups.google.com/group/gnu.announce/msg/a509f48ffb298c35?hl=en
 | accessdate =28 October 2010
}}
</ref>
|{{yes}}
|[[GNU]], [[Linux]] (default for root), [[Mac OS X]] 10.3+
|[[GNU]], [[Linux]], [[Haiku (operating system)|Haiku]], [[Mac OS X]]
|{{free|[[GPL]]}}
|{{yes}}
|Text-based CLI
|{{no}}
|{{yes}}<ref>{{citation |url=http://tldp.org/LDP/abs/html/bashver4.html |title=Advanced Bash-Scripting Guide |chapter=Chapter 37.3.2. Bash, version 4.2 |author=Mendel Cooper |publisher=The Linux Documentation Project |accessdate=April 30, 2015 }}, "Bash now supports the the \u and \U Unicode escape."</ref>{{better source|reason=Unicode escape is just a small part of Unicode support. There's also editing and string handling. This works in bash 4.3.33, but needs a source.|date=May 2015}}
|{{yes|Yes (<tt>printf</tt> builtin)}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>fds</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (<tt>/etc/profile</tt>, <tt>.bash_profile</tt>, <tt>.bash_login</tt>, <tt>.profile</tt>, <tt>.bashrc</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[C shell|csh]]
|[[POSIX]]
|csh
|1978
|{{yes}}
|[[SunOS]]
|{{dunno}}
|{{free|[[BSD licenses|BSD]]}}
|{{yes}}
|Text-based CLI
|{{no}}
|{{no}}
|{{dunno}}
|{{yes}}
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>, <tt>stdout+stderr</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (<tt>~/.cshrc</tt>, <tt>~/.login</tt>, <tt>~/.logout</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[tcsh]]
|[[POSIX]]
|tcsh, csh
|1983<ref name=Greer>
{{Cite newsgroup
| author     = Ken Greer
| title      = C shell with command and filename recognition/completion
| date       = 3 October 1983
| newsgroup  = net.sources
| url        = http://groups.google.com/group/net.sources/msg/7073bf41cc5da330?hl=en
| accessdate = 29 December 2010
}}</ref>
|{{yes}}
|[[FreeBSD]] (default for root), formerly [[Mac OS X]]
|{{dunno}}
|{{free|[[BSD licenses|BSD]]}}
|{{yes}}
|Text-based CLI
|{{no}}
|{{yes}}
|{{dunno}}
|{{yes}}
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>, <tt>stdout+stderr</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (<tt>/etc/csh.cshrc</tt>, <tt>/etc/csh.login</tt>, <tt>~/.tcshrc</tt>, <tt>~/.cshrc</tt>, <tt>~/.history</tt>, <tt>~/.login</tt>, <tt>~/.cshdirs</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[Hamilton C shell]]
|[[Win32]], OS/2
|csh
|1988<ref name=PCWeek>
{{cite journal
| last       = Sussman
| first      = Ann
| title      = Hamilton C Shell Speeds Development Of OS/2 Applications
| journal    = PC Week
| issue      = Dec 26 1988 - Jan 2 1989
| page      = 37
| url        = http://hamiltonlabs.com/archives/Hamilton-C-Shell-Speeds-Development-of-OS-2-Applications-Ann-Sussman-PC-Week-Dec-26-1988.pdf
| accessdate = Nov 22, 2010
}}
</ref>
|{{yes}} (OS/2 version no longer maintained)
|{{optional}}
|{{optional}}
|{{proprietary}}
|{{no}}
|Text-based CLI
|{{no}}
|{{no}}
|{{yes|Yes (-t timestamp operator)}}
|{{yes}}
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>, <tt>stdout+stderr</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (via login.csh, startup.csh and logout.csh)}}
|{{yes|Yes (command line option)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[Scsh]]
|[[POSIX]]
|scsh
|1994
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{free|[[BSD licenses|BSD]]-style}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{no}}
|{{yes}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|[[POSIX]]
|ksh
|1983<ref name=Gomes>
{{Cite newsgroup
| author     = Ron Gomes
| title      = Toronto USENIX Conference Schedule (tentative)
| date       = 9 June 1983
| newsgroup  = net.usenix
| url        = http://groups.google.com/group/net.usenix/msg/fa6e1f7de3b63bba?hl=en
| accessdate = 29 December 2010
}}</ref><ref name=Harris>
{{Cite newsgroup
| author     = Guy Harris
| title      = csh question
| date       = 10 October 1983
| newsgroup  = net.flame
| url        = http://groups.google.com/group/net.flame/msg/4f868085b65af530?hl=en
| accessdate = 29 December 2010
}}</ref>
|{{yes}}
|[[AIX]], [[HP-UX]]
|[[OpenSolaris]]
|{{free|[[Common Public License]]}}
|{{yes}}
|Text-based CLI
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>printf</tt> builtin)}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>fds</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (system and user's <tt>profile</tt> and <tt>kshrc</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[pdksh]]
|[[POSIX]]
|ksh, sh
|1989?
|{{yes}}
|[[OpenBSD]]<ref name="default OpenBSD">[http://www.openbsd.org/faq/faq10.html#rootshell Default shell in OpenBSD] is ksh (pdksh).</ref>
|[[OpenBSD]]<ref name="default OpenBSD" />
|{{free|[[Public Domain]]}}
|{{yes}}
|Text-based CLI
|{{no}}
|{{no}}
|{{N/A}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>fds</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (<tt>/etc/profile</tt>, <tt>.profile</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[zsh]]
|[[POSIX]]
|zsh
|1990
|{{yes}}
|[[Grml]], [[Gobolinux]]
|[[Grml]]
|{{free|[[MIT license|MIT]]-style}}
|{{yes}}
|Text-based CLI
|{{yes|via additional code<ref>The zsh command line editor is fully configurable and can allow mouse support in various ways such as with [http://stchaz.free.fr/mouse.zsh Stéphane Chazelas's <tt>mouse.zsh</tt>].</ref>}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>fds</tt>)}}
|{{yes|Yes (via variables, options, functions, styles, etc.)}}
|{{yes|Yes (system and user's <tt>zshenv</tt>, <tt>zprofile</tt>, <tt>zshrc</tt>, <tt>zlogin</tt>, <tt>zlogout</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[Almquist shell|ash]]
|[[POSIX]]
|sh
|1989
|{{yes}}
|[[Minix]], [[BusyBox]] based systems
|[[NetBSD]], [[Minix]], [[BusyBox]] based systems
|{{free|[[BSD licenses|BSD]]-style}}
|{{yes}}
|Text-based CLI
|{{no}}
|{{partial}} (for BusyBox, supported in command-line editing, but not in string handling<ref>https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=782228</ref>)
|{{yes|Yes (<tt>touch</tt> builtin)}}
|{{yes}}
|{{yes|Yes (arbitrary <tt>fds</tt>)}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (<tt>/etc/profile</tt>, <tt>.profile</tt>)}}
|{{yes|Yes (Unix feature)}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[CCP (CP/M)|CCP]]
|[[CP/M]], [[MP/M]]
|(CCP)
|1975 (1973)
|{{no}}
|[[CP/M]] (no login), [[MP/M]]
|[[CP/M]], [[MP/M]]
|{{proprietary|Freeware (originally proprietary)}}
|{{yes}} (originally closed-source)
|Text-based [[Command-line interface|CLI]]
|{{no}}
|{{no}}
|{{no}}
|{{dunno}}
|{{no}}
|{{no}}
|{{yes}} (automatic via <tt>$$$.SUB</tt>)
|{{partial}} (only via external <tt>SUBMIT</tt> command to update <tt>$$$.SUB</tt>)
|{{no}}
|{{no}}
|{{yes}}

|-

![[COMMAND.COM]]
|[[DOS]]
|[[COMMAND (DOS command)|COMMAND]]
|1980
|{{no}} (3rd party implementations, not bound to a specific DOS vendor or version, available)
|[[DOS]], [[Windows 95]], [[Windows 98|98]], [[Windows 98 SE|SE]], [[Windows ME|ME]]
|[[DOS]], [[Windows 95]], [[Windows 98|98]], [[Windows 98 SE|SE]], [[Windows ME|ME]]
|vendor specific, f.e. [[Microsoft|MS]]-[[Software license agreement|EULA]],<ref>MS-DOS and Windows component – covered by a valid license for MS-DOS or Microsoft Windows</ref> or [[BSD]]/[[GPL]] (free clones)
|{{no}} (except for OpenDOS, DR-DOS, PTS/DOS and FreeDOS)
|Text-based CLI
|{{no}}
|{{no}}
|{{no}} (except for DR-DOS)
|{{yes}} (via <tt>COMMAND con:</tt> or <tt>CTTY con:</tt>)
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>)}}
|{{yes}} (via startup parameters and environment variables, DR-DOS also supports <tt>DIR /C /R</tt> user-default switch command)
|{{yes}} (automatic <tt>\AUTOEXEC.BAT</tt> for primary shell, or explicitly via <tt>/P</tt>, <tt>/P:filename.bat</tt> or <tt>/K</tt> startup options)
|{{yes}} (via <tt>CALL</tt> command or <tt>/C</tt> and <tt>/K</tt> startup options)
|{{no}}
|{{no}}
|{{yes}}

|-

!OS/2 [[CMD.EXE (OS/2)|CMD.EXE]]
|[[OS/2]]
|[[CMD (OS/2 command)|CMD]]
|1987
|{{no}}
|[[OS/2]]
|[[OS/2]]
|{{proprietary|[[IBM]]-[[Software license agreement|EULA]]}}<ref>OS/2 component – covered by a valid license for OS/2</ref>
|{{no}}
|Text-based CLI
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>, <tt>stderr</tt>)}}
|{{dunno}}
|{{partial}} (only via <tt>/K</tt> startup option)
|{{yes}} (via <tt>CALL</tt> command or <tt>/C</tt> and <tt>/K</tt> startup options)
|{{no}}
|{{no}}
|{{dunno}}

|-

!Windows [[CMD.EXE (Windows)|CMD.EXE]]<ref name="cmd /x">Command extensions enabled, or "CMD /X".</ref>
|[[Win32]]
|[[CMD (Windows command)|CMD]]
|1993
|{{no}}
|[[Windows]] NT, 2000, XP, Server 2003, Vista
|[[Windows]] NT, 2000, XP, Server 2003, Vista
|{{proprietary|[[Microsoft|MS]]-[[Software license agreement|EULA]]}}<ref name="ReferenceA">Windows component – covered by a valid license for Microsoft Windows</ref>
|{{no}}
|Text-based CLI
|{{no}}
|{{partial}} (<tt>[[CHCP (command)|CHCP]] [[Code page 65001|65001]]</tt> for [[UTF-8]], but program arguments are still encoded in local codepage)
|{{no}}
|{{no}}
|{{yes}}
|{{yes}} (via registry, startup parameters, and environment variables)
|{{yes}} (automatic via registry, or explicitly via <tt>/K</tt> startup option)
|{{yes}} (via <tt>CALL</tt> command or <tt>/C</tt> and <tt>/K</tt> startup options)
|{{no}}
|{{no}}
|{{yes}}

|-

![[4DOS]], [[NDOS]]
|[[DOS]], [[Windows 95]], [[Windows 98|98]], [[Windows 98 SE|SE]], [[Windows ME|ME]]
|[[4DOS]], [[NDOS]]
|1989 (1986)<!-- Rex Conn started 4DOS in 1986, first versions were posted on Compuserve in 1988, shareware versions (4DOS 2.0) were released through JP Software since 1989. -->
|{{no|No (not bound to a specific OS vendor or version)}}
|{{optional}}
|{{optional}}
|{{free|[[MIT License]], with restrictions}}
|{{yes}}
|Text-based CLI with [[text-based user interface|TUI]] extensions
|{{yes}} (popups, help system, <tt>%_MOUSE</tt> internal variable, <tt>INKEY /M</tt> command)
|{{no}}
|{{yes}}
|{{yes}} (via <tt>4DOS con:</tt> or <tt>CTTY con:</tt>, except for <tt>DRAWBOX</tt>, <tt>DRAWLINE</tt>, <tt>DRAWVLINE</tt>, <tt>LIST</tt>, <tt>SCREEN</tt>, <tt>SCRPUT</tt>, <tt>SELECT</tt>, <tt>VSCRPUT</tt> commands and file&nbsp;/ directory coloring)
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>, <tt>stderr</tt>, <tt>stdout+stderr</tt>)}}
|{{yes}} (via <tt>4DOS.INI</tt>/<tt>NDOS.INI</tt> file, startup parameters, environment variables, <tt>SETDOS</tt> command)
|{{yes}} (automatic <tt>\AUTOEXEC.BAT</tt> for primary shell and <tt>4START.BTM</tt>/<tt>4START.BAT</tt> as well as <tt>4EXIT.BTM</tt>/<tt>4EXIT.BAT</tt> for any shell, or explicitly via <tt>/P</tt>, <tt>/P:dir\filename.ext</tt> or <tt>/K</tt> startup options)
|{{yes}} (via <tt>CALL</tt> command or <tt>/C</tt> and <tt>/K</tt> startup options)
|{{yes}}
|{{no}}
|{{yes}}

|-

![[4OS2]]
|[[OS/2]]
|[[4OS2]]
|1992
|{{no|No (not bound to specific OS/2 versions)}}
|{{optional}}
|{{optional}}
|{{proprietary|Freeware}}
|{{yes}}
|Text-based CLI
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>, <tt>stderr</tt>, <tt>stdout+stderr</tt>)}}
|{{yes}} (via <tt>4OS2.INI</tt> file, startup parameters, environment variables, <tt>SETDOS</tt> command)
|{{yes}} (automatic via <tt>4START.CMD</tt>/<tt>4START.BTM</tt> as well as <tt>4EXIT.CMD</tt>/<tt>4EXIT.BTM</tt> files, or explicitly via <tt>/K startup.cmd</tt> option)
|{{yes}} (via <tt>CALL</tt> command or <tt>/C</tt> and <tt>/K</tt> startup options)
|{{yes}}
|{{no}}
|{{dunno}}

|-

![[Take Command Console|TCC]] (formerly [[4NT]])
|[[Win32]]
|TCC
|1993
|{{no|No (not bound to specific NT versions)}}
|optional
|optional
|{{proprietary|[[Shareware]]}}
|{{no}}
|Text-based CLI ([[Take Command (command line interpreter)|Take Command]]: [[GUI]])
|{{yes}} (console mouse, popups, help system, <tt>%_XMOUSE</tt>, <tt>%_YMOUSE</tt> internal variables, <tt>INKEY /M</tt> command)
|{{yes}}
|{{yes}}
|{{no}}
|{{yes|Yes (<tt>stdin</tt>, <tt>stdout</tt>, <tt>stderr</tt>, <tt>stdout+stderr</tt>)}}
|{{yes}} (via registry, <tt>TCMD.INI</tt>/<tt>4NT.INI</tt> file, startup parameters, environment variables, <tt>SETDOS</tt> command)
|{{yes}} (automatic via registry and <tt>TCSTART</tt>/<tt>4START</tt> as well as <tt>TCEXIT</tt>/<tt>4EXIT</tt>, or explicitly via <tt>/K</tt> startup option)
|{{yes}} (via <tt>CALL</tt> command or <tt>/C</tt> and <tt>/K</tt> startup options)
|{{yes}}
|{{no}}
|{{no}}

|-

![[DIGITAL Command Language|VMS DCL]]<ref>{{cite web
 | url = http://h71000.www7.hp.com/doc/732final/9996/9996pro_contents.html
 | title = HP OpenVMS DCL Dictionary
 | accessdate =23 March 2009
}}</ref>
|[[OpenVMS]]
|{{dunno}}
|1977?
|{{yes}}
|VMS
|VMS
|{{dunno}}
|{{dunno}}
|Text-based CLI
|{{dunno}}
|{{no}}
|{{dunno}}
|{{dunno}}
|{{yes|Yes (<tt>sys$input</tt>, <tt>sys$output</tt> assignment)}}
|{{dunno}}
|{{yes|Yes (SYS$MANAGER:SYLOGIN.COM or user defined LOGIN.COM)}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Windows PowerShell]]
|[[.NET Framework|.NET]]
|powershell
|2006
|{{no}}
|[[Windows]] Server 2008, 7, Vista, XP<ref name="optional">Windows PowerShell is installed with Windows 7, however, it is an optional download for users of Windows Vista or Windows XP.</ref>
|[[Windows]] Server 2008, 7
|{{proprietary|[[Microsoft|MS]]-[[Software license agreement|EULA]]}}<ref name="ReferenceA"/>
|{{no}}
|Graphical CLI
|{{yes}}
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}
|{{yes|Yes (via variables and options)}}
|{{yes|Yes (%USERPROFILE%\Documents \WindowsPowerShell\Microsoft.PowerShell_profile.ps1)}}
|{{yes|Yes (PowerShell feature)}}
|{{yes}}
|{{yes}}
|{{no}}

|-

![[rc]]
|[[Plan 9 from Bell Labs|Plan 9]], [[POSIX]]
|rc
|1989
|{{yes}}
|[[Plan 9 from Bell Labs|Plan 9]], [[Version 10 Unix]]
|[[Plan 9 from Bell Labs|Plan 9]], [[Version 10 Unix]]
|{{free|[[Lucent Public License]]}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{no}}
|{{yes}}

|-

![[BeanShell]]
|[[Java Runtime Environment|Java]]
|{{dunno}}
|2005
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{free|[[LGPL]]}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{dunno}}
|{{yes|Yes (<tt>bsh.jar</tt>)}}

|-

![[Friendly interactive shell|fish]]
|[[POSIX]]
|fish
|2005<ref>
{{cite web
 | title = Fish - The friendly interactive shell
 | author = Axel Liljencrantz
 | date = 17 May 2005
 | url = http://lwn.net/Articles/136232/
 | accessdate = 8 April 2013
}}
</ref>
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{free|[[GPL]]}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{yes}}
|{{dunno}}
|{{dunno}}
|{{yes|Yes (arbitrary <tt>fds</tt>)}}
|{{dunno}}
|{{yes|Yes (<tt>/etc/fish/config.fish</tt> and <tt>~/.config/fish/config.fish</tt>)}}
|{{dunno}}
|{{dunno}}
|{{no}}
|{{dunno}}

|-

!
!Usual environment
!Usually invoked
!Introduced
![[Cross-platform|Platform-independent]]
!Default login shell in
!Default script shell in
!License
!Source code availability
!User interface
!Mouse support
![[Unicode]] support
![[ISO 8601]] support
!Console redirection
![[Standard streams|Stream]] [[Redirection (Unix)|redirection]]
!Configurability<!-- yes/no/which, persistent via config files, registry, temporary via env vars, startup scripts - might require a table of its own -->
!Startup/shutdown scripts
!Batch scripts
!Logging<!-- - might require a table of its own -->
!Native [[Common Information Model (computing)|CIM]]/[[Web-Based Enterprise Management|WBEM]] support
!available as statically linked, independent single file executable

|}

==Interactive features==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"

|-

!
![[#Completions|Command<br/>name<br/>completion]]
![[#Completions|Path<br/>completion]]
![[#Completions|Command<br/>argument<br/>completion]]
![[#Completions|Wildcard<br/>completion]]
![[#Command history|Command<br/>history]]
![[#Mandatory argument prompt|Mandatory<br/>argument<br/>prompt]]
![[#Automatic suggestions|Automatic<br/>suggestions]]
![[#Syntax highlighting|Syntax<br/>highlighting]]
![[#Directory history, stack or similar features|Directory history, stack or similar features]]
![[#Implicit directory change|Implicit<br/>directory<br/>change]]
![[#Autocorrection|Auto&shy;correction]]
![[#Integrated environment|Integrated<br/>environment]]
![[#Snippets|Snippets]]
![[#Value prompt|Value<br/>prompt]]
![[#Menu/options selector|Menu/options<br/>prompt]]
![[#Progress indicator|Progress<br/>indicator]]
![[#Interactive table|Interactive<br/>table]]
![[#Context sensitive help|Context<br/>sensitive<br/>help]]
![[#Command builder|Command<br/>builder]]

|-

![[Bourne shell]] 1977 version
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Bourne shell]] current version
|{{no}}
|{{yes}}<ref>current versions from Jörg Schilling</ref>
|{{no}}
|{{no}}
|{{yes}}<ref>current versions from Jörg Schilling</ref>
|{{no}}
|{{no}}
|{{no}}
|{{yes}}(CDPATH, pushd, popd, dirs), CDPATH since SVr4
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-
![[POSIX]] shell
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>CDPATH</tt>)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes}}
|{{yes}}
|{{yes2|when defined}}
|{{yes}}<ref>Alt-Shift-8 or Alt-* will expand to the full matching list of filenames</ref>
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>CDPATH</tt>, <tt>pushd</tt>, <tt>popd</tt>)}}
|{{yes|optional}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[C shell|csh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>cdpath</tt>, <tt>pushd</tt>, <tt>popd</tt>)}}
|{{yes|optional}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[tcsh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|optional}}
|{{yes2|experimental}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Hamilton C shell]]
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>cdpath</tt>, <tt>pushd</tt>, <tt>popd</tt>)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Scsh]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{yes|Yes (extendable)}}
|{{yes|Yes (extendable)}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>cdpath</tt> builtin, <tt>pushd</tt>, <tt>popd</tt> implemented as functions)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[pdksh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[zsh]]
|{{yes}}
|{{yes}}
|{{yes2|when defined}}
|{{yes}}<ref>{{cite web|title=[Z Shell] Completion System|url=http://zsh.sourceforge.net/Doc/Release/Completion-System.html|publisher=Zsh.sourceforge.net|accessdate=24 February 2015}}</ref>
|{{yes}}
|{{no}}
|{{yes|Yes (via <tt>predict-on</tt> or user-defined<ref>e.g. via 3rd party such as [https://github.com/tarruda/zsh-autosuggestions zsh-autosuggestions]</ref>)}}
|{{no}}<ref>zsh does not feature syntax highlighting, but a 3rd party project exists which offers this capability as an add-on: [https://github.com/zsh-users/zsh-syntax-highlighting zsh-syntax-highlighting]</ref>
|{{yes}}
|{{yes|optional}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Almquist shell|ash]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[CCP (CP/M)|CCP]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[COMMAND.COM]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}<ref name="doskey" >Available through the <tt>[[DOSKEY]]</tt> add-on</ref><ref name="drdos">Available in DR-DOS through <tt>[[HISTORY (CONFIG.SYS directive)|HISTORY]]</tt></ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}} (only via external <tt>CHOICE</tt> command, in DR-DOS also via <tt>SWITCH</tt>&nbsp;/ <tt>DRSWITCH</tt> internal commands)
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!OS/2<br/>[[CMD.EXE]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!Windows<br/>[[CMD.EXE]]
|{{yes2|partial}}
|{{yes2|partial}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>F8</tt>)}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>PUSHD</tt>, <tt>POPD</tt>)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}} (via <tt>SET /P</tt> command)
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[4DOS]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}<ref name="doskey_4dos" >Alternatively available through the <tt>[[DOSKEY]]</tt> add-on as well</ref><ref name="drdos_4dos">Alternatively available in DR-DOS through <tt>[[HISTORY (CONFIG.SYS directive)|HISTORY]]</tt> as well</ref>
|{{no}}
|{{no}}
|{{no}}
|{{yes| (via popup, extended directory searches, <tt>CDPATH</tt>, <tt>PUSHD</tt>, <tt>POPD</tt>, <tt>DIRHISTORY</tt>, <tt>DIRS</tt>, <tt>CDD</tt>, <tt>CD&nbsp;-</tt> commands and <tt>%@DIRSTACK[]</tt> function)}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{yes}} (via <tt>INPUT</tt>, <tt>INKEY</tt> and <tt>ESET</tt> commands)
|{{yes}} (via <tt>@SELECT[]</tt> function, and indirectly via a combination of <tt>INKEY</tt>, <tt>INPUT</tt>, <tt>SWITCH</tt> commands)
|{{no}}
|{{no}}
|{{yes}}
|{{no}} (except for <tt>OPTION</tt> command for INI file directives)

|-

![[4OS2]]
|?
|?
|?
|?
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|?
|{{no}}
|?
|?
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Take Command Console|TCC]] (formerly [[4NT]])
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes| (via popup, extended directory searches, <tt>CDPATH</tt>, <tt>PUSHD</tt>, <tt>POPD</tt>, <tt>DIRHISTORY</tt>, <tt>DIRS</tt>, <tt>CDD</tt>, <tt>CD&nbsp;-</tt> commands and <tt>%@DIRSTACK[]</tt> function)}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{yes}} (via <tt>INPUT</tt>, <tt>INKEY</tt>, <tt>ESET</tt> and <tt>SET /P</tt> commands)
|{{yes}} (via <tt>@SELECT[]</tt> function, and indirectly via a combination of <tt>INKEY</tt>, <tt>INPUT</tt>, <tt>SWITCH</tt> commands)<ref>TCC has special prompt functions for Yes, No, Cancel, Close, Retry.</ref>
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Windows PowerShell]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes (<tt>F8</tt>)}}
|{{yes}}
|{{yes}}<ref name="powershell_ise" />
|{{yes}}<ref name="powershell_ise" />
|{{yes|Yes; multiple stacks; multiple location types}}<ref>[http://technet.microsoft.com/en-us/library/hh849855.aspx Push-Location] (with alias <code>pushd</code>) and [http://technet.microsoft.com/en-us/library/hh849842.aspx Pop-Location] (with alias <code>popd</code>) allows multiple location types (directories of file systems, organizational units of [[Active Directory]], nodes of [[Windows Registry]] etc) to be pushed onto and popped from location stacks.</ref>
|{{no}}
|{{no}}
|{{yes}}<ref name="powershell_ise">Available in PowerShell Integrated Scripting Environment (ISE) which offers integrated command line pane, script editor, intellisense, help, scriting snippets, source-level debugging, syntax highlighting, automatic suggestions ([[IntelliSense]]) and more.</ref>
|{{yes}}<ref name="powershell_ise" />
|{{yes}}
|{{yes}}<ref>The [http://technet.microsoft.com/en-us/library/ff730939.aspx $host.ui.PromptForChoice] function allows for a menu-style prompt for choices. The prompt works from background jobs as well as from remote sessions, displaying the menu prompt on the console of the controlling session.</ref>
|{{yes}}<ref>The [http://technet.microsoft.com/en-us/library/hh849902.aspx <tt>Write-Progress</tt>] cmdlet writes a progress bar which can indicate percentage, remaining seconds etc. The progress bar messages work from background jobs or remote sessions in addition to interactive scripts, i.e. the progress bar is displayed on the console of the controlling session, not as part of the regular output.</ref>
|{{yes|popup window}}<ref>The [http://technet.microsoft.com/en-us/library/hh849920.aspx <tt>Out-GridView</tt>] (with the alias <tt>ogv</tt>) opens an interactive "grid view" (table) where the user can sort, filter and select/choose rows, rearrange columns etc.</ref>
|{{yes}}<ref name="powershell_ise" />
|{{yes|popup window}}<ref>The [http://technet.microsoft.com/en-us/library/hh849915.aspx <tt>Show-Command</tt>] cmdlet inspects the command definition and opens an interactive windows with a named input field for each parameter/switch</ref>

|-

![[rc]]
|{{yes}}<ref name="rio">Handled by [[Rio (program)|rio]], [[GNU readline]], [[editline]] or [[vrl]]</ref>
|{{yes}}<ref name="rio">Handled by [[Rio (program)|rio]], [[GNU readline]], [[editline]] or [[vrl]]</ref>
|{{no}}
|{{no}}
|{{yes}}<ref name="rio" />
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|?
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[BeanShell]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[DIGITAL Command Language|VMS DCL]]
|{{yes|Minimum uniqueness scheme}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Friendly interactive shell|fish]]
|{{yes}}
|{{yes}}
|{{yes2|when defined}}<ref>[http://ridiculousfish.com/shell/user_doc/html/index.html#completion] {{Dead link|date=December 2014}}</ref>
|{{yes}}<ref>[http://ridiculousfish.com/shell/user_doc/html/index.html#completion] {{Dead link|date=December 2014}}</ref>
|{{yes}}
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}<ref>The fish shell is an interactive character based input/output surface</ref>
|{{no}}
|{{yes}}
|{{yes| (via <tt>fish_config</tt> command)}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|}

=== Completions ===
{{main|Command-line completion}}

[[Image:Command-line-completion-example.gif|right|thumb|402px|Command-line completion in [[Bash (Unix shell)|Bash]].]]Completion features assist the user in typing commands at the command line, by looking for and suggesting matching words for incomplete ones. Completion is generally requested by pressing the completion key (often the {{keypress|TAB}} key).

''Command name completion'' is the completion of the name of a command. In most shells, a command can be a program in the command path (usually <code>$PATH</code>), a builtin command, a function or alias.

''Path completion'' is the completion of the path to a file, relative or absolute.

''Wildcard completion'' is a generalization of path completion, where an expression matches any number of files, using any supported syntax for [[#String processing and filename matching|file matching]].

''Variable completion'' is the completion of the name of a variable name ([[environment variable]] or shell variable).
Bash, zsh, and fish have completion for all variable names. PowerShell has completions for [[environment variable]] names, shell variable names and - from within user-defined functions - parameter names.

''Command argument completion'' is the completion of a specific command's arguments. There are two types of arguments, [[Named parameter|named]] and positional: Named arguments, often called ''options'', are identified by their name or letter preceding a value, whereas positional arguments consist only of the value. Some shells allow completion of argument names, but few support completing values.

Bash, zsh and fish offer parameter name completion through a definition external to the command, distributed in a separate completion definition file. For command parameter name/value completions, these shells assume path/filename completion if no completion is defined for the command. Completion can be set up to suggest completions by calling a shell function.<ref>{{cite web|url=http://zsh.sourceforge.net/Doc/Release/Completion-System.html |title=zsh: 20. Completion System |publisher=Zsh.sourceforge.net |date=2013-03-06 |accessdate=2013-08-18}}</ref> The fish shell additionally supports parsing of [[man page]]s to extract parameter information that can be used to improve completions/suggestions. In PowerShell, all types of commands (cmdlets, functions, script files) inherently expose data about the names, types and valid value ranges/lists for each argument. This metadata is used by PowerShell to automatically support argument name and value completion for built-in commands/functions, user-defined commands/functions as well as for script files. Individual cmdlets can also define dynamic completion of argument values where the completion values are computed dynamically on the running system.

=== Command history ===
{{main|Command history}}
A user of a shell may find that he/she is typing something similar to what the user typed before. If the shell supports ''command history'' the user can call
the previous command into the line editor and edit it before issuing it again.

Shells that support completion may also be able to directly complete the command from the command history given a partial/initial part of the previous command.

Most modern shells support command history. Shells which support command history in general also supports completion from history rather than just recalling
commands from the history. In addition to the plain command text, PowerShell also records execution start- and end time and execution status in the command history.

=== Mandatory argument prompt ===
{{further|Named parameter#Optional_parameters}}
Mandatory arguments/parameters are arguments/parameters which must be assigned a value upon invocation the command, function or script file. A shell that can determine ahead
of invocation that there are missing mandatory values, can assist the interactive user by prompting for those values instead of letting the command fail.
Having the shell prompt for missing values will allow the author of a script, command or function to mark a parameter as mandatory instead of creating script code to either
prompt for the missing values (after determining that it is being run interactively) or fail with a message.

PowerShell allows commands, functions and scripts to define arguments/parameters as ''mandatory''. The shell determines prior to invocation if there is any
mandatory arguments/parameters which have not been bound, and will then prompt the user for the value(s) before actual invocation.
<ref name="ps-mandatoryparameter">{{cite web|title=Use PowerShell to Make Mandatory Parameters|url=http://blogs.technet.com/b/heyscriptingguy/archive/2011/05/22/use-powershell-to-make-mandatory-parameters.aspx|publisher=Blogs.technet.com|accessdate=24 February 2015}}</ref>

=== Automatic suggestions ===
{{main|Autocomplete}}
[[Image:Powershell Intellisense example for the Get-Process cmdlet.gif|right|thumb|550px|Command-line completion in [[PowerShell]].]]With automatic suggestions the shell monitors while the interactive user is typing and displays context-relevant suggestions without interrupting the typing instead of the user [[#Command, parameter and -value completion|explicitly requesting completion]].

The PowerShell Integrated Scripting Environment use the discoverable metadata to provide "intellisense" - i.e. suggestions that automatically pops up as the user types, in addition to when the user explicitly requests completion lists by pressing e.g. {{keypress|tab}}
{{further|Intellisense}}

=== Directory history, stack or similar features ===

A shell may record the locations the user has used as current locations and allow fast switching to any location/directory in the history.

One of the uses of the zsh directory stack is to record a directory history. In particular, the <tt>AUTO_PUSHD</tt> option and advanced <tt>cd</tt> arguments and completion are used for this purpose.

PowerShell allows multiple named stacks to be used. Locations (directories) can be pushed onto/popped from the current stack or a named stack. Any stack can become the current (default) stack. Unlike most other shells, PowerShell's ''location'' concept allow location stacks to hold file system locations as well as other location types like e.g. [[Active Directory]] organizational units/groups, [[Database server|SQL Server]] databases/tables/objects, [[Internet Information Server]] applications/sites/virtual directories.

4DOS and Take Command Console record history of current directories and allows the user to switch to a directory in the history using a popup a window.

=== Implicit directory change ===
A directory name can be used directly as a command which implicitly changes the current location to the directory.

=== Autocorrection ===
When a command line does not match a command or arguments directly, spell checking can automatically correct common typing mistakes (such as [[case sensitivity]], missing letters). There are two approaches to this; the shell can either suggest probable corrections upon command invocation, or this can happen earlier as part of a completion or autosuggestion.

The [[tcsh]] and [[zsh]] shells feature optional spell checking/correction, upon command invocation.

Fish does the autocorrection upon completion and autosuggestion. The feature is therefore not in the way when typing out the whole command and pressing enter, whereas extensive use of the tab and right-arrow keys makes the shell mostly case insensitive.

=== Integrated environment ===
{{main|Integrated development environment}}
{{see also|Integrated applications environment|File manager}}

An integrated environment is the integration of the command-line interface with editors (typically multiple documents), [[online help|help system]] and possibly [[debugger|debugging]] and other tools.

[[Take Command Console]] (TCC) comes with an integrated environment with command line pane, file explorer, editor, batch debugger and more.<ref>{{cite web|url=http://jpsoft.com/take-command-windows-scripting.html |title=#1 Windows Command Line Replacement - Windows CMD Command Prompt Commands |publisher=Jpsoft.com |accessdate=2013-08-18}}</ref>

[[Windows PowerShell|PowerShell ISE]] includes a command line pane with support for integrated command line, copy-paste, multiple document editors, [[source-level debugging]], help pane, command explorer pane and scripting interface allowing scripts/modules to manipulate menus, add-ons etc. The ISE (menus, windows, shortcuts, addons) are customizable through scripts.<ref name="technet.microsoft.com">{{cite web|url=http://technet.microsoft.com/en-us/library/hh849182.aspx |title=Windows PowerShell 3.0 Integrated Scripting Environment (ISE) |publisher=Technet.microsoft.com |accessdate=2013-08-18}}</ref>

=== Snippets ===
{{main|Snippet (programming)}}

Snippets are small regions of re-usable of script code. Snippets are often used to save keystrokes, or to assist the user with common scripting patterns.

PowerShell supports snippets in the Integrated Scripting Environment (ISE) using {{keypress|Ctrl|J}}.<ref>{{cite web|author= |url=http://www.powershellmagazine.com/2011/09/28/powershell-v3-ise-and-ise-scripting-model-changes-improvements/ |title=PowerShell v3 ISE and ISE scripting model changes & improvements |publisher=PowerShell Magazine |date=2011-09-28 |accessdate=2013-08-18}}</ref>

=== Value prompt ===
A shell script can prompt the interactive user for a value.

=== Menu/options selector ===
A shell script can present the interactive user with a list of choices.

=== Progress indicator ===
A shell script (or job) can report progress of long running tasks to the interactive user.

Unix/Linux systems may offer other tools support using progress indicators from scripts or as standalone-commands, such as the program "pv".<ref>{{cite web|url=http://linux.die.net/man/1/pv |title=pv(1): monitor progress of data through pipe - Linux man page |publisher=Linux.die.net |date= |accessdate=2015-02-24}}</ref> These are not integrated features of the shells, however.

PowerShell has a built-in command and API functions (to be used when authoring commands) for writing/updating a progress bar. Progress bar messages are sent separates from regular command output
and the progress bar is always displayed at the ultimate interactive users console regardless of whether the progress messages originates from an interactive script, from a background job or from a remote session.

=== Interactive table ===
Output from a command execution can be displayed in a table/grid which can be interactively sorted and filtered and/or otherwise manipulated after command execution ends.

PowerShell <tt>Out-GridView</tt> cmdlet displays data in an interactive window with interactive sorting and filtering.

=== Syntax highlighting ===
{{main|Syntax highlighting}}

An independent project offers syntax highlighting as an add-on to the Z Shell (zsh).<ref>{{cite web|url=https://github.com/zsh-users/zsh-syntax-highlighting |title=zsh-users/zsh-syntax-highlighting 路 GitHub |publisher=Github.com |accessdate=2013-08-18}}</ref> This is not part of the shell, however.
PowerShell ISE has syntax highlighting on the current command line as well as in the script pane.<ref name="technet.microsoft.com"/>
Take Command Console (TCC) offers syntax highlighting in the integrated environment.

===Context sensitive help===
{{main|Context-sensitive help}}

4DOS, 4OS2, 4NT / Take Command Console and PowerShell (in PowerShell ISE) looks up context-sensitive help information when {{keypress|F1}} is pressed.

Zsh provides various forms of configurable context-sensitive help as part of its <tt>run-help</tt> widget, <tt>_complete_help</tt> command, or in the completion of options for some commands.

===Command builder===
A command builder is a guided dialog which assists the user in filling in a command. PowerShell has a command builder which is available in PowerShell ISE or which can be displayed separately through the <tt>Show-Command</tt> cmdlet.<ref>{{cite web|url=http://technet.microsoft.com/en-us/library/hh849915.aspx |title=Show-Command |publisher=Technet.microsoft.com |accessdate=2013-08-18}}</ref>

==Programming features==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
![[Subroutine|Functions]]
![[Exception handling]]
!Search & replace on variable substi&shy;tutions
![[Arithmetic|Arith&shy;metic]]
![[Floating point]]
!Math function library
![[Array data type|Linear arrays]] or [[List (abstract data type)|lists]]
![[Associative array|Assoc&shy;iative arrays]]
![[Lambda calculus|Lambda functions]]
![[eval|eval func&shy;tion]]
![[PRNG|Pseudo&shy;random number generation]]
![[Bytecode]]

|-

![[Bourne shell]] 1977 version
|{{no}}
|{{yes| Yes (via <tt>trap</tt>)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Bourne shell]] current version
|{{yes| Yes since SVR2}}
|{{yes| Yes (via <tt>trap</tt>)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[POSIX]] shell
|{{yes}}
|{{yes| Yes (via <tt>trap</tt>)}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes}}
|{{yes| Yes (via <tt>trap</tt>)}}
|{{yes|Yes (via <tt>${//}</tt> syntax)}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>$RANDOM</tt>) }}
|{{no}}

|-

![[C shell|csh]]
|{{no}}
|{{no}}
|{{yes|Yes (via <tt>$var:s///</tt> syntax)}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[tcsh]]
|{{no}}
|{{no}}
|{{yes|Yes (via <tt>$var:s///</tt> syntax)}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Hamilton C shell]]
|{{yes}}
|{{no}}
|{{yes|Yes (via <tt>$var:s///</tt> syntax)}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes| Yes (random utility)}}
|{{no}}

|-

![[Scsh]]
|{{yes}}
|?
|{{yes|Yes (via string functions and regular expressions)}}
|?
|?
|?
|{{yes}}
|?
|{{yes}}
|{{yes}}
|{{yes|Yes (random-integer, random-real)}}
|{{yes|Yes (compiler is Scheme48 virtual machine, via <tt>scshvm</tt>)}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{yes}}
|{{yes| Yes (via <tt>trap</tt>)}}
|{{yes|Yes (via <tt>${//}</tt> syntax and builtin commands)}}
|{{yes}}
|{{yes}}
|{{no}}
|?
|{{yes}}
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>$RANDOM</tt>)}}
|{{yes|Yes (compiler is called <tt>shcomp</tt>)}}

|-

![[pdksh]]
|{{yes}}
|{{yes| Yes (via <tt>trap</tt>)}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|?
|?
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>$RANDOM</tt>)}}
|{{no}}

|-

![[zsh]]
|{{yes}}
|{{yes}}
|{{yes|Yes (via <tt>${:s//}</tt> and <tt>${//}</tt> syntax)}}
|{{yes}}
|{{yes}}
|{{yes|Yes (<tt>zsh/mathfunc</tt> module)}}
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>$RANDOM</tt>)}}
|{{yes|Yes (built-in <tt>zcompile</tt> command)}}

|-

![[Almquist shell|ash]]
|{{yes}}
|{{yes}} (via <tt>trap</tt>)
|{{no}}
|{{yes|Yes (since 1992)<ref>[http://www.in-ulm.de/~mascheck/various/ash/ Ash Variants]</ref>}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[CCP (CP/M)|CCP]]
|{{no}}
|?
|{{no}}
|{{no}}
|?
|?
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[COMMAND.COM]]
|{{no}}
|{{partial}} (only Auto-fail (via <tt>COMMAND /F</tt> (or <tt>/N</tt> in some versions of DR-DOS))
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!OS/2 [[CMD.EXE]]
|{{no}}
|{{no}}
|{{no}}
|?
|{{no}}
|{{no}}
|?
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!Windows [[CMD.EXE]]
|{{yes|Yes (via <tt>CALL :label</tt>)}}
|{{no}}
|{{yes|Yes (via <tt>SET %''varname'':''expression''</tt> syntax)}}
|{{yes|Yes (via <tt>SET /A</tt>)<ref>{{cite web|url=http://ss64.com/nt/set.html |title=Set - Environment Variable &#124; Windows CMD |publisher=SS64.com |date= |accessdate=2015-02-24}}</ref>}}
|{{no}}
|{{no}}
|{{yes|Yes (via <tt>SET</tt><ref>{{cite web|url=https://stackoverflow.com/questions/18462169/how-to-loop-through-array-in-batch |title=How to loop through array in batch? |publisher=Stack Overflow |date= |accessdate=2015-02-24}}</ref>)}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>%random%</tt>)}}
|{{no}}

|-

![[4DOS]]
|{{yes}}
|{{yes|Yes (via <tt>ON</tt> command, optional Auto-fail via <tt>4DOS /F</tt>)}}
|{{yes|Yes (via <tt>%@Replace[...]</tt> function)}}
|{{yes|Yes (via <tt>SET /A</tt>)}}
|?
|?
|{{yes|Yes (via ranges, include lists, <tt>@</tt>file lists and <tt>FOR</tt> command)}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>%@Random[...]</tt> function)}}
|{{yes|Yes (via <tt>BATCOMP</tt> command)}}

|-

![[4OS2]]
|?
|?
|?
|?
|?
|?
|?
|?
|{{no}}
|{{yes}}
|{{yes}} (<tt>%@Random[...]</tt> function)
|?

|-

![[Take Command Console|TCC]] (formerly [[4NT]])
|{{yes}}
|{{yes|Yes (via <tt>ON</tt> and various <tt>...MONITOR</tt> commands)}}
|{{yes|Yes (via <tt>%@Replace[...]</tt> function)}}
|{{yes|Yes (via <tt>SET /A</tt>)}}
|?
|?
|{{yes|Yes (via ranges, include lists, <tt>@</tt>file lists and <tt>FOR</tt> command)}}
|?
|{{no}}
|{{yes}}
|{{yes}} (<tt>%@Random[...]</tt> function)
|{{yes}} (via <tt>BATCOMP</tt> command)

|-

![[Windows PowerShell]]
|{{yes}}
|{{yes}}
|{{yes|Yes (<tt>-replace</tt> operator)}}
|{{yes}}
|{{yes}}
|{{yes|[Math] class}}<ref>The .NET ''System.Math'' class defines mathematical functions that can be used through the shortcut <tt>[Math]</tt>, e.g. <tt>[Math]::Sin</tt> for the ''sinus'' function.[http://technet.microsoft.com/en-us/library/dd347632.aspx]</ref>
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes, automatic}}

|-

![[rc]]
|{{yes}}
|{{yes}}
|{{no}}
|?
|?
|?
|?
|?
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[BeanShell]]
|{{yes}}
|{{yes}}
|?
|{{yes}}
|?
|?
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}

|-

![[DIGITAL Command Language|VMS DCL]]
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}
|?
|?
|{{yes}}
|?
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[friendly interactive shell|fish]]
|{{yes}}
|{{yes| Yes (via <tt>trap</tt>)}}
|{{no}}
|{{Optional|Optional {{ref|fishmath|fish math}}}}
|{{Optional|Optional {{ref|fishmath|fish math}}}}
|{{Optional|Optional {{ref|fishmath|fish math}}}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>random</tt>)}}
|{{no}}

|}

;'''Notes'''
:{{note|fishmath|fish math}}:The bundled <tt>math</tt> function requires [[bc (programming language)|bc]].

==String processing and filename matching==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
!String processing
![[Alternation (string expansion)|Alternation]] ([[Brace expansion]])
!Pattern matching ([[regular expression]]s built-in)
!Pattern matching (filename [[glob (programming)|globbing]])
!Globbing qualifiers (filename generation based on file attributes)
![[Recursive globbing]] (generating files from any level of subdirectories)

|-

![[Bourne shell]]
|?
|{{no}}
|{{no}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>)}}
|{{no}}
|{{no}}

|-

![[POSIX]] shell
|?
|{{no}}
|{{no}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>)}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|?
|{{yes}}
|{{yes}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>, <tt>{...}</tt>)}}
|{{no}}
|{{yes}} (<tt>**/...</tt>)

|-

![[C shell|csh]]
|{{yes|Yes (:s and other editing operators)}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[tcsh]]
|{{yes|Yes (:s and other editing operators)}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Hamilton C shell]]
|{{yes|Yes (:s and other editing operators + substr, strlen, strindex, printf, reverse, upper, lower, concat and other builtin functions)}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{yes|Yes (via indefinite directory <tt>"..."</tt> wildcard<ref>{{Citation
| url  = http://hamiltonlabs.com/UserGuide/31-Wildcarding.htm
| title = Hamilton C shell Language reference:  Wildcarding and pattern matching
| accessdate = October 29, 2013
| publisher = Hamilton Laboratories
| quote = <tt>...</tt> Indefinite Directory: match any number of directory levels – zero or more – whatever it takes to make the rest of the pattern match.
}}</ref>)}}

|-

![[Scsh]]
|?
|?
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|?
|?
|{{yes}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>)}}
|{{no}}
|{{yes}} (with <tt>set -G</tt>, no following of symlinks)

|-

![[pdksh]]
|?
|{{yes}}<ref>
{{cite book
| last1                 = Seebach
| first1                = Peter
| title                 = Beginning Portable Shell Scripting: From Novice to Professional
| url                   = http://books.google.com/books?id=53zaxy423xcC
| series                = Expert's voice in open source
| publisher             = Apress
| publication-date      = 2008
| page                  = 149
| isbn                  = 9781430210436
| accessdate            = 2014-09-17
| quote                 = Brace expansion is available in ksh93, pdksh, bash, and zsh.
}}
</ref>
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[zsh]]
|{{yes}} (through variable processing: e.g. substring extraction, various transformations via parameter expansion)
|{{yes}}
|{{yes}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>, [[extended globbing]]<ref name="extended globbing">Zsh offers a variety of [http://zsh.sourceforge.net/Guide/zshguide05.html#l135 globbing options].</ref>)}}
|{{yes}}
|{{yes}} (<tt>**/...</tt> or <tt>***/...</tt> to follow symlinks)

|-

![[Almquist shell|ash]]
|?
|?
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[CCP (CP/M)|CCP]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[COMMAND.COM]]
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>)}}
|{{no}}
|{{no}}

|-

!OS/2 [[CMD.EXE]]
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>)}}
|{{partial}} (only in <tt>DIR /A:...</tt> command)
|{{no}}

|-

!Windows [[CMD.EXE]]
|{{partial}} (only through <tt>FOR /F</tt> and <tt>SET /A</tt>)
|{{no}}
|{{yes|Yes (via <tt>FINDSTR /R</tt> command)}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>)}}
|{{partial}} (only in <tt>DIR /A:...</tt> command)
|{{yes}} (via <tt>FOR /R</tt> command, or, where available, indirectly via <tt>/S</tt> subdir option)

|-

![[4DOS]]
|{{yes}} (through variable functions <tt>%@...[]</tt>, extended environment variable processing, various string commands and <tt>FOR /F</tt> and <tt>SET /A</tt>)
|{{no}}
|{{no}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>, [[extended wildcards]], <tt>SELECT</tt> popup command)}}
|{{yes}} (via <tt>/A:...</tt> attribute and <tt>/I"..."</tt> description options and <tt>/[S...]</tt> size, <tt>/[T...]</tt> time, <tt>/[D...]</tt> date, and <tt>/[!...]</tt> file exclusion ranges)
|{{yes}} (via <tt>FOR /R</tt> command, or indirectly via <tt>GLOBAL</tt> command or, where available, <tt>/S</tt> subdir option)

|-

![[4OS2]]
|?
|{{no}}
|{{no}}
|?
|?
|?

|-

![[Take Command Console|TCC]] (formerly [[4NT]])
|{{yes}} (through variable functions <tt>%@...[]</tt>, extended environment variable processing, various string commands and <tt>FOR /F</tt> and <tt>SET /A</tt>)
|{{no}}
|{{yes}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>, [[extended wildcards]], <tt>SELECT</tt> popup command)}}
|{{yes}} (via <tt>/A:...</tt> attribute and <tt>/I"..."</tt> description options and <tt>/[S...]</tt> size, <tt>/[T...]</tt> time, <tt>/[D...]</tt> date, <tt>/[O...]</tt> owner, and <tt>/[!...]</tt> file exclusion ranges)
|{{yes}} (via <tt>FOR /R</tt> command, or indirectly via <tt>GLOBAL</tt> command or, where available, <tt>/S</tt> subdir option)

|-

![[Windows PowerShell]]
|{{yes|Yes (Concat/Substring/Insert/Remove/Replace, ToLower/ToUpper, Trim/TrimStart/TrimEnd, Compare, Contains/StartsWith/EndWith, Format, IndexOf/LastIndexOf, Pad/PadLeft/PadRight, Split/Join, regular expression functions and other .NET string functions)}}
|{{no}}
|{{yes|Yes (full regex support)<ref>PowerShell leverages the full [[.NET Framework|.NET]] regular expression engine which features named captures, zero-width lookahead/-behind, greedy/non-greedy, character classes, level counting etc.</ref>}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>[...]</tt>)}}
|?
|?

|-

![[rc]]
|?
|?
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[BeanShell]]
|?
|?
|{{yes}}
|?
|?
|?

|-

![[DIGITAL Command Language|VMS DCL]]
|?
|?
|{{no}}
|{{yes}}
|{{no}}
|{{yes}} (via <tt>[SUBDIR...]</tt>)

|-

![[friendly interactive shell|fish]]
|{{no}}
|{{yes|Yes}}
|{{no}}
|{{yes|Yes (<tt>*</tt>, <tt>?</tt>, <tt>{...}</tt>)}}
|{{no}}
|{{yes}} (<tt>**/...</tt>)
|}

==Inter-process communication==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
![[Pipeline (software)|Pipes]]
![[Command substitution]]
![[Process substitution]]
!Subshells
![[Transmission Control Protocol|TCP]]/[[User Datagram Protocol|UDP]] connections as streams
![[#Keystroke stacking|Keystroke stacking]]

|-

![[Bourne shell]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{N/A}}<ref name="xautomation">xautomation and xdotool can be used to generate keystrokes under [[X Window System]]; or a program can be run in a [[pseudoterminal]] to be able to control it (as with the <tt>[[expect]]</tt> tool).</ref>

|-

![[POSIX]] shell
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{N/A}}<ref name="xautomation"/>

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes|bytes concurrent}}
|{{yes}}
|{{yes|Yes (if system supports <tt>/dev/fd/''<n>''</tt> or named pipes)}}
|{{yes}}
|{{yes|Yes (client only)}}
|{{N/A}}<ref name="xautomation"/>

|-

![[C shell|csh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{N/A}}<ref name="xautomation"/>

|-

![[tcsh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{N/A}}<ref name="xautomation"/>

|-

![[Hamilton C shell]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|?

|-

![[Scsh]]
|{{yes|text}}
|?
|?
|?
|{{yes}}
|{{N/A}}<ref name="xautomation"/>

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{yes|bytes (may contain serialized objects if <tt>print -C</tt> is used) concurrent}}
|{{yes|Yes (<tt>$(...)</tt> and <tt>${<space>...;}</tt>)}}
|{{yes|Yes (if system supports <tt>/dev/fd/''<n>''</tt>)}}
|{{yes}}
|{{yes|Yes (and SCTP support, client only)}}
|{{N/A}}<ref name="xautomation"/>

|-

![[pdksh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{N/A}}<ref name="xautomation"/>

|-

![[zsh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes (client and server, but only TCP)}}
|{{N/A}}<ref name="xautomation"/>

|-

![[Almquist shell|ash]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{N/A}}<ref name="xautomation"/>

|-

![[CCP (CP/M)|CCP]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[COMMAND.COM]]
|{{yes|text sequential temporary files}}
|{{no}}
|{{no}}
|{{partial}} (only under DR-DOS multitasker via <tt>COMMAND.COM /T</tt>)
|{{no}}
|{{no}}

|-

!OS/2 [[CMD.EXE]]
|{{yes|text concurrent}}
|{{no}}
|{{no}}
|?
|{{no}}
|{{no}}

|-

!Windows [[CMD.EXE]]
|{{yes|text concurrent}}
|{{yes|Yes (via <tt>FOR /F</tt> command)}}
|{{no}}
|{{yes|Yes (Backtick: <tt>`</tt> in <tt>FOR /F usebackq</tt>)}}
|{{no}}
|{{no}}

|-

![[4DOS]]
|{{yes|text sequential temporary files}}
|{{yes|Yes (via <tt>FOR /F</tt> command)}}
|?
|{{partial}} (via <tt>%@EXECSTR[]</tt> and <tt>%@EXEC[]</tt>, or via <tt>SET /M</tt>, <tt>ESET /M</tt> and <tt>UNSET /M</tt> and <tt>%@MASTER[...]</tt>)
|{{no}}
|{{yes}} (via <tt>KEYSTACK</tt> and <tt>[[KSTACK.COM|KSTACK]]</tt>)<ref name="4DOS_8.00_HELP">{{cite book | title = 4DOS 8.00 online help | first1 = Rex | last1 = Conn | first2 = Tom | last2 = Rawson | first3 = Matthias | last3 = Paul | first4 = Charles | last4 = Dye | first5 = Luchezar | last5 = Georgiev | date = 2002-02-27}}</ref>

|-

![[4OS2]]
|{{yes|text concurrent}}
|?
|?
|?
|{{no}}
|{{yes}} (via <tt>KEYSTACK</tt>)

|-

![[Take Command Console|TCC]] (formerly [[4NT]])
|{{yes|text concurrent}}
|{{yes|Yes (via <tt>FOR /F</tt> command)}}
|?
|{{partial}} (via <tt>%@EXECSTR[]</tt> and <tt>%@EXEC[]</tt>)
|{{yes}} (via <tt>FTP</tt>, <tt>TFTP</tt>, <tt>FTPS</tt>, <tt>SFTP</tt>, <tt>HTTP</tt>, <tt>HTTPS</tt> and <tt>IFTP</tt>, client only)
|{{yes}} (via <tt>KEYSTACK</tt>)

|-

![[Windows PowerShell]]
|{{yes|objects concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{yes}}
|?

|-

![[rc]]
|{{yes|text concurrent}}
|{{yes}}
|{{yes|Yes (via: <tt><{cmd}</tt> if system supports <tt>/dev/fd/''<n>''</tt>)}}
|{{yes}}
|{{no}}
|?

|-

![[BeanShell]]
|{{no|not supported}}
|?
|?
|?
|{{yes}}
|?

|-

![[DIGITAL Command Language|VMS D</tt>CL]]
|{{yes|text (via <tt>PIPE</tt> command)}}
|{{no}}
|{{no}}
|{{yes|Yes (spawn)}}
|{{yes|Yes (server TCP only)}}
|?

|-

![[friendly interactive shell|fish]]
|{{yes|bytes concurrent}}
|{{yes}} (<tt>...</tt>)
|{{yes|Yes (<tt>...</tt> <nowiki>|</nowiki> <tt>psub</tt>)}}
|{{no}}
|{{no}}
|{{N/A}}<ref name="xautomation"/>
|}

===Keystroke stacking===
In anticipation of what a given running application may accept as keyboard input, the user of the shell instructs the shell to generate a sequence of ''simulated'' keystrokes, which the application will interpret as an keyboard input from an interactive user. By sending keystroke sequences the user may be able to direct the application to perform actions that would be impossible to achieve through input redirection or would otherwise require an interactive user, f.e. if an application acts on keystrokes, which cannot be redirected, distinguishes between normal and extended keys, flushes the queue before accepting new input on startup or under certain conditions, or because it does not read through standard input at all. Keystroke stacking typically also provides means to control the timing of simulated keys being sent or to delay new keys until the queue was flushed etc. It also allows to simulate keys which are not present on a keyboard (because the corresponding keys do not physically exist or because a different keyboard layout is being used) and therefore would be impossible to type by a user.

==Security features==
{{importance-section|date=July 2014}}
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
![[#Secure prompt|Secure (password) prompt]]
![[#Non-password credentials prompt|Non-password credentials prompt]]
![[#Encrypted variables/parameters|Encrypted variables/ parameters]]
!File/directory passwords
![[#Execute permission|Execute permission]]
![[#Script origin execution restriction|Script origin execution restriction]]
![[#Signed script restriction|Signed script restriction]]
![[#Multilevel execution policies|Multilevel execution policies]]
![[#Restricted shell subset|Restricted shell subset]]
![[#Safe data subset|Safe data subset]]

|-

![[Bourne shell]]
|{{some|via <tt>stty</tt>}}<ref name="tty">The shell can use the <tt>stty</tt> utility to suppress echoing of typed characters to the screen. This requires multiple steps: 1. reading the current echo state, 2. switching echo off, 3. reading the input, 4. switching echo state back to the original state.</ref>
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit">Scripts can only be invoked directly if user has ''execute permission'' on the file. Scripts can still be piped as input to the shell processor without execute permission.</ref>
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[POSIX]] shell
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit">Scripts can only be invoked directly if user has ''execute permission'' on the file. Scripts can still be piped as input to the shell processor without execute permission.</ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes|<tt>read -s</tt>}}
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[C shell|csh]]
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit">Scripts can only be invoked directly if user has ''execute permission'' on the file. Scripts can still be piped as input to the shell processor without execute permission.</ref>
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[tcsh]]
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Hamilton C shell]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Scsh]]
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[pdksh]]
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[zsh]]
|{{yes|<tt>read -s</tt>}}
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Almquist shell|ash]]
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[CCP (CP/M)|CCP]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[COMMAND.COM]]
|{{partial}} (only under DR-DOS, prompts for password if file/directory is protected)
|{{no}}
|{{no}}
|{{partial}} (only under DR-DOS via <tt>\dirname;dirpwd\filename;filepwd</tt> syntax)<ref name="drpwd">Under DR-DOS the password separator for file and directory passwords is a semicolon. This is also supported under 4DOS for as long as the command does not support include lists. Unter 4DOS, the password separator must be doubled for all commands supporting include lists in order to distinguish passwords from include lists. Commands not supporting include lists accept both forms. DR-DOS 7.02 and higher optionally accept a doubled semicolon as well, so that doubled semicolons work under both COMMAND.COM and 4DOS regardless of the command executed.</ref>
|{{partial}} (only under DR-DOS, if files are password-protected for read and/or execute permission)<ref name="drexec">DR-DOS supports file passwords for read/write/delete and optionally execute permissions. Files are not protected by default, but the system can be set up so that f.e. batch scripts require a password to read.</ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!OS/2 [[CMD.EXE]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!Windows [[CMD.EXE]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[4DOS]]
|{{yes}} (via <tt>INPUT /P</tt> or <tt>INKEY /P</tt>)<ref name="input/p"><tt>INPUT /P</tt> and <tt>INKEY /P</tt> echoes back asterisks for each typed character</ref>
|{{no}}
|{{no}}
|{{partial}} (only under DR-DOS via <tt>\dirname;;dirpwd\filename;;filepwd</tt> syntax)<ref name="drpwd"/>
|{{partial}} (only under DR-DOS, if files are password-protected for read and/or execute permission)<ref name="drexec"/>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[4OS2]]
|?
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Take Command Console|TCC]] (formerly [[4NT]])
|{{yes}} (via <tt>INPUT /P</tt>, <tt>INKEY /P</tt> or <tt>QUERYBOX /P</tt>)<ref name="input/p"/>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}} (via NTFS <tt>Zone ID</tt> config setting)
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Windows PowerShell]]
|{{yes}}<ref><tt>Read-Host -AsSecureString</tt> reads a string of characters from the input device into an encrypted string, one character at a time thus ensuring that there is no memory image of the clear text which could be gleaned from scanning memory, or from crash dumps, memory dumps, paging files, log files or similar.</ref>
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}<ref>PowerShell script files (<tt>.ps1</tt> files) are by default associated with the Notepad editor, not with the PowerShell execution engine. Invoking a <tt>.ps1</tt> file will launch Notepad rather than executing the script.</ref>
|{{yes}}<ref name="microsoft1">{{cite web|url=http://technet.microsoft.com/en-us/library/hh847748.aspx |title=About Execution Policies |publisher=Technet.microsoft.com |date= |accessdate=2015-02-24}}</ref>
|{{yes}}<ref name="microsoft1"/>
|{{yes}}<ref name="microsoft1"/>
|{{yes}}<ref>Startup scripts per computer/user can import modules and expose a subset the commands/functions available in the modules.</ref>
|{{yes}}<ref>{{cite web|url=http://technet.microsoft.com/en-us/library/hh848302.aspx |title=About Data Sections |publisher=Technet.microsoft.com |date= |accessdate=2015-02-24}}</ref>

|-

![[rc]]
|{{some|via <tt>stty</tt>}}<ref name="tty" />
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}<ref>{{cite web|url=http://manpages.ubuntu.com/manpages/precise/man1/rc.1.html |title=Ubuntu Manpage: rc - shell |publisher=Manpages.ubuntu.com |date=2003-07-17 |accessdate=2015-02-24}}</ref>
|{{no}}

|-

![[BeanShell]]
|?
|?
|?
|?
|?
|?
|?
|?
|?
|?

|-

![[DIGITAL Command Language|VMS DCL]]
|?
|{{no}}
|{{no}}
|?
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Friendly interactive shell|fish]]
|{{yes|<tt>read -s</tt>}}
|{{no}}
|{{no}}
|?
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes| Yes (via <tt>fish -l</tt>)}}
|?

|}

=== Secure prompt ===
Some shell scripts need to query the user for sensitive information such as [[password]]s, private digital keys, [[Personal Identification Number|PIN codes]] or other confidential information. Sensitive input should not be echoed back to the screen/input device where it could be gleaned by unauthorized persons. Plaintext memory representation of sensitive information should also be avoided as it could allow the information to be compromised, e.g., through swap files, core dumps etc.<ref name="encryptmemory">{{cite web|last=Provos|first=Niels|title=Encrypting Virtual Memory|url=http://www.openbsd.org/papers/swapencrypt.ps|publisher=Center for Information Technology Integration, University of Michigan|accessdate=20 December 2012}}</ref>

The shells bash, zsh and Windows PowerShell offer this as a specific feature.<ref>{{cite web|url=http://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html|title=bash - GNU Bourne-Again SHell|quote=read -s Silent mode. If input is coming from a terminal, characters are not echoed.}}</ref><ref>{{cite web|url=http://technet.microsoft.com/en-us/library/ee176935.aspx|title=Using the Read-Host Cmdlet|quote=By adding the -assecurestring parameter you can mask the data entered at the prompt}}</ref> Shells which do not offer this as a specific feature may still be able to turn off echoing through some other means. Shells executing on a Unix/Linux operating system can use the <tt>stty</tt> external command to switch off/on echoing of input characters.<ref>{{cite web|title=Linux / Unix Command: stty|url=http://linux.about.com/od/commands/l/blcmdl1_stty.htm|publisher=Linux.about.com|accessdate=24 February 2015}}</ref> In addition to not echoing back the characters, PowerShell's <tt>-AsSecureString</tt> option also encrypts the input character-by-character during the input process, ensuring that the string is never represented unencrypted in memory where it could be compromised through memory dumps, scanning, transcription etc.

=== Non-password credentials prompt ===
Scripts that connect to resources on behalf of the user will usually (security best practice) query the user for his/her credentials at run time. Depending on the security policies in place, the credentials may be in the form of username+password, [[smart card]] with PIN code, biometrics, tokens etc. The script should be able to handle (relay) credentials without restricting the credential type to username+password, i.e. it should be able to handle "abstract" credentials without concerns about specific type of the credentials.

PowerShell comes with the <tt>Get-Credential</tt> [[cmdlet]] which prompts for credentials and which can accept other types of credentials, e.g. a [[smart card]] with a [[Personal Identification Number|PIN code]] depending on the security providers available at run time. Scripts that need to obtain credentials to access resources on behalf of the user can use this cmdlet to obtain credentials without specifying which form they must take. The <tt>Get-Credential</tt> cmdlet returns credentials in [[Common Criteria]] compliant encrypted form.<ref>{{cite web|url=http://blogs.msdn.com/b/powershell/archive/2008/06/20/getting-credentials-from-the-command-line.aspx |title=Getting Credentials From The Command Line - Windows PowerShell Blog - Site Home - MSDN Blogs |publisher=Blogs.msdn.com |date=2008-06-24 |accessdate=2013-08-18}}</ref>

=== Encrypted variables/parameters ===
If a script reads a password into an environment variable it is in memory in plain text, and thus may be accessed via a core dump. It is also in the process environment, which may be accessible by other processes started by the script.<ref>{{cite book|last1=Albing|first1=Carl|title=Bash cookbook|year=2007|publisher=O'Reilly|location=Sebastopol, Calif.|isbn=978-0-596-52678-8|edition=1. ed.|last2=Vossen|first2=J.P. |last3=Newham|first3=Cameron|accessdate=19 December 2012|page=65|chapter=3.8. Prompting for a Password|quote=Be aware that if you read a password into an environment variable it is in memory in plain text, and thus may be accessed via a core dump or /proc/core. It is also in the process environment, which may be accessible by other processes.}}</ref>

PowerShell can work with encrypted string variables/parameters.<ref>{{cite web|last=Holmes|first=Lee|title=SecureStrings in PowerShell|url=http://www.leeholmes.com/blog/2006/06/01/securestrings-in-powershell/|accessdate=18 December 2012}}</ref> Encrypted variables ensure that values are not inadvertently disclosed through e.g. transcripts, echo'ing, logfiles, memory or crash dumps or even malicious memory scanning. PowerShell also supports saving of such encrypted strings in text files, protected by a key owned by the current user.

=== Execute permission ===
Some operating systems define an ''execute'' permission which can be granted to users/groups for a file.

On Unix systems, the execute permission controls access to invoking the file as a program,
and applies both to executables and scripts.
As the permission is enforced in the [[Loader (computing)|program loader]],
no obligation is needed from the invoking program, nor the invoked program, in enforcing the execute permission — this also goes for shells and other interpreter programs.
The behaviour is mandated by the [[C POSIX library|POSIX C library]] that is used for interfacing with the kernel: POSIX specifies that the <code>exec</code> family of functions shall fail with EACCESS (permission denied) if the file denies execution permission (see {{man|sh|execve|SUS}}).

Although Windows also specifies an ''execute'' permission, none of the Windows specific shells block script execution if the permission has not been granted. PowerShell protects against inadvertently executing scripts obtained from untrusted sources through other means (described in the following sections).

=== Script origin execution restriction ===
PowerShell can be set to block execution of scripts which has been marked as obtained from an unknown/untrusted origin (e.g. the Internet).<ref>{{cite web|url=http://www.windowsecurity.com/articles/PowerShell-Security.html |title=PowerShell Security :: Windows OS Security :: Articles & Tutorials |publisher=WindowSecurity.com |accessdate=2013-08-18}}</ref> Internet facing applications such as web browsers, IM clients, mail readers etc. mark files downloaded from the internet with the origin zone in an alternate data stream which is understood by PowerShell. The Unix/Linux shell in general block on the specific ''execute'' permission (see [[#General execution restriction|General execution restriction]] above), not based on origin zone.

=== Signed script restriction ===
Script/code signing policies can be used to ensure that an operations department only run approved scripts/code which have been reviewed and signed by a trusted reviewer/approver. Signing regimes also protects against tampering. If a script is sent from vendor to a client, the client can use signing to ensure that the script has not been tampered with during transit and that the script indeed originates from the vendor and not an attacker trying to social engineer an operator into running an attack script.

PowerShell can be set to allow execution of otherwise blocked scripts (e.g. originating from an untrusted zone) if the script has been digitally signed using a trusted digital certificate.<ref>{{cite web|url=http://www.hanselman.com/blog/SigningPowerShellScripts.aspx|title=Signing PowerShell Scripts |publisher=Hanselman.com |accessdate=24 February 2015}}</ref><ref>{{cite web|url=http://blogs.technet.com/b/heyscriptingguy/archive/2010/06/17/hey-scripting-guy-how-can-i-sign-windows-powershell-scripts-with-an-enterprise-windows-pki-part-2-of-2.aspx |title=Hey, Scripting Guy! How Can I Sign Windows PowerShell Scripts with an Enterprise Windows PKI? (Part 2 of 2) - Hey, Scripting Guy! Blog - Site Home - TechNet Blogs |publisher=Blogs.technet.com |accessdate=2013-08-18}}</ref><ref>{{cite web|url=http://technet.microsoft.com/en-us/library/ee176949.aspx |title=Running Windows PowerShell Scripts |publisher=Technet.microsoft.com |accessdate=2013-08-18}}</ref>

=== Multilevel execution policies ===
A company may want to enforce execution restriction globally within the company and/or certain parts of the company. It may want to set a policy for running signed scripts but allow certain parts of the company to set their own policies for zoned restrictions.

PowerShell allows script blocking policies to be enforced at multiple levels: Local machine, current user etc. A higher level policy overrides a lower level policy, e.g. if a policy is defined for the local machine it is in place for all users of the local machine, only if it is left ''undefined'' at the higher level can it be defined for the lower levels.

=== Restricted shell subset ===
Several shells can be started or be configured to start in a mode where only a limited set of commands and actions is available to the user. While not a security ''boundary'' (the command accessing a resource is blocked rather than the resource) this is nevertheless typically used to restrict users' actions before logging in.

A restricted mode is part of the [[POSIX]] specification for shells, and most of the Linux/Unix shells support such a mode where several of the built-in commands are disabled and only external commands from a certain directory can be invoked.<ref>{{cite web|url=http://pwet.fr/man/linux/commandes/posix/sh |title=man sh - shell, the standard command language interpreter / posix |language=fr |publisher=Pwet.fr |date= |accessdate=2013-08-18}}</ref><ref>{{cite web|url=http://www.gnu.org/software/bash/manual/html_node/The-Restricted-Shell.html |title=Bash Reference Manual: The Restricted Shell |publisher=Gnu.org |date=2010-12-28 |accessdate=2013-08-18}}</ref>

PowerShell supports restricted modes through ''session configuration files'' or session configurations. A session configuration file can define visible (available) cmdlets, aliases, functions, path providers and more.<ref>{{cite web|url=http://technet.microsoft.com/en-us/library/hh849712.aspx |title=New-PSSessionConfigurationFile |publisher=Technet.microsoft.com |accessdate=2013-08-18}}</ref>

=== Safe data subset ===
Scripts that invoke other scripts can be a security risk as they can potentially execute foreign code in the context of the user who launched the initial script. Scripts will usually be designed to exclusively include scripts from known safe locations; but in some instances, e.g. when offering the user a way to configure the environment or loading localized messages, the script may need to include other scripts/files.<ref>{{cite book|last1=Albing|first1=Carl|title=Bash cookbook|year=2007|publisher=O'Reilly|location=Sebastopol, Calif.|isbn=978-0-596-52678-8|edition=1. ed.|last2=Vossen|first2=J.P.|last3=Newham|first3=Cameron |quote=[...] is hardly what one thinks of as a passive list of configured variables. It can run other commands (e.g.,cat) and use if statements to vary its choices. It even ends by echoing a message. Be careful when you source something, as it’s a wide open door into your script.}}</ref> One way to address this risk is for the shell to offer a safe subset of commands which can be executed by an included script.

PowerShell [http://technet.microsoft.com/en-us/library/hh848302.aspx data sections] can contain constants and expressions using a restricted subset of operators and commands.<ref>{{cite web|title=About Data Sections|url=http://technet.microsoft.com/en-us/library/hh848302.aspx|publisher=Microsoft|accessdate=18 December 2012}}</ref> PowerShell data sections are used when e.g. localized strings needs to be read from an external source while protecting against unwanted side effects.

==References==
{{Reflist|colwidth=30em}}

==External links==
*[http://w3.linux-magazine.com/issue/78/Bash_vs._Vista_PowerShell.pdf Linux Magazine: Bash vs. Vista PowerShell]
*[http://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html IEEE. 1003.1 Standard for Information Technology – Portable Operating System Interface (POSIX): Shell and Utilities, Issue 7]
{{Use dmy dates|date=April 2012}}

{{DEFAULTSORT:Comparison Of Command Shells}}
[[Category:Command shells]]
[[Category:Software comparisons|Shells]]
