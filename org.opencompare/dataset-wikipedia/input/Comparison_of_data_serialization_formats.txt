{{Refimprove|date=August 2009}}

This is a '''comparison of [[data serialization]] [[file format|format]]s''', various ways to convert complex [[object (computer science)|object]]s to sequences of [[bit]]s. It does not include [[markup language]]s used exclusively as [[document file format]]s.

==Overview==
{| class="wikitable sortable"
|-
! Name
! Creator/Maintainer
! Based on
! [[Standardized]]?
! [[Specification]]
! [[Binary format|Binary]]?
! [[Human-readable]]?
! Supports [[Reference (computer science)|reference]]s?{{ref|stdrefs|e}}
! Schema/[[Interface description language|IDL]]?
! Standard [[API]]s
|-
| [[Apache Avro]]
| [[Apache Software Foundation]]
| {{n/a}}
| {{yes}}
| [http://avro.apache.org/docs/current/spec.html Apache Avro™ 1.7.5 Specification]
| {{yes}}
| {{no}}
| {{n/a}}
| {{yes}} (built-in)
| {{n/a}}
|-
| [[ASN.1]]
| [[International Organization for Standardization|ISO]], [[International Electrotechnical Commission|IEC]], [[ITU-T]]
| {{n/a}}
| {{yes}}
| ISO/IEC 8824; X.680 series of ITU-T Recommendations
| {{yes}}<br>([[Basic Encoding Rules|BER]], [[Distinguished Encoding Rules|DER]], [[Packed Encoding Rules|PER]], [[Octet Encoding Rules|OER]], or custom via [[Encoding Control Notation|ECN]])
| {{yes}}<br>([[XML Encoding Rules|XER]], [[Generic String Encoding Rules|GSER]], or custom via [[Encoding Control Notation|ECN]])
| {{partial}}{{ref|asn1refs|f}}
| {{yes}} (built-in)
| {{n/a}}
|-
| [[Bencode]]
| [[Bram Cohen]] (creator)<br>[[BitTorrent, Inc.]] (maintainer)
| {{n/a}}
| {{yes}}
| Part of [http://bittorrent.org/beps/bep_0003.html BitTorrent protocol specification]
| {{partial|Partially}}<br>(numbers and delimiters are ASCII)
| {{partial|Partially}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[Binn (Serialization format)|Binn]]
| Bernardo Ramos
| {{n/a}}
| {{yes}}
| [https://github.com/liteserver/binn/blob/master/spec.md Binn Specification]
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[BSON]]
| [[MongoDB]]
| [[JSON]]
| {{yes}}
| [http://bsonspec.org BSON Specification]
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[Candle (programming language)|Candle]] Markup
| Henry Luo
| [[XML]], [[JSON]], [[JavaFX]]
| {{yes}}
| [http://www.candlescript.org/doc/candle-markup-reference.htm Candle Markup Reference]
| {{no}}
| {{yes}}
| {{yes}}<br>([[XPointer]], [[XPath]])
| {{yes}}<br>([http://www.candlescript.org/doc/candle-pattern-reference.htm Candle Pattern Reference])
| {{yes}}<br>([[XQuery]], [[XPath]])
|-
| [[Comma-separated values]] (CSV)
| RFC author:<br>Yakov Shafranovich
| {{n/a}}
| {{partial}}<br>(myriad informal variants used)
| RFC 4180<br>(among others)
| {{no}}
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[D-Bus]] Message Protocol
| [[freedesktop.org]]
| {{n/a}}
| {{yes}}
| [http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol D-Bus Specification]
| {{yes}}
| {{yes}}<br>([http://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-signatures Type Signatures])
| {{no}}
| {{no}}
| {{yes}}<br>(see [[D-Bus]])
|-
| [[Fast Infoset]]
| [[International Organization for Standardization|ISO]], [[International Electrotechnical Commission|IEC]], [[ITU-T]]
| [[XML]]
| {{yes}}
| ITU-T X.891 and ISO/IEC 24824-1:2007
| {{yes}}
| {{yes}}<br>([[XML]])
| {{yes}}<br>([[XPointer]], [[XPath]])
| {{yes}}<br>([[XML schema]])
| {{yes}}<br>([[Document Object Model|DOM]], [[Simple API for XML|SAX]], [[XQuery]], [[XPath]])
|-
| [[JSON]]
| [[Douglas Crockford]]
| [[JavaScript syntax]]
| {{yes}}
| RFC 4627<br>(ancillary:<br>RFC 6901,<br>RFC 6902)
| {{no}}, but see [[UBJSON]], [[BSON]]
| {{yes}}
| {{yes}}<br>([http://tools.ietf.org/html/rfc6901 JSON Pointer (RFC 6901)];<br>alternately:<br>[http://goessner.net/articles/JsonPath/ JSONPath], [http://bluelinecity.com/software/jpath/ JPath], [http://www.jspon.org/ JSPON], [http://jsonselect.org/ json:select()])
| {{partial}}<br>([http://json-schema.org/ JSON Schema Proposal], [http://www.kuwata-lab.com/kwalify/ Kwalify], [http://rjbs.manxome.org/rx/ Rx], [http://itemscript.org/ItemscriptSchema.html Itemscript Schema])
| {{partial}}<br>([https://github.com/dscape/clarinet Clarinet], [http://www.sitepen.com/blog/2008/07/16/jsonquery-data-querying-beyond-jsonpath/ JSONQuery], [http://goessner.net/articles/JsonPath/ JSONPath])
|-
| [[MessagePack]]
| Sadayuki Furuhashi
| [[JSON]] (loosely)
| {{yes}}
| [https://github.com/msgpack/msgpack/blob/master/spec.md MessagePack format specification]
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[Netstring]]s
| [[Dan Bernstein]]
| {{n/a}}
| {{yes}}
| [http://cr.yp.to/proto/netstrings.txt netstrings.txt]
| {{yes}}
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[OGDL]]
| Rolf Veen
| {{dunno}}
| {{yes}}
| [http://ogdl.org/spec/ Specification]
| {{yes}}<br>([http://ogdl.org/spec/binary.html Binary Specification])
| {{yes}}
| {{yes}}<br>([http://ogdl.org/spec/path.html Path Specification])
| {{yes}}<br>([http://ogdl.org/spec/schema.html Schema WD])
| 
|-
| [[OpenDDL]]
| [[Eric Lengyel]]
| [[C (programming language)|C]], [[PHP]]
| {{yes}}
| [http://openddl.org/ OpenDDL.org]
| {{no}}
| {{yes}}
| {{yes}}
| {{no}}
| {{yes}}<br>([http://openddl.org/ OpenDDL Library])
|-
| [[PHP]]'s <code>[http://php.net/serialize serialize()]</code> & <code>[http://php.net/manual/en/function.unserialize.php unserialize()]</code>
| [[PHP Group]]
| {{n/a}}
| {{yes}}
| {{no}}
| {{yes}}
| {{yes}}
| {{yes}}
| {{no}}
| {{yes}}
|-
| [http://perldoc.perl.org/Data/Dumper.html Data::Dumper format] (Core Perl Module)
| [[Gurusamy Sarathy (ActiveState developer)]]
| [http://perldoc.perl.org/perldata.html Perl data types]
| {{yes}}
| {{no}}
| {{dunno}}
| {{yes}}
| {{no}}
| {{dunno}}
| {{yes}}
|-
| [[Property list]]
| [[NeXT]] (creator)<br>[[Apple Inc.|Apple]] (maintainer)
| {{dunno}}
| {{partial}}
| [http://www.apple.com/DTDs/PropertyList-1.0.dtd Public DTD for XML format]
| {{yes}}{{ref|plbin|a}}
| {{yes}}{{ref|pltxt|b}}
| {{no}}
| {{dunno}}
| [http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/PropertyLists/Introduction/Introduction.html Cocoa], [http://developer.apple.com/mac/library/documentation/CoreFoundation/Conceptual/CFPropertyLists/CFPropertyLists.html CoreFoundation], [http://docs.sun.com/app/docs/doc/802-2112/6i63mn65o?a=view OpenStep], [http://www.gnustep.org/resources/documentation/Developer/Base/Reference/NSPropertyList.html GnuStep]
|-
| [[Protocol Buffers]] (protobuf)
| [[Google]]
| {{n/a}}
| {{partial}}{{citation needed|date=September 2014}}
| [https://developers.google.com/protocol-buffers/docs/encoding Developer Guide: Encoding]
| {{yes}}
| {{partial}}{{ref|pbtextformat|d}}
| {{no}}
| {{yes}} (built-in)
| 
|-
| [[ROOT]]
| [http://cern.ch CERN] & [http://fnal.gov FNAL]
| {{n/a}}
| {{no}}
| {{n/a}}
| {{yes}}
| {{yes}}<br>(optional XML output for debugging)
| {{yes}}
| {{yes}}<br>(C++ object persistency framework)
| {{yes}}<br>(Native C++ API, bindings for Python, Ruby, and others)
|-
| {{nobr|[[S-expression]]s}}
| Internet Draft author:<br>[[Ron Rivest]]
| [[Lisp (programming language)|Lisp]], [[Netstring]]s
| {{partial}}<br>(largely ''de facto'')
| [http://people.csail.mit.edu/rivest/Sexp.txt "S-Expressions"] [[Internet Draft]]
| {{yes}}<br>("Canonical representation")
| {{yes}}<br>("Advanced transport representation")
| {{no}}
| {{no}}
| 
|-
| [[SCaViS]]
| [http://jwork.org/scavis jWork.ORG]
| {{n/a}}
| {{yes}}
| {{n/a}}
| {{yes}}
| {{yes}}<br>(XML, Java Serialization, ProtocolBuffers)
| {{yes}}
| {{yes}}<br>(Java object persistency, XML, ProtocolBuffers)
| {{yes}}<br>(Native Java API, bindings for Jython, JRuby, Groovy and others)
|-
| [[Smile (Data Interchange Format)|Smile]]
| Tatu Saloranta
| [[JSON]]
| {{yes}}
| [http://wiki.fasterxml.com/SmileFormatSpec Smile Format Specification]
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| {{no}}
|-
| {{nobr|[[SDXF|Structured Data eXchange Format]]s}}
| [[Max Wildgrube]]
| {{n/a}}
| {{yes}}
| RFC 3072
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| 
|-
| [[Thrift (protocol)|Thrift]]
| [[Facebook]] (creator)<br>[[Apache Software Foundation|Apache]] (maintainer)
| {{n/a}}
| {{no}}
| [http://thrift.apache.org/static/files/thrift-20070401.pdf Original whitepaper]
| {{yes}}
| {{partial}}{{ref|thrifttxt|c}}
| {{no}}
| {{yes}} (built-in) 
|
|-
| [[UBJSON]]
| The Buzz Media, LLC
| [[JSON]], [[BSON]]
| {{no}}
| [http://ubjson.org/]
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[External Data Representation|eXternal Data Representation]] (XDR)
| [[Sun Microsystems]] (creator)<br>[[IETF]] (maintainer)
| {{n/a}}
| {{yes}}
| RFC 4506
| {{yes}}
| {{no}}
| {{yes}}
| {{yes}}
| {{yes}}
|-
| [[XML]]
| [[W3C]]
| [[SGML]]
| {{yes}}
| {{nobr|[[W3C Recommendation]]s:}}<br>[http://www.w3.org/TR/2008/REC-xml-20081126/ 1.0 (Fifth Edition)]<br>[http://www.w3.org/TR/2006/REC-xml11-20060816/ 1.1 (Second Edition)]
| {{partial}}<br>{{nobr|([[Binary XML]])}}
| {{yes}}
| {{yes}}<br>([[XPointer]], [[XPath]])
| {{yes}}<br>([[XML schema]], [[RELAX_NG]])
| {{yes}}<br>([[Document Object Model|DOM]], [[Simple API for XML|SAX]], [[XQuery]], [[XPath]])
|-
| [[XML-RPC]]
| [[Dave Winer]]<ref name="xmlrpc-hist">http://www.xml.com/pub/a/ws/2001/04/04/soap.html</ref>
| [[XML]], [[SOAP]]<ref name="xmlrpc-hist"/>
| {{yes}}
| [http://xmlrpc.scripting.com/spec XML-RPC Specification]
| {{no}}
| {{yes}}
| {{no}}
| {{no}}
| {{no}}
|-
| [[YAML]]
| Clark Evans,<br>Ingy döt Net,<br>and Oren Ben-Kiki
| [[C (programming language)|C]], [[Java (programming language)|Java]], [[Perl]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[Email]], [[HTML]], [[MIME]], [[URI]], [[XML]], [[Simple API for XML|SAX]], [[SOAP]], [[JSON]]<ref>{{cite web|url=http://yaml.org/spec/1.2/spec.html#id2708710|title=YAML Ain’t Markup Language (YAML) Version 1.2|first1=Oren |last1=Ben-Kiki |first2=Clark |last2=Evans |first3=Ingy döt |last3=Net|date=2009-10-01|work=The Official YAML Web Site|accessdate=2012-02-10}}</ref>
| {{yes}}
| [http://www.yaml.org/spec/1.2/spec.html Version 1.2]
| {{no}}
| {{yes}}
| {{yes}}
| {{partial}}<br>([http://www.kuwata-lab.com/kwalify/ Kwalify], [http://rjbs.manxome.org/rx/ Rx], built-in language type-defs)
| {{no}}
|}
*a. {{note|plbin}}The current default format is binary.
*b. {{note|pltxt}}The "classic" format is plain text, and an XML format is also supported.
*c. {{note|thrifttxt}}Theoretically possible due to abstraction, but no implementation is included.
*d. {{note|pbtextformat}}The primary format is binary, but a text format is available.<ref>https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.text_format</ref>
*e. {{note|stdrefs}}Means that generic tools/libraries know how to encode, decode, and dereference a reference to another piece of data in the same document. A tool may require the [[Interface description language|IDL]] file, but no more. Excludes custom, non-standardized referencing techniques.
*f. {{note|asn1refs}}ASN.1 does offer [[Object identifier|OIDs]], a standard format for globally unique identifiers, as well as  a standard notation ("absolute reference") for referencing a component of a value. Thus it would be possible to reference a component of an encoded value present in a document by combining an OID (assigned to the document) and an "absolute reference" to the component of the value. However, there is no standard way to indicate that a field contains such an absolute reference. Therefore, a generic ASN.1 tool/library cannot automatically encode/decode/resolve references within a document without help from custom-written program code.

==Syntax comparison of human-readable formats==
{| class="wikitable"
|-
! Format
! [[Nullable type|Null]]
! [[Boolean data type|Boolean]] true
! [[Boolean data type|Boolean]] false
! [[Integer (computer science)|Integer]]
! [[Floating-point]]
! [[String (computer science)|String]]
! [[Array data type|Array]]
! [[Associative array]]/[[Object (computer science)|Object]]
|-
| [[XML Encoding Rules|ASN.1]]<br>(XML Encoding Rules)
| {{nobr|<code><foo /></code>}}
| <code><foo>true</foo></code>
| <code><foo>false</foo></code>
| <code><foo>685230</foo></code>
| <code><foo>6.8523015e+5</foo></code>
| {{nobr|<code><foo>A to Z</foo></code>}}
| <source lang="xml"><SeqOfUnrelatedDatatypes>
    <isMarried>true</isMarried>
    <hobby />
    <velocity>-42.1e7</velocity>
    <bookname>A to Z</bookname>
    <bookname>We said, "no".</bookname>
</SeqOfUnrelatedDatatypes></source>
| An object (the key is a field name):
 <source lang="xml"><person>
    <isMarried>true</isMarried>
    <hobby />
    <height>1.85</height>
    <name>Bob Peterson</name>
</person></source>

A data mapping (the key is a data value):
<source lang="xml"><competition>
    <measurement>
        <name>John</name>
        <height>3.14</height>
    </measurement>
    <measurement>
        <name>Jane</name>
        <height>2.718</height>
    </measurement>
</competition></source>
{{ref|guess|a}}
|-
| [[Candle (programming language)|Candle]] Markup
| <code>(), ""</code>
| <code>true</code>
| <code>false</code>
| <code>685230</code><br><code>-685230</code>
| <code>6.8523015e+5</code>
| <code>"A to Z"</code><br><code>"""<br>A <br>to <br>Z<br>"""</code>
| <code>(true, (), -42.1e7, "A to Z")</code>
| <pre>_{%342=true A%20to%20Z=(1, 2, 3)}</pre> or 
<pre>_{
  _{key=42 value=true}
  _{key="A to Z" value=(1, 2, 3)}
}</pre>
|-
| [[Comma-separated values|CSV]]{{ref|csvguess|b}}
| <code>null</code>{{ref|guess|a}}<br>(or an empty element in the row){{ref|guess|a}}
| <code>1</code>{{ref|guess|a}}<br><code>true</code>{{ref|guess|a}}
| <code>0</code>{{ref|guess|a}}<br><code>false</code>{{ref|guess|a}}
| <code>685230</code><br><code>-685230</code>{{ref|guess|a}}
| <code>6.8523015e+5</code>{{ref|guess|a}}
| {{nobr|<code>A to Z</code>}}<br><code>{{nobr|"We said, ""no""."}}</code>
| <code>true,,-42.1e7,"A to Z"</code>
| <pre>42,1
A to Z,1,2,3</pre>
|-
| [[Netstring]]s{{ref|netguess|c}}
| <code>0:,</code>{{ref|guess|a}}<br><code>4:null,</code>{{ref|guess|a}}
| <code>1:1,</code>{{ref|guess|a}}<br><code>4:true,</code>{{ref|guess|a}}
| <code>1:0,</code>{{ref|guess|a}}<br><code>5:false,</code>{{ref|guess|a}}
| <code>6:685230,</code>{{ref|guess|a}}
| <code>9:6.8523e+5,</code>{{ref|guess|a}}
| {{nobr|<code>6:A to Z,</code>}}
| <code>29:4:true,0:,7:-42.1e7,6:A to Z,,</code>
| {{nobr|<code>41:9:2:42,1:1,,25:6:A to Z,12:1:1,1:2,1:3,,,,</code>}}{{ref|guess|a}}
|-
| [[JSON]]
| <code>null</code>
| <code>true</code>
| <code>false</code>
| <code>685230</code><br><code>-685230</code>
| <code>6.8523015e+5</code>
| {{nobr|<code>"A to Z"</code>}}
| <code>[true, null, -42.1e7, "A to Z"]</code>
| <code>{"42": true, "A to Z": [1, 2, 3]}</code>
|-
| [[OGDL]]{{Verify source|date=September 2009}}
| <code>null</code>{{ref|guess|a}}
| <code>true</code>{{ref|guess|a}}
| <code>false</code>{{ref|guess|a}}
| <code>685230</code>{{ref|guess|a}}
| <code>6.8523015e+5</code>{{ref|guess|a}}
| <code>"A to Z"</code><br><code>'A to Z'</code><br><code>NoSpaces</code>
| <pre>true
null
-42.1e7
"A to Z"</pre>
<code>(true, null, -42.1e7, "A to Z")</code>
|<pre>42
  true
"A to Z"
  1
  2
  3</pre>
<pre>42
  true
"A to Z", (1, 2, 3)</pre>
|-
| [[OpenDDL]]
| <code>ref {null}</code>
| <code>bool {true}</code>
| <code>bool {false}</code>
| <code>int32 {685230}</code><br/><code>int32 {0x74AE}</code><br/><code>int32 {0b111010010101110}</code>
| <code>float {6.8523015e+5}</code>
| <code>string {"A to Z"}</code>
| Homogeneous array:

<pre>int32 {1, 2, 3, 4, 5}</pre>

Heterogeneous array:

<pre>array
{
    bool {true}
    ref {null}
    float {-42.1e7}
    string {"A to Z"}
}</pre>
| <pre>dict
{
    value (key = "42") {bool {true}}
    value (key = "A to Z") {int32 {1, 2, 3}}
}</pre>
|-
|[[PHP]]'s <code>[http://php.net/serialize serialize()]</code> & <code>[http://php.net/manual/en/function.unserialize.php unserialize()]</code>
|<code>N;</code>
|<code>b:1;</code>
|<code>b:0;</code>
|<code>i:685230;</code><br><code>i:-685230;</code>
|<code>d:685230.150000000023283064365386962890625;</code><br><code>d:INF;</code><br><code>d:-INF;</code><br><code>d:NAN;</code>
|<code>s:6:"A to Z";</code>
|<code>a:4:{i:0;b:1;i:1;N;i:2;d:-421000000;i:3;s:6:"A to Z";}</code>
|Associative array:<br><code>a:2:{i:42;b:1;s:6:"A to Z";a:3:{i:0;i:1;i:1;i:2;i:2;i:3;}}</code><br>Object:<br><code>O:8:"stdClass":2:{s:4:"John";d:3.140000000000000124344978758017532527446746826171875;s:4:"Jane";d:2.717999999999999971578290569595992565155029296875;}</code>
|-
| [[Property list]]<br>(plain text format)<ref name="gnustep">http://www.gnustep.org/resources/documentation/Developer/Base/Reference/NSPropertyList.html</ref>
| {{n/a}}
| <code><*BY></code>
| <code><*BN></code>
| <code><*I685230></code>
| <code><*R6.8523015e+5></code>
| <code>"A to Z"</code>
| <code>( <*BY>, <*R-42.1e7>, "A to Z" )</code>
| <pre>{
    "42" = <*BY>;
    "A to Z" = ( <*I1>, <*I2>, <*I3> );
}</pre>
|-
| [[Property list]]<br>(XML format)<ref>http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man5/plist.5.html</ref><ref>http://developer.apple.com/mac/library/documentation/CoreFoundation/Conceptual/CFPropertyLists/Articles/XMLTags.html#//apple_ref/doc/uid/20001172-CJBEJBHH</ref>
| {{n/a}}
| <code><true /></code>
| <code><false /></code>
| <code><integer>685230</integer></code>
| <code><real>6.8523015e+5</real></code>
| {{nobr|<code><string>A to Z</string></code>}}
| <source lang="xml"><array>
    <true />
    <real>-42.1e7</real>
    <string>A to Z</string>
</array></source>
| <source lang="xml"><dict>
    <key>42</key>
    <true />
    <key>A to Z</key>
    <array>
        <integer>1</integer>
        <integer>2</integer>
        <integer>3</integer>
    </array>
</dict></source>
|-
| [[S-expression]]s
| <code>NIL</code><br><code>nil</code>
| <code>T</code><br><code>#t</code>{{ref|lispstd|e}}<br><code>true</code>
| <code>NIL</code><br><code>#f</code>{{ref|lispstd|e}}<br><code>false</code>
| <code>685230</code>
| <code>6.8523015e+5</code>
| <code>abc</code><br><code>"abc"</code><br><code>#616263#</code><br><code>3:abc</code><br><code>{MzphYmM=}</code><br><code><nowiki>|YWJj|</nowiki></code>
| <code>(T NIL -42.1e7 "A to Z")</code>
| <code>((42 T) ("A to Z" (1 2 3)))</code>
|-
| [[YAML]]
| <code>~</code><br><code>null</code><br><code>Null</code><br><code>NULL</code><ref>{{cite web|url=http://yaml.org/type/null.html |title=Null Language-Independent Type for YAML Version 1.1 |publisher= |work=YAML.org
 |date=2005-01-18 |author1=Oren Ben-Kiki|author2=Clark Evans|author3=Brian Ingerson |accessdate=2009-09-12}}</ref>
| <code>y</code><br><code>Y</code><br><code>yes</code><br><code>Yes</code><br><code>YES</code><br><code>on</code><br><code>On</code><br><code>ON</code><br><code>true</code><br><code>True</code><br><code>TRUE</code><ref name="yamlbool">{{cite web|url=http://yaml.org/type/bool.html |title=Boolean Language-Independent Type for YAML Version 1.1 |publisher=Clark C. Evans |author1=Oren Ben-Kiki|author2=Clark Evans|author3=Brian Ingerson |work=YAML.org |date=2005-01-18 |accessdate=2009-09-12}}</ref>
| <code>n</code><br><code>N</code><br><code>no</code><br><code>No</code><br><code>NO</code><br><code>off</code><br><code>Off</code><br><code>OFF</code><br><code>false</code><br><code>False</code><br><code>FALSE</code><ref name="yamlbool"/>
| <code>685230</code><br><code>+685_230</code><br><code>-685230</code><br><code>02472256</code><br><code>0x_0A_74_AE</code><br><code>0b1010_0111_0100_1010_1110</code><br><code>190:20:30</code><ref>{{cite web|url=http://yaml.org/type/int.html |title=Integer Language-Independent Type for YAML Version 1.1 |publisher=Clark C. Evans |author1=Oren Ben-Kiki|author2=Clark Evans|author3=Brian Ingerson |work=YAML.org |date=2005-02-11 |accessdate=2009-09-12}}</ref>
|<code>6.8523015e+5</code><br><code>685.230_15e+03</code><br><code>685_230.15</code><br><code>190:20:30.15</code><br><code>.inf</code><br><code>-.inf</code><br><code>.Inf</code><br><code>.INF</code><br><code>.NaN</code><br><code>.nan</code><br><code>.NAN</code><ref>{{cite web|url=http://yaml.org/type/float.html |title=Floating-Point Language-Independent Type for YAML Version 1.1 |publisher=Clark C. Evans |author1=Oren Ben-Kiki|author2=Clark Evans|author3=Brian Ingerson |work=YAML.org |date=2005-01-18 |accessdate=2009-09-12}}</ref>
| <code>A to Z</code><br><code>"A to Z"</code><br><code>'A to Z'</code>
| <code>[y, ~, -42.1e7, "A to Z"]</code>
<pre>- y
-
- -42.1e7
- A to Z</pre>
| <code>{"John":3.14, "Jane":2.718}</code>
<pre>42: y
A to Z: [1, 2, 3]</pre>
|-
| [[XML]]{{ref|xmlguess|d}}
| {{nobr|<code><null /></code>{{ref|guess|a}}}}
| <code><boolean val="true"/></code>{{ref|guess|a}}
<code><true /></code>{{ref|guess|a}}
| <code><boolean val="false"/></code>{{ref|guess|a}}
<code><false /></code>{{ref|guess|a}}
| <code><integer>685230</integer></code>{{ref|guess|a}}
| <code><float>6.8523015e+5</float></code>{{ref|guess|a}}
| {{nobr|<code>A to Z</code>}}
|{{ref|guess|a}}<source lang="xml"><array>
  <element type="boolean">true</element>
  <element type="null"/>
  <element type="float">-42.1e7</element>
  <element type="string">A to Z</element>
</array></source>
|{{ref|guess|a}}<source lang="xml"><associative-array>
  <entry>
    <key type="integer">42</key>
    <value type="boolean">true</value>
  </entry>
  <entry>
    <key type="string">A to Z</key>
    <value>
      <array>
        <element type="integer" val="1"/>
        <element type="integer" val="2"/>
        <element type="integer" val="3"/>
      </array>
    </value>
  </entry>
</associative-array></source>
|-
| [[XML-RPC]]
| 
| <code><value><boolean>1</boolean></value></code>
| <code><value><boolean>0</boolean></value></code>
| <code><value><int>685230</int></value></code>
| <code><value><double>6.8523015e+5</double></value></code>
| <code><value><string>A to Z</string></value></code>
|<source lang="xml"><value><array>
  <data>
  <value><boolean>1</boolean></value>
  <value><double>-42.1e7</double></value>
  <value><string>A to Z</string></value>
  </data>
  </array></value></source>
|<source lang="xml"><value><struct>
  <member>
    <name>42</name>
    <value><boolean>1</boolean></value>
    </member>
  <member>
    <name>A to Z</name>
    <value>
      <array>
        <data>
          <value><int>1</int></value>
          <value><int>2</int></value>
          <value><int>3</int></value>
          </data>
        </array>
      </value>
    </member>
</struct></source>
|}

*a. {{note|guess}}One possible encoding; the specification document does not specifically give an encoding for this datatype.
*b. {{note|csvguess}}The RFC CSV specification only deals with delimiters, newlines, and quote characters; it does not directly deal with serializing programming [[data structure]]s.
*c. {{note|netguess}}The [[netstring]]s specification only deals with nested [[byte string]]s; anything else is outside the scope of the specification.
*d. {{note|xmlguess}}[[XML]] in and of itself is not a data serialization language, but many data serialization formats have been derived from it; as such, there are many different ways, in addition to those shown, to serialize programming [[data structure]]s into XML.
*e. {{note|lispstd}}This syntax is not compatible with the Internet-Draft, but is used by some dialects of [[Lisp (programming language)|Lisp]].

==Comparison of binary formats==
<!--This table is meant to describe how the various datatypes are encoded in binary in the various formats-->
{| class="wikitable"
|-
! Format
! [[Nullable type|Null]]
! [[Boolean data type|Boolean]]s
! [[Integer (computer science)|Integer]]
! [[Floating-point]]
! [[String (computer science)|String]]
! [[Array data type|Array]]
! [[Associative array]]/[[Object (computer science)|Object]]
|-
| [[ASN.1]]<br>([[Basic Encoding Rules|BER]], [[Packed Encoding Rules|PER]] or [[Octet Encoding Rules|OER]] encoding)
| NULL type
| BOOLEAN; BER: as 1 byte in binary form; PER: as 1 bit; OER: as 1 byte
| INTEGER; BER: variable-length big-endian binary representation (up to 2^(2^1024) bits); PER Unaligned: a fixed number of bits if the integer type has a finite range; a variable number of bits otherwise; PER Aligned: a fixed number of bits if the integer type has a finite range and the size of the range is less than 65536; a variable number of octets otherwise; OER: one, two, or four octets (either signed or unsigned) if the integer type has a finite range that fits in that number of octets; a variable number of octets otherwise
| REAL; base-10 real values are represented as character strings in ISO 6093 format; binary real values are represented in a binary format that includes the mantissa, the base (2, 8, or 16), and the exponent; the special values NaN, -INF, +INF, and negative zero are also supported
| Multiple valid types (VisibleString, PrintableString, GeneralString, UniversalString, UTF8String)
| data specifications SET OF (unordered) and SEQUENCE OF (guaranteed order)
| user definable type
|-
| [[Binn (Serialization format)|Binn]]<ref>https://github.com/liteserver/binn/blob/master/spec.md</ref>
| <code>\x00</code>
| True: <code>\x01</code><br/>False: <code>\x02</code>
| [[big-endian]] [[2's complement]] signed and unsigned 8/16/32/64 bits
| [[Single precision floating-point format|single]]:  [[big-endian]] [[binary32]]<br/>[[Double precision floating-point format|double]]: [[big-endian]] [[binary64]]
| [[UTF-8]] encoded, null terminated, preceded by int8 or int32 string length in bytes
| Typecode (one byte) + 1-4 bytes size + 1-4 bytes items count + list items
| Typecode (one byte) + 1-4 bytes size + 1-4 bytes items count + key/value pairs
|-
| [[BSON]]<ref>http://bsonspec.org</ref>
| Null type - 0 bytes for value
| True: one byte <code>\x01</code><br>False: <code>\x00</code>
| int32: 32-bit [[little-endian]] [[2's complement]] or int64: 64-bit [[little-endian]] [[2's complement]]
| [[Double precision floating-point format|double]]: [[little-endian]] [[binary64]]
| [[UTF-8]] encoded, preceded by int32 encoded string length in bytes 
| [[BSON]] embedded document with numeric keys
| [[BSON]] embedded document 
|-
| [[Concise Binary Object Representation]] (CBOR)<ref>RFC 7049</ref>
| <code>\xf6</code>
| True: <code>\xf5</code><br>False: <code>\xf4</code>
| Small positive number <code>\x00-\x17</code>, small negative number <code>\x20-\x37</code> (abs(N) <= 23) <br>
8bit: positive <code>\x18\xhh</code>, negative <code>\x38\xhh</code><br>
16bit: positive <code>\x19<uint16_t></code>, negative <code>\x39<uint16_t></code><br>
32bit: positive <code>\x1A<uint32_t></code>, negative <code>\x3A<uint32_t></code><br>
64bit: positive <code>\x1B<uint64_t></code>, negative <code>\x3B<uint64_t></code><br>
Negative number x encoded as ~x (binary inversion) or as (-x-1)<br>
Byte order - [[Big-endian]]
| Typecode (one byte) + IEEE half/single/double
| Typecode with length (like integer coding) and content.<br>
Bytestring and UTF-8 have different typecode
| Typecode with count (like integer coding) and items
| Typecode with pairs count (like integer coding) and pairs
|-
| [[MessagePack]]
| <code>\xc0</code>
| True: <code>\xc3</code><br>False: <code>\xc2</code>
| Single byte "fixnum" (values -32..127) 
or
typecode (one byte) + big-endian (u)int8/16/32/64
| Typecode (one byte) + IEEE single/double
| Typecode + up to 15 bytes<br />or<br />typecode + length as uint8/16/32 + bytes;<br />encoding is unspecified<ref>https://github.com/msgpack/msgpack/blob/master/spec.md#formats-str</ref>
| As "fixarray" (single-byte prefix + up to 15 array items) 
or
typecode (one byte) + 2-4 bytes length + array items
| As "fixmap" (single-byte prefix + up to 15 key-value pairs) 
or
typecode (one byte) + 2-4 bytes length + key-value pairs
|-
| [[Netstring]]s
| <code>0:,</code>
| True: <code>1:1,</code>
{{nobr|False: <code>1:0,</code>}}
|
|
|
|
|
|-
| [[OGDL]] Binary
|
|
|
|
|
|
|
|-
| [[Property list]]<br>(binary format)
|
|
|
|
|
|
|
|-
| [[Protocol Buffers]]<ref>https://developers.google.com/protocol-buffers/docs/encoding</ref>
|
|
| Variable encoding length signed 32-bit: varint encoding of "ZigZag"-encoded value <code>(n << 1) [[XOR]] (n >> 31)</code>
Variable encoding length signed 64-bit: varint encoding of "ZigZag"-encoded <code>(n << 1) XOR (n >> 63)</code><br>
Constant encoding length 32-bit: 32 bits in [[little-endian]] [[2's complement]]<br>
Constant encoding length 64-bit: 64 bits in [[little-endian]] [[2's complement]]
|[[Single precision floating-point format|floats]]: [[little-endian]] [[binary32]]
[[Double precision floating-point format|doubles]]: [[little-endian]] [[binary64]]
| [[UTF-8]] encoded, preceded by varint-encoded integer length of string in bytes
| Repeated value with the same tag
| {{n/a}}
|-
| [[Sereal (protocol)|Sereal]]
| <code>0x25</code>
| True: <code>0x3b</code><br>False: <code>0x3a</code>
| Single byte POS/NEG (values -16..15) 
or
typecode (one byte) + "varint" encoded variable length integer
or
typecode (one byte) + "zigzag" encoded variable length integer
| Typecode (one byte) + IEEE single/double/quad
| As "SHORT_BINARY" (single-byte prefix + up to 31 raw bytes) 
or
typecode (one byte, including boolean UTF8-encoding flag) + "varint" encoded length + raw bytes
| As "ARRAYREF" (single-byte prefix + up to 15 array items) 
or
typecode (one byte) + "varint" encoded length + array items
| As "HASHREF" (single-byte prefix + up to 15 key-value pairs) 
or
typecode (one byte) + "varint" encoded length + key-value pairs.
Distinguishes hashmaps from objects / class instances.
|-
| [[Smile (Data Interchange Format)|Smile]]
| <code>\x21</code>
| True: <code>\x23</code><br>False: <code>\x22</code>
| Single byte "small" (values -16..15 encoded using <code>\xc0</code> - <code>\xdf</code>),
zigzag-encoded <code>varint</code>s (1 - 11 databytes), or <code>BigInteger</code>
| IEEE single/double, <code>BigDecimal</code>
| Length-prefixed "short" Strings (up to 64 bytes), marker-terminated "long" Strings and (optional) back-references
| Arbitrary-length heterogenous arrays with end-marker
| Arbitrary-length key/value pairs with end-marker
|-
| [[SDXF|Structured Data eXchange Formats]] (SDXF)
|
|
| big-endian signed 24bit or 32bit integer
| big-endian IEEE double
| either [[UTF-8]] or ISO 8859-1 encoded
| list of elements with identical ID and size, preceded by array header with int16 length 
| chunks can contain other chunks to arbitrary depth
|-
| [[Thrift (protocol)|Thrift]]
|
|
|
|
|
|
|
|-
| [[Transenc]]
| <code>0x82</code>
| True: <code>0x81</code><br>False: <code>0x80</code>
| Single byte integers in the range [-32;127]<br/>
Fixed length integers for 8-bits, 16-bits, 32-bits, and 64-bits integers.

Encoded as two's complement [[little-endian]] values.
| [[Little-endian]] IEEE single/double precision numbers.
| [[UTF-8]] encoded [[type-length-value]] string.
| Balanced brackets with an optional array count. Arrays can be nested.
| Balanced brackets with an optional object count. Objects can be nested.
|}

It should be noted that any XML based representation can be compressed, or generated as, using [http://www.w3.org/XML/EXI/ EXI - Efficient XML Interchange], which is a "Schema Informed" (as opposed to schema-required, or schema-less) binary compression standard for XML.

==See also==
*[[Comparison of document markup languages]]

== References ==
{{reflist}}

==External links==
*[http://www.w3.org/TR/NOTE-xml-ql/ XML-QL Proposal discussing XML benefits]
*[http://www.25hoursaday.com/weblog/PermaLink.aspx?guid=dada27bf-2af0-400d-94c9-5575546f5664 When to use XML]
*[[c2:XmlSucks|XmlSucks]] at the Portland Pattern Repository
*[http://www.xml.com/pub/a/2001/05/02/champion.html Daring to Do Less with XML]

{{DEFAULTSORT:Comparison Of Data Serialization Formats}}
[[Category:Data serialization formats]]
[[Category:Persistence]]
