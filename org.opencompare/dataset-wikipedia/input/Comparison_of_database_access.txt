{{Confusing|date=February 2008}}
{{ProgLangCompare}}
'''A comprehensive comparison of current:database Management Systems, and corresponding Programming Languages;
               including: Command, Semantic, and Syntax references.''' 

== Database input commands ==

=== Database and table management ===
{| class="wikitable"
!Database
!Create database
!Delete database
!List databases
!Use a db
!Create table
!Delete table
!List tables
!List table fields
|-
| [[MySQL]]
| <tt>create database ''dbname'';</tt>
| <tt>drop database ''dbname'';</tt>
| <tt>show databases;</tt>
| <tt>use ''dbname'';</tt>
| <tt>create table ''tbname'';</tt>
| <tt>drop table ''tbname'';</tt>
| <tt>show tables;</tt>
| <tt>describe ''tbname'';</tt>
|-
| [[PostgreSQL]]
| <tt>create database ''dbname'';</tt>
| <tt>drop database ''dbname'';</tt>
| <tt>\l <small>(in psql)</small></tt>
| <tt>\c ''dbname'' (in psql)<br><small>For schemas (a similar feature):</small><br> set search_path = ''schema_name'';</tt>
| <tt>create table ''tbname'' (''field1'' ''value_type1'', ''field2'' ''value_type2'', ... );</tt>
| <tt>drop table ''tbname'';</tt>
| <tt>\d <small>(in psql)</small></tt>
| <tt>\d ''tbname'' (in psql)</small></tt>
|-
| [[Sqlite]] ver 3
| <tt>? </tt>
| <tt>? </tt>
| <tt>? </tt>
| <tt>$ sqlite3 ''filename''</tt>
| <tt>create table ''tbname'' (''field1'' ''value_type1'', ''field2'' ''value_type2'', ... )</tt>
| <tt>drop table ''tbname''</tt>
| <tt>.tables</tt>
| <tt>.schema</tt>
|-
|}

=== Using data in a table ===
{| class="wikitable"
!Database
!show all data in all fields
!show all data in some fields
!show filtered data in all fields
|-
| [[MySQL]]
| {{code |lang=mysql|select * from "tbname";}}
| {{code |lang=mysql|select "fields" from "tbname";}}
| {{code |lang=mysql|select * from "tbname" where "filter_expr";}}
|}

=== Filtering expressions ===

=== Altering tables ===

{| class="wikitable"
!Database
!Add new column
!Delete column
!Change column
!Add element
!Delete element
|-
| [[MySQL]]
| {{sxhl |lang=mysql|alter table "tbname" 
add column "column_name";}}
| {{sxhl |lang=mysql|alter table "tbname" 
drop column "column_name";}}
| {{sxhl |lang=mysql|alter table "tbname" 
change "old" "new" "newtype";}}
| {{sxhl |lang=mysql|insert into "tbname" ("fields") 
values ("values");}}
| {{sxhl |lang=mysql|delete from "tbname" 
where "expr";}}
|}

=== Managing users and permissions ===

== MySQL databases ==
{| class="wikitable"
![[Programming Language|Prog Language]]
!Access server
!Use database
!List databases
!List tables
|-
|raw MySQL access
|
|<tt>use ''db'';</tt>
|{{code|lang=mysql|1=show databases;}}
|{{code|lang=mysql|1=show tables;}}
|-valign="top"
|[[PHP]]
|{{code|lang=php|1=$link = mysql_connect(host, user, password);}}
or

{{code|lang=php|1=$db = new mysqli(host, user, password);}}

or

{{code|lang=php|1=$db = new PDO('mysql:host=hostname;dbname=dbname', 'username', 'password');}}
|{{code|lang=php|1=mysql_select_db(''name'', $link);}}
or

{{code|lang=php|1=$db = new mysqli(host, user, password, ''name'');}}

or

{{code|lang=php|1=$db->select_db(''name'');}}
|
|
|-
|[[Python (programming language)|Python]]
|{{sxhl|lang=python|1=db = MySQLdb.connect(
      host="hostname", 
      user="username", 
      passwd="password", 
      db="dbname", 
      connect_timeout=5)}}
|{{code|lang=python|import MySQLdb}}
|{{sxhl|lang=python|1=c = db.cursor()
c.execute("show databases")
c.fetchall()}}
|{{sxhl|lang=python|1=c = db.cursor()
c.execute("show tables")
c.fetchall()}}
|}

=== Reading from tables ===
{| class="wikitable"
![[Programming Language|Prog Language]]
!Describe
!List table content
!Search
|-
|raw MySQL access
|<tt>describe ''tablename'';</tt>
|<tt>select ''field'' from ''tablename'';</tt>
|
|-
|[[PHP]]
|
|
|
|}

== Databases in Object-Relational mapping systems ==
{{see also|Object-relational mapping}}
There are ORMs to manage a database:
* [[django (web framework)]]
* [[SQLObject]]
* others

=== Defining the object ===

==== Django ====

This class represents a row of a table named "Table"

<source lang="python">
class Table(models.Model):
     field1_name = models."field_name"()
     field2_name = models."field_name"()

     # More explicit examples
     integer_field = models.IntegerField()
     char_field = models.CharField(max_length=1000)
</source>

=== Using a table ===

{| class="wikitable"
!
! Read value
! Change value
! Search
! Inserting
|-valign="top"
|django 
| {{sxhl|lang=python|1=table_var."field_name"}}
| {{sxhl|lang=python|1=table_var."field_name" = \
"value"}}
| {{sxhl|lang=python|1=table_var = \
Table.objects.filter( "expr" )}}
| {{sxhl|lang=python|1=table_var = Table()
table_var.save()}}
|}

== See also ==
*[[ODBC]]
*[[JDBC]]
*[[MySQL]]
*[[PostgreSQL]]

[[Category:Database APIs| ]]
[[Category:Free database management systems]]
[[Category:Programming languages]]
[[Category:SQL data access]]


{{database-stub}}
